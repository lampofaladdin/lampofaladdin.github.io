<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</title>
    <url>/post/a85052ac.html</url>
    <content><![CDATA[<h1 id="介绍下-Set、Map、WeakSet-和-WeakMap-的区别？"><a href="#介绍下-Set、Map、WeakSet-和-WeakMap-的区别？" class="headerlink" title="介绍下 Set、Map、WeakSet 和 WeakMap 的区别？"></a>介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote>
<p>目前用到Set的功能,是用来去重</p>
</blockquote>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote>
<p>跟object很像,比object多了一些实用的操作方法,object的key只能是字符串,这个的key值可以是对象,数字等</p>
</blockquote>
<h3 id="WeakSet-和-WeakMap"><a href="#WeakSet-和-WeakMap" class="headerlink" title="WeakSet 和 WeakMap"></a>WeakSet 和 WeakMap</h3><blockquote>
<p>没用过</p>
</blockquote>
<h1 id="最高赞题解"><a href="#最高赞题解" class="headerlink" title="最高赞题解"></a>最高赞题解</h1><h3 id="Set-1"><a href="#Set-1" class="headerlink" title="Set"></a>Set</h3><ol>
<li>成员不能重复</li>
<li>只有健值，没有健名，有点类似数组。</li>
<li>可以遍历，方法有add, delete,has</li>
</ol>
<h3 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h3><p>成员都是对象<br>成员都是弱引用，随时可以消失。 可以用来保存DOM节点，不容易造成内存泄漏<br>不能遍历，方法有add, delete,has</p>
<h3 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h3><p>本质上是健值对的集合，类似集合<br>可以遍历，方法很多，可以干跟各种数据格式转换</p>
<h3 id="weakMap"><a href="#weakMap" class="headerlink" title="weakMap"></a>weakMap</h3><ol>
<li>直接受对象作为健名（null除外），不接受其他类型的值作为健名</li>
<li>健名所指向的对象，不计入垃圾回收机制</li>
<li>不能遍历，方法同get,set,has,delete</li>
</ol>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/6" target="_blank" rel="noopener">第 4 题：介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</a><br><a href="https://es6.ruanyifeng.com/#docs/set-map" target="_blank" rel="noopener">ECMAScript 6 入门 – Set 和 Map 数据结构</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>20200806每日一题</title>
    <url>/post/946ca0ec.html</url>
    <content><![CDATA[<h1 id="介绍下深度优先遍历和广度优先遍历，如何实现？"><a href="#介绍下深度优先遍历和广度优先遍历，如何实现？" class="headerlink" title="介绍下深度优先遍历和广度优先遍历，如何实现？"></a>介绍下深度优先遍历和广度优先遍历，如何实现？</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><blockquote>
<p>没有做过相关的内容,猜测</p>
</blockquote>
<h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><blockquote>
<p>先找到一个节点, 遍历到当前节点最深的目录</p>
</blockquote>
<h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><blockquote>
<p>优先遍历当前一级的节点,然后再遍历下一层节点</p>
</blockquote>
<h2 id="最高赞题"><a href="#最高赞题" class="headerlink" title="最高赞题"></a>最高赞题</h2><ul>
<li>第五题问的是深度优先遍历和广度优先遍历，我是从dom节点的遍历来理解这个问题的</li>
<li>html代码</li>
<li><img src="https://oss.wddv.com/www/article/20200807134451.png" alt="20200807134451"></li>
<li>我将用深度优先遍历和广度优先遍历对这个dom树进行查找</li>
</ul>
<h3 id="深度优先遍历-1"><a href="#深度优先遍历-1" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><hr>
<p>深度优先遍历DFS 与树的先序遍历比较类似。<br>假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*深度优先遍历三种方式*&#x2F;</span><br><span class="line">let deepTraversal1 &#x3D; (node, nodeList &#x3D; []) &#x3D;&gt; &#123;</span><br><span class="line">  if (node !&#x3D;&#x3D; null) &#123;</span><br><span class="line">    nodeList.push(node)</span><br><span class="line">    let children &#x3D; node.children</span><br><span class="line">    for (let i &#x3D; 0; i &lt; children.length; i++) &#123;</span><br><span class="line">      deepTraversal1(children[i], nodeList)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return nodeList</span><br><span class="line">&#125;</span><br><span class="line">let deepTraversal2 &#x3D; (node) &#x3D;&gt; &#123;</span><br><span class="line">    let nodes &#x3D; []</span><br><span class="line">    if (node !&#x3D;&#x3D; null) &#123;</span><br><span class="line">      nodes.push(node)</span><br><span class="line">      let children &#x3D; node.children</span><br><span class="line">      for (let i &#x3D; 0; i &lt; children.length; i++) &#123;</span><br><span class="line">        nodes &#x3D; nodes.concat(deepTraversal2(children[i]))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nodes</span><br><span class="line">  &#125;</span><br><span class="line">&#x2F;&#x2F; 非递归</span><br><span class="line">let deepTraversal3 &#x3D; (node) &#x3D;&gt; &#123;</span><br><span class="line">  let stack &#x3D; []</span><br><span class="line">  let nodes &#x3D; []</span><br><span class="line">  if (node) &#123;</span><br><span class="line">    &#x2F;&#x2F; 推入当前处理的node</span><br><span class="line">    stack.push(node)</span><br><span class="line">    while (stack.length) &#123;</span><br><span class="line">      let item &#x3D; stack.pop()</span><br><span class="line">      let children &#x3D; item.children</span><br><span class="line">      nodes.push(item)</span><br><span class="line">      &#x2F;&#x2F; node &#x3D; [] stack &#x3D; [parent]</span><br><span class="line">      &#x2F;&#x2F; node &#x3D; [parent] stack &#x3D; [child3,child2,child1]</span><br><span class="line">      &#x2F;&#x2F; node &#x3D; [parent, child1] stack &#x3D; [child3,child2,child1-2,child1-1]</span><br><span class="line">      &#x2F;&#x2F; node &#x3D; [parent, child1-1] stack &#x3D; [child3,child2,child1-2]</span><br><span class="line">      for (let i &#x3D; children.length - 1; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">        stack.push(children[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return nodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><p><img src="https://oss.wddv.com/www/article/20200807134542.png" alt="20200807134542"></p>
<h3 id="广度优先遍历-1"><a href="#广度优先遍历-1" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><hr>
<p>广度优先遍历 BFS<br>从图中某顶点v出发，在访问了v之后依次访问v的各个未曾访问过的邻接点，然后分别从这些邻接点出发依次访问它们的邻接点，并使得“先被访问的顶点的邻接点先于后被访问的顶点的邻接点被访问，直至图中所有已被访问的顶点的邻接点都被访问到。 如果此时图中尚有顶点未被访问，则需要另选一个未曾被访问过的顶点作为新的起始点，重复上述过程，直至图中所有顶点都被访问到为止。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let widthTraversal2 &#x3D; (node) &#x3D;&gt; &#123;</span><br><span class="line">  let nodes &#x3D; []</span><br><span class="line">  let stack &#x3D; []</span><br><span class="line">  if (node) &#123;</span><br><span class="line">    stack.push(node)</span><br><span class="line">    while (stack.length) &#123;</span><br><span class="line">      let item &#x3D; stack.shift()</span><br><span class="line">      let children &#x3D; item.children</span><br><span class="line">      nodes.push(item)</span><br><span class="line">        &#x2F;&#x2F; 队列，先进先出</span><br><span class="line">        &#x2F;&#x2F; nodes &#x3D; [] stack &#x3D; [parent]</span><br><span class="line">        &#x2F;&#x2F; nodes &#x3D; [parent] stack &#x3D; [child1,child2,child3]</span><br><span class="line">        &#x2F;&#x2F; nodes &#x3D; [parent, child1] stack &#x3D; [child2,child3,child1-1,child1-2]</span><br><span class="line">        &#x2F;&#x2F; nodes &#x3D; [parent,child1,child2]</span><br><span class="line">      for (let i &#x3D; 0; i &lt; children.length; i++) &#123;</span><br><span class="line">        stack.push(children[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return nodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h4><p><img src="https://oss.wddv.com/www/20200807134554.png" alt="20200807134554"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/9" target="_blank" rel="noopener">第 5 题：介绍下深度优先遍历和广度优先遍历，如何实现？ #9</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>编程题</tag>
      </tags>
  </entry>
  <entry>
    <title>20200817题目</title>
    <url>/post/d9958b57.html</url>
    <content><![CDATA[<h1 id="ES5-ES6-的继承除了写法以外还有什么区别？"><a href="#ES5-ES6-的继承除了写法以外还有什么区别？" class="headerlink" title="ES5/ES6 的继承除了写法以外还有什么区别？"></a>ES5/ES6 的继承除了写法以外还有什么区别？</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><p>都是基于原型链的写法,别的不知道.</p>
<h2 id="最高题解"><a href="#最高题解" class="headerlink" title="最高题解"></a>最高题解</h2><h3 id="class-声明会提升，但不会初始化赋值。Foo-进入暂时性死区，类似于-let、const-声明变量。-没有变量提升"><a href="#class-声明会提升，但不会初始化赋值。Foo-进入暂时性死区，类似于-let、const-声明变量。-没有变量提升" class="headerlink" title="class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。(没有变量提升)"></a>class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量。(没有变量提升)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="keyword">new</span> Bar(); <span class="comment">// it's ok</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bar = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo(); <span class="comment">// ReferenceError: Foo is not defined</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="class-声明内部会启用严格模式。"><a href="#class-声明内部会启用严格模式。" class="headerlink" title="class 声明内部会启用严格模式。"></a>class 声明内部会启用严格模式。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用一个未声明的变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  baz = <span class="number">42</span>; <span class="comment">// it's ok</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    fol = <span class="number">42</span>; <span class="comment">// ReferenceError: fol is not defined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure>

<h3 id="class-的所有方法（包括静态方法和实例方法）都是不可枚举的。"><a href="#class-的所有方法（包括静态方法和实例方法）都是不可枚举的。" class="headerlink" title="class 的所有方法（包括静态方法和实例方法）都是不可枚举的。"></a>class 的所有方法（包括静态方法和实例方法）都是不可枚举的。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用一个未声明的变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bar = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line">Bar.answer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Bar.prototype.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> barKeys = <span class="built_in">Object</span>.keys(Bar); <span class="comment">// ['answer']</span></span><br><span class="line"><span class="keyword">const</span> barProtoKeys = <span class="built_in">Object</span>.keys(Bar.prototype); <span class="comment">// ['print']</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> answer() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fooKeys = <span class="built_in">Object</span>.keys(Foo); <span class="comment">// []</span></span><br><span class="line"><span class="keyword">const</span> fooProtoKeys = <span class="built_in">Object</span>.keys(Foo.prototype); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h3 id="class-的所有方法（包括静态方法和实例方法）都没有原型对象-prototype，所以也没有-construct-，不能使用-new-来调用。"><a href="#class-的所有方法（包括静态方法和实例方法）都没有原型对象-prototype，所以也没有-construct-，不能使用-new-来调用。" class="headerlink" title="class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有[[construct]]，不能使用 new 来调用。"></a>class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有[[construct]]，不能使用 new 来调用。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bar = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line">Bar.prototype.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="keyword">const</span> barPrint = <span class="keyword">new</span> bar.print(); <span class="comment">// it's ok</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">const</span> fooPrint = <span class="keyword">new</span> foo.print(); <span class="comment">// TypeError: foo.print is not a constructor</span></span><br></pre></td></tr></table></figure>

<h3 id="必须使用-new-调用-class。"><a href="#必须使用-new-调用-class。" class="headerlink" title="必须使用 new 调用 class。"></a>必须使用 new 调用 class。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bar = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = Bar(); <span class="comment">// it's ok</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = Foo(); <span class="comment">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></span><br></pre></td></tr></table></figure>

<h3 id="class-内部无法重写类名。"><a href="#class-内部无法重写类名。" class="headerlink" title="class 内部无法重写类名。"></a>class 内部无法重写类名。</h3><pre><code class="javascript"> <span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>{
  Bar = <span class="string">'Baz'</span>; <span class="comment">// it's ok</span>
  <span class="keyword">this</span>.bar = <span class="number">42</span>;
}
<span class="keyword">const</span> bar = <span class="keyword">new</span> Bar();
<span class="comment">// Bar: 'Baz'</span>
<span class="comment">// bar: Bar {bar: 42}  </span>

<span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>{
  <span class="keyword">constructor</span>() {
    <span class="keyword">this</span>.foo = <span class="number">42</span>;
    Foo = <span class="string">'Fol'</span>; <span class="comment">// TypeError: Assignment to constant variable</span>
  }
}
<span class="keyword">const</span> foo = <span class="keyword">new</span> Foo();
Foo = <span class="string">'Fol'</span>; <span class="comment">// it's ok</span></code></pre>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/20" target="_blank" rel="noopener">第 7 期：ES5/ES6 的继承除了写法以外还有什么区别？ #20</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>20200818题目</title>
    <url>/post/2fddfbbe.html</url>
    <content><![CDATA[<h1 id="setTimeout、Promise、Async-Await-的区别"><a href="#setTimeout、Promise、Async-Await-的区别" class="headerlink" title="setTimeout、Promise、Async/Await 的区别"></a>setTimeout、Promise、Async/Await 的区别</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><ul>
<li>setTimeout 只是一个异步的定时器,用来执行多少时间后的任务</li>
<li>promise 是一个规范,用then,catch,all,race等方法更好的处理异步内容</li>
<li>async/await 是一个promise的语法糖,不了解具体的实现</li>
</ul>
<blockquote>
<p>没想到是考察宏任务,微任务的,打扰了.草.</p>
</blockquote>
<h2 id="最高赞题解"><a href="#最高赞题解" class="headerlink" title="最高赞题解"></a>最高赞题解</h2><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)	<span class="comment">//1. 打印 script start</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'settimeout'</span>)	<span class="comment">// 4. 打印 settimeout</span></span><br><span class="line">&#125;)	<span class="comment">// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)	<span class="comment">//3. 打印 script start</span></span><br><span class="line"><span class="comment">// 输出顺序：script start-&gt;script end-&gt;settimeout</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Promise</li>
</ol>
<ul>
<li><p>Promise本身是同步的立即执行函数， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行，打印p的时候，是打印的返回结果，一个Promise实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    resolve()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1 end'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'settimeout'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"><span class="comment">// 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;settimeout</span></span><br></pre></td></tr></table></figure></li>
<li><p>当JS主线程执行到Promise对象时，</p>
</li>
<li><p>promise1.then() 的回调就是一个 task</p>
</li>
<li><p>promise1 是 resolved或rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue</p>
</li>
<li><p>promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中</p>
</li>
<li><p>setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况</p>
</li>
</ul>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line">async1();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end</span></span><br></pre></td></tr></table></figure>
<h4 id="async-函数返回一个-Promise-对象，当函数执行的时候，一旦遇到-await-就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了-async-函数体。"><a href="#async-函数返回一个-Promise-对象，当函数执行的时候，一旦遇到-await-就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了-async-函数体。" class="headerlink" title="async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。"></a>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</h4><ul>
<li>举个例子：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(func1())</span><br></pre></td></tr></table></figure>
<ul>
<li>在这里插入图片描述</li>
<li>很显然，func1的运行结果其实就是一个Promise对象。因此我们也可以使用then来处理后续逻辑。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">func1().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">// 30</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>await的含义为等待，也就是 async 函数需要等待await后的函数执行完成并且有了返回结果（Promise对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。</p>
<p>更多可见setTimeout、Promise、Async/Await<br><a href="https://github.com/sisterAn/blog/issues/21" target="_blank" rel="noopener">浏览器的Tasks、microtasks、 queues 和 schedules #21</a><br><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/33" target="_blank" rel="noopener">第 8 题：setTimeout、Promise、Async/Await 的区别 #33</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>20200819题目</title>
    <url>/post/89aaf00a.html</url>
    <content><![CDATA[<h1 id="（头条、微医）Async-Await-如何通过同步的方式实现异步"><a href="#（头条、微医）Async-Await-如何通过同步的方式实现异步" class="headerlink" title="（头条、微医）Async/Await 如何通过同步的方式实现异步"></a>（头条、微医）Async/Await 如何通过同步的方式实现异步</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><ul>
<li>是promise的语法糖,async 返回的是promise,await 后面的语句相当于放在前一个promise的then 方法内.</li>
<li>个人猜测是这样</li>
</ul>
<h2 id="最高赞题解"><a href="#最高赞题解" class="headerlink" title="最高赞题解"></a>最高赞题解</h2><h3 id="本质是单向链表吧"><a href="#本质是单向链表吧" class="headerlink" title="本质是单向链表吧"></a>本质是单向链表吧</h3><p>Async/Await 如何通过同步的方式实现异步<br>作为前端人员要回答这个问题，需要了解这三个知识点：</p>
<ul>
<li>同步</li>
<li>异步</li>
<li>Async/Await<br>首先，js 是单线程的（重复三遍），所谓单线程，<br>通俗的讲就是，一根筋（比喻有点过分，哈哈）执行代码是一行一行的往下走（即所谓的同步），<br>如果上面的没执行完，就痴痴的等着（是不是很像恋爱中在路边等她/他的你，假装 new 了个对象，啊哈哈哈，调皮一下很开心），<br>还是举个 🌰 吧：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chrome 75</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> d = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e8</span>; i++) &#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - d); <span class="comment">// 62ms左右</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> d = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - d); <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">test1();</span><br></pre></td></tr></table></figure>
上面仅仅是一个 for 循环，而在实际应用中，会有大量的网络请求，它的响应时间是不确定的，这种情况下也要痴痴的等么？显然是不行的，因而 js 设计了异步，即 发起网络请求（诸如 IO 操作，定时器），由于需要等服务器响应，就先不理会，而是去做其他的事儿，等请求返回了结果的时候再说（即异步）。<br>那么如何实现异步呢？其实我们平时已经在大量使用了，那就是 callback，例如：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'http://xxx'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
success 作为函数传递过去并不会立即执行，而是等请求成功了才执行，即回调函数（callback）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.rename(<span class="string">'旧文件.txt'</span>, <span class="string">'新文件.txt'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'重命名完成'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
和网络请求类似，等到 IO 操作有了结果（无论成功与否）才会执行第三个参数：(err)=&gt;{}</li>
</ul>
<p>从上面我们就可以看出，实现异步的核心就是回调钩子，将 cb 作为参数传递给异步执行函数，当有了结果后在触发 cb。想了解更多，去看看 event-loop 机制吧。</p>
<p>至于 async/await 是如何出现的呢，在 es6 之前，大多 js 数项目中会有类似这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax1(url, () =&gt; &#123;</span><br><span class="line">  ajax2(url, () =&gt; &#123;</span><br><span class="line">    ajax3(url, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这种函数嵌套，大量的回调函数，使代码阅读起来晦涩难懂，不直观，形象的称之为回调地狱（callback hell），所以为了在写法上能更通俗一点，es6+陆续出现了 Promise、Generator、Async/await，力求在写法上简洁明了，可读性强。</p>
<p>=========================我是分割线==========================</p>
<p>以上只是铺垫，下面在进入正题 👇，开始说道说道主角：async/await</p>
<p>=========================我是分割线==========================</p>
<p>async/await 是参照 Generator 封装的一套异步处理方案，可以理解为 Generator 的语法糖，</p>
<p>所以了解 async/await 就不得不讲一讲 Generator,</p>
<p>而 Generator 又依赖于迭代器Iterator，</p>
<p>所以就得先讲一讲 Iterator,</p>
<p>而 Iterator 的思想呢又来源于单向链表，</p>
<p>终于找到源头了：单向链表</p>
<h3 id="1-单向链表"><a href="#1-单向链表" class="headerlink" title="1. 单向链表"></a>1. 单向链表</h3><p>wiki：链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序储存数据，而是在每一个节点里存到下一个节点的指针（Pointer）。由于不必须按顺序储存，链表在插入的时候可以达到 o(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要 o(n)的时间，而顺序表响应的时间复杂度分别是 o(logn)和 o(1)。</p>
<p>总结一下链表优点：</p>
<p>无需预先分配内存<br>插入/删除节点不影响其他节点，效率高（典型的例子：git commit、dom 操作）<br>单向链表：是链表中最简单的一种，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。<br><img src="https://oss.wddv.com/www/article/20200819112119.png" alt="20200819112119"><br>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接</p>
<p>单链特点：节点的链接方向是单向的；相对于数组来说，单链表的的随机访问速度较慢，但是单链表删除/添加数据的效率很高。</p>
<p>理解 js 原型链/作用域链的话，理解这个很容易，他们是相通的。编程语言中，数组的长度时固定的，所以数组中的增加和删除比较麻烦，需要频繁的移动数组中的其他元素，而 js 作为一门动态语言，数组本质是一个类似数组的对象，是动态的，不需要预先分配内存</p>
<p>那么如何设计一个单向链表呢？这个取决于我们需要哪些操作，通常有：</p>
<ul>
<li>append(element)：追加节点</li>
<li>insert(element,index)：在索引位置插入节点</li>
<li>remove(element)：删除第一个匹配到的节点</li>
<li>removeAt(index)：删除指定索引节点</li>
<li>removeAll(element)：删除所有匹配的节点</li>
<li>get(index)：获取指定索引的节点信息</li>
<li>set(element,index)：修改指定索引的节点值</li>
<li>indexOf(element)：获取某节点的索引位置</li>
<li>clear()：清除所有节点</li>
<li>length()：返回节点长度</li>
<li>printf()：打印节点信息<br>看到这些方法是不是有些许熟悉，当你用原生 js 或 jq 时常会用上面类似的方法，现在根据上面列出的方法进行实现一个单向链：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节点模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(element, next) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element;</span><br><span class="line">    <span class="keyword">this</span>.next = next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>._head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>._errorBoundary = <span class="keyword">this</span>._errorBoundary.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>._getNodeByIndex = <span class="keyword">this</span>._getNodeByIndex.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.append = <span class="keyword">this</span>.append.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="keyword">this</span>.insert.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="keyword">this</span>.remove.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.removeAt = <span class="keyword">this</span>.removeAt.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.removeAll = <span class="keyword">this</span>.removeAll.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.getElement = <span class="keyword">this</span>.getElement.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.setIndex = <span class="keyword">this</span>.setIndex.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.indexOf = <span class="keyword">this</span>.indexOf.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="keyword">this</span>.clear.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="keyword">this</span>.length.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.printf = <span class="keyword">this</span>.printf.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 边界检验</span></span><br><span class="line">  _errorBoundary(index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>._size) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">`超出边界(<span class="subst">$&#123;<span class="number">0</span>&#125;</span>~<span class="subst">$&#123;<span class="keyword">this</span>._size&#125;</span>)，目标位置<span class="subst">$&#123;index&#125;</span>不存在！`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据索引获取目标对象</span></span><br><span class="line">  _getNodeByIndex(index) &#123;</span><br><span class="line">    <span class="keyword">this</span>._errorBoundary(index);</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">this</span>._head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">      obj = obj.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 追加节点</span></span><br><span class="line">  append(element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._size === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._head = <span class="keyword">new</span> LinkNode(element, <span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> obj = <span class="keyword">this</span>._getNodeByIndex(<span class="keyword">this</span>._size - <span class="number">1</span>);</span><br><span class="line">      obj.next = <span class="keyword">new</span> LinkNode(element, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._size++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在索引位置插入节点</span></span><br><span class="line">  insert(element, index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._head = <span class="keyword">new</span> LinkNode(element, <span class="keyword">this</span>._head);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> obj = <span class="keyword">this</span>._getNodeByIndex(index - <span class="number">1</span>);</span><br><span class="line">      obj.next = <span class="keyword">new</span> LinkNode(element, obj.next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._size++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除第一个匹配到的节点</span></span><br><span class="line">  remove(element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._size &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._head.element == element) &#123;</span><br><span class="line">      <span class="keyword">this</span>._head.element = <span class="keyword">this</span>._head.next;</span><br><span class="line">      <span class="keyword">this</span>._size--;</span><br><span class="line">      <span class="keyword">return</span> element;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="keyword">this</span>._head;</span><br><span class="line">      <span class="keyword">while</span> (temp.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.next.element == element) &#123;</span><br><span class="line">          temp.next = temp.next.next;</span><br><span class="line">          <span class="keyword">this</span>._size--;</span><br><span class="line">          <span class="keyword">return</span> element;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除指定索引节点</span></span><br><span class="line">  removeAt(index) &#123;</span><br><span class="line">    <span class="keyword">this</span>._errorBoundary(index);</span><br><span class="line">    <span class="keyword">let</span> element = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      element = <span class="keyword">this</span>._head.element;</span><br><span class="line">      <span class="keyword">this</span>._head = <span class="keyword">this</span>._head.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> prev = <span class="keyword">this</span>._getNodeByIndex(index - <span class="number">1</span>);</span><br><span class="line">      element = prev.next.element;</span><br><span class="line">      prev.next = prev.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._size--;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除所有匹配的节点</span></span><br><span class="line">  removeAll(element) &#123;</span><br><span class="line">    <span class="comment">// 创建虚拟头节点，</span></span><br><span class="line">    <span class="keyword">let</span> v_head = <span class="keyword">new</span> LinkNode(<span class="literal">null</span>, <span class="keyword">this</span>._head);</span><br><span class="line">    <span class="keyword">let</span> tempNode = v_head;</span><br><span class="line">    <span class="comment">// let tempEle = null;</span></span><br><span class="line">    <span class="keyword">while</span> (tempNode.next) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tempNode.next.element == element) &#123;</span><br><span class="line">        tempNode.next = tempNode.next.next;</span><br><span class="line">        <span class="keyword">this</span>._size--;</span><br><span class="line">        <span class="comment">// tempEle = element;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tempNode = tempNode.next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._head = v_head.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取指定索引的节点信息</span></span><br><span class="line">  getElement(index) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._getNodeByIndex(index).element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 修改指定索引的节点值</span></span><br><span class="line">  setIndex(element, index) &#123;</span><br><span class="line">    <span class="keyword">this</span>._errorBoundary(index);</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">this</span>._getNodeByIndex(index);</span><br><span class="line">    obj.element = element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取某节点的索引位置</span></span><br><span class="line">  indexOf(element) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">this</span>._head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._size; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.element == element) &#123;</span><br><span class="line">        index = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      obj = obj.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清除所有节点</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>._head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回节点长度</span></span><br><span class="line">  length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 打印节点信息</span></span><br><span class="line">  printf() &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">this</span>._head;</span><br><span class="line">    <span class="keyword">const</span> arr = [];</span><br><span class="line">    <span class="keyword">while</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">      arr.push(obj.element);</span><br><span class="line">      obj = obj.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> str = arr.join(<span class="string">'-&gt;'</span>);</span><br><span class="line">    <span class="keyword">return</span> str || <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> LinkedList();</span><br><span class="line">obj.append(<span class="number">0</span>);</span><br><span class="line">obj.append(<span class="number">1</span>);</span><br><span class="line">obj.append(<span class="number">2</span>);</span><br><span class="line">obj.printf();</span><br><span class="line"><span class="comment">// "0-&gt;1-&gt;2"</span></span><br><span class="line"></span><br><span class="line">obj.insert(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">obj.printf();</span><br><span class="line"><span class="comment">// "0-&gt;1-&gt;2-&gt;3"</span></span><br><span class="line"></span><br><span class="line">obj.remove(<span class="number">3</span>);</span><br><span class="line">obj.printf();</span><br><span class="line"><span class="comment">// "0-&gt;1-&gt;2"</span></span><br><span class="line"></span><br><span class="line">obj.removeAt(<span class="number">0</span>);</span><br><span class="line">obj.printf();</span><br><span class="line"><span class="comment">// "1-&gt;2"</span></span><br><span class="line"></span><br><span class="line">obj.setIndex(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">obj.printf();</span><br><span class="line"><span class="comment">// "0-&gt;2"</span></span><br><span class="line"></span><br><span class="line">obj.indexOf(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">obj.length();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">obj.clear();</span><br><span class="line">obj.printf();</span><br><span class="line"><span class="comment">// null</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>通过以上，我假装你明白什么是单向链表，并且能够用代码实现一个单向链表了，下一步开始说一说迭代器 Iterator</p>
<h3 id="2-Iterator"><a href="#2-Iterator" class="headerlink" title="2. Iterator"></a>2. Iterator</h3><p>Iterator 翻译过来就是<strong>迭代器（遍历器）</strong>让我们先来看看它的遍历过程(类似于单向链表)：</p>
<p>创建一个指针对象，指向当前数据结构的起始位置<br>第一次调用指针对象的 next 方法，将指针指向数据结构的第一个成员<br>第二次调用指针对象的 next 方法，将指针指向数据结构的第二个成员<br>不断的调用指针对象的 next 方法，直到它指向数据结构的结束位置<br>一个对象要变成可迭代的，必须实现 @@iterator 方法，即对象（或它原型链上的某个对象）必须有一个名字是 Symbol.iterator 的属性（原生具有该属性的有：字符串、数组、类数组的对象、Set 和 Map）：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>[Symbol.iterator]</td>
<td>返回一个对象的无参函数，被返回对象符合迭代器协议</td>
</tr>
</tbody></table>
<p>当一个对象需要被迭代的时候（比如开始用于一个 for..of 循环中），它的 @@iterator 方法被调用并且无参数，然后返回一个用于在迭代中获得值的迭代器</p>
<p>迭代器协议：产生一个有限或无限序列的值，并且当所有的值都已经被迭代后，就会有一个默认的返回值</p>
<p>当一个对象只有满足下述条件才会被认为是一个迭代器：</p>
<p>它实现了一个 next() 的方法，该方法必须返回一个对象,对象有两个必要的属性：</p>
<p>done（bool）<br>true：迭代器已经超过了可迭代次数。这种情况下,value 的值可以被省略<br>如果迭代器可以产生序列中的下一个值，则为 false。这等效于没有指定 done 这个属性<br>value 迭代器返回的任何 JavaScript 值。done 为 true 时可省略<br>根据上面的规则，咱们来自定义一个简单的迭代器：</p>
<pre><code class="javascript"><span class="keyword">const</span> makeIterator = <span class="function"><span class="params">arr</span> =&gt;</span> {
  <span class="keyword">let</span> nextIndex = <span class="number">0</span>;
  <span class="keyword">return</span> {
    next: <span class="function"><span class="params">()</span> =&gt;</span>
      nextIndex &lt; arr.length
        ? { <span class="attr">value</span>: arr[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span> }
        : { <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> },
  };
};
<span class="keyword">const</span> it = makeIterator([<span class="string">'人月'</span>, <span class="string">'神话'</span>]);
<span class="built_in">console</span>.log(it.next()); <span class="comment">// { value: "人月", done: false }</span>
<span class="built_in">console</span>.log(it.next()); <span class="comment">// { value: "神话", done: false }</span>
<span class="built_in">console</span>.log(it.next()); <span class="comment">// {value: undefined, done: true }</span>
我们还可以自定义一个可迭代对象：

<span class="keyword">const</span> myIterable = {};
myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>{
  <span class="keyword">yield</span> <span class="number">1</span>;
  <span class="keyword">yield</span> <span class="number">2</span>;
  <span class="keyword">yield</span> <span class="number">3</span>;
};

<span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> myIterable) {
  <span class="built_in">console</span>.log(value);
}
<span class="comment">// 1</span>
<span class="comment">// 2</span>
<span class="comment">// 3</span>

<span class="comment">//or</span>

<span class="built_in">console</span>.log([...myIterable]); <span class="comment">// [1, 2, 3]</span></code></pre>
<p>了解了迭代器，下面可以进一步了解生成器了</p>
<h3 id="3-Generator"><a href="#3-Generator" class="headerlink" title="3. Generator"></a>3. Generator</h3><p>Generator：生成器对象是生成器函数（GeneratorFunction）返回的，它符合可迭代协议和迭代器协议，既是迭代器也是可迭代对象，可以调用 next 方法，但它不是函数，更不是构造函数</p>
<p>生成器函数（GeneratorFunction）：</p>
<blockquote>
<p>function* name([param[, param[, … param]]]) { statements } –&gt;</p>
</blockquote>
<blockquote>
<p>name：函数名<br>param：参数<br>statements：js 语句<br>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的迭代器对象，当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现 yield 的位置为止（让执行处于暂停状），yield 后紧跟迭代器要返回的值。或者如果用的是 yield*（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行），调用 next() （再启动）方法时，如果传入了参数，那么这个参数会作为上一条执行的 yield 语句的返回值，例如：</p>
</blockquote>
<pre><code class="javascript"><span class="function"><span class="keyword">function</span>* <span class="title">another</span>(<span class="params"></span>) </span>{
  <span class="keyword">yield</span> <span class="string">'人月神话'</span>;
}
<span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>{
  <span class="keyword">yield</span>* another(); <span class="comment">// 移交执行权</span>
  <span class="keyword">const</span> a = <span class="keyword">yield</span> <span class="string">'hello'</span>;
  <span class="keyword">const</span> b = <span class="keyword">yield</span> a; <span class="comment">// a='world' 是 next('world') 传参赋值给了上一个 yidle 'hello' 的左值</span>
  <span class="keyword">yield</span> b; <span class="comment">// b=！ 是 next('！') 传参赋值给了上一个 yidle a 的左值</span>
}
<span class="keyword">const</span> g = gen();
g.next(); <span class="comment">// {value: "人月神话", done: false}</span>
g.next(); <span class="comment">// {value: "hello", done: false}</span>
g.next(<span class="string">'world'</span>); <span class="comment">// {value: "world", done: false} 将 'world' 赋给上一条 yield 'hello' 的左值，即执行 a='world'，</span>
g.next(<span class="string">'!'</span>); <span class="comment">// {value: "!", done: false} 将 '!' 赋给上一条 yield a 的左值，即执行 b='!'，返回 b</span>
g.next(); <span class="comment">// {value: undefined, done: false}</span></code></pre>
<p>看到这里，你可能会问，Generator 和 callback 有啥关系，如何处理异步呢？其实二者没有任何关系，我们只是通过一些方式强行的它们产生了关系，才会有 Generator 处理异步</p>
<p>我们来总结一下 Generator 的本质，暂停，它会让程序执行到指定位置先暂停（yield），然后再启动（next），再暂停（yield），再启动（next），而这个暂停就很容易让它和异步操作产生联系，因为我们在处理异步时：开始异步处理（网络求情、IO 操作），然后暂停一下，等处理完了，再该干嘛干嘛。不过值得注意的是，js 是单线程的（又重复了三遍），异步还是异步，callback 还是 callback，不会因为 Generator 而有任何改变</p>
<p>下面来看看，用 Generator 实现异步：</p>
<pre><code class="javascript"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">'util'</span>).promisify;
<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);
<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);
<span class="keyword">const</span> readFile = promisify(fs.readFile);

<span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>{
  <span class="keyword">const</span> res1 = <span class="keyword">yield</span> readFile(path.resolve(__dirname, <span class="string">'../data/a.json'</span>), { <span class="attr">encoding</span>: <span class="string">'utf8'</span> });
  <span class="built_in">console</span>.log(res1);
  <span class="keyword">const</span> res2 = <span class="keyword">yield</span> readFile(path.resolve(__dirname, <span class="string">'../data/b.json'</span>), { <span class="attr">encoding</span>: <span class="string">'utf8'</span> });
  <span class="built_in">console</span>.log(res2);
};

<span class="keyword">const</span> g = gen();

<span class="keyword">const</span> g1 = g.next();
<span class="built_in">console</span>.log(<span class="string">'g1:'</span>, g1);

g1.value
  .then(<span class="function"><span class="params">res1</span> =&gt;</span> {
    <span class="built_in">console</span>.log(<span class="string">'res1:'</span>, res1);
    <span class="keyword">const</span> g2 = g.next(res1);
    <span class="built_in">console</span>.log(<span class="string">'g2:'</span>, g2);
    g2.value
      .then(<span class="function"><span class="params">res2</span> =&gt;</span> {
        <span class="built_in">console</span>.log(<span class="string">'res2:'</span>, res2);
        g.next(res2);
      })
      .catch(<span class="function"><span class="params">err2</span> =&gt;</span> {
        <span class="built_in">console</span>.log(err2);
      });
  })
  .catch(<span class="function"><span class="params">err1</span> =&gt;</span> {
    <span class="built_in">console</span>.log(err1);
  });
<span class="comment">// g1: { value: Promise { &lt;pending&gt; }, done: false }</span>
<span class="comment">// res1: {</span>
<span class="comment">//   "a": 1</span>
<span class="comment">// }</span>

<span class="comment">// {</span>
<span class="comment">//   "a": 1</span>
<span class="comment">// }</span>

<span class="comment">// g2: { value: Promise { &lt;pending&gt; }, done: false }</span>
<span class="comment">// res2: {</span>
<span class="comment">//   "b": 2</span>
<span class="comment">// }</span>

<span class="comment">// {</span>
<span class="comment">//   "b": 2</span>
<span class="comment">// }</span></code></pre>
<p>以上代码是 Generator 和 callback 结合实现的异步，可以看到，仍然需要手动执行 .then 层层添加回调，但由于 next() 方法返回对象 {value: xxx,done: true/false} 所以我们可以简化它，写一个自动执行器：</p>
<pre><code class="javascript"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">'util'</span>).promisify;
<span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);
<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);
<span class="keyword">const</span> readFile = promisify(fs.readFile);

<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">gen</span>) </span>{
  <span class="keyword">const</span> g = gen();
  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">data</span>) </span>{
    <span class="keyword">const</span> res = g.next(data);
    <span class="comment">// 深度递归，只要 `Generator` 函数还没执行到最后一步，`next` 函数就调用自身</span>
    <span class="keyword">if</span> (res.done) <span class="keyword">return</span> res.value;
    res.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{
      next(data);
    });
  }
  next();
}
run(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>{
  <span class="keyword">const</span> res1 = <span class="keyword">yield</span> readFile(path.resolve(__dirname, <span class="string">'../data/a.json'</span>), { <span class="attr">encoding</span>: <span class="string">'utf8'</span> });
  <span class="built_in">console</span>.log(res1);
  <span class="comment">// {</span>
  <span class="comment">//   "a": 1</span>
  <span class="comment">// }</span>
  <span class="keyword">const</span> res2 = <span class="keyword">yield</span> readFile(path.resolve(__dirname, <span class="string">'../data/b.json'</span>), { <span class="attr">encoding</span>: <span class="string">'utf8'</span> });
  <span class="built_in">console</span>.log(res2);
  <span class="comment">// {</span>
  <span class="comment">//   "b": 2</span>
  <span class="comment">// }</span>
});
说了这么多，怎么还没有到 <span class="keyword">async</span>/<span class="keyword">await</span>，客官别急，马上来了（其实我已经漏了一些内容没说：<span class="built_in">Promise</span> 和 callback 的关系，thunk 函数，co 库，感兴趣的可以去 google 一下，ruanyifeng 老师讲的es6 入门非常棒，我时不时的都会去看一看）

<span class="number">4.</span> Async/Await
首先，<span class="keyword">async</span>/<span class="keyword">await</span> 是 Generator 的语法糖，上面我是分割线下的第一句已经讲过，先来看一下二者的对比：

<span class="comment">// Generator</span>
run(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>{
  <span class="keyword">const</span> res1 = <span class="keyword">yield</span> readFile(path.resolve(__dirname, <span class="string">'../data/a.json'</span>), { <span class="attr">encoding</span>: <span class="string">'utf8'</span> });
  <span class="built_in">console</span>.log(res1);
  <span class="keyword">const</span> res2 = <span class="keyword">yield</span> readFile(path.resolve(__dirname, <span class="string">'../data/b.json'</span>), { <span class="attr">encoding</span>: <span class="string">'utf8'</span> });
  <span class="built_in">console</span>.log(res2);
});

<span class="comment">// async/await</span>
<span class="keyword">const</span> readFile = <span class="keyword">async</span> ()=&gt;{
  <span class="keyword">const</span> res1 = <span class="keyword">await</span> readFile(path.resolve(__dirname, <span class="string">'../data/a.json'</span>), { <span class="attr">encoding</span>: <span class="string">'utf8'</span> });
  <span class="built_in">console</span>.log(res1);
  <span class="keyword">const</span> res2 = <span class="keyword">await</span> readFile(path.resolve(__dirname, <span class="string">'../data/b.json'</span>), { <span class="attr">encoding</span>: <span class="string">'utf8'</span> });
  <span class="built_in">console</span>.log(res2);
  <span class="keyword">return</span> <span class="string">'done'</span>；
}
<span class="keyword">const</span> res = readFile();</code></pre>
<p>可以看到，async function 代替了 function*，await 代替了 yield，同时也无需自己手写一个自动执行器 run 了</p>
<p>现在再来看看async/await 的特点：</p>
<p>当 await 后面跟的是 Promise 对象时，才会异步执行，其它类型的数据会同步执行<br>执行 const res = readFile(); 返回的仍然是个 Promise 对象，上面代码中的 return ‘done’; 会直接被下面 then 函数接收到<br>res.then(data =&gt; {<br>  console.log(data); // done<br>});<br>啊，终于完了，一个 async-await 连带出来这么多知识点，以后面试被问到它的原理时，希望能够帮助到你</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/156" target="_blank" rel="noopener">第 9 题：Async/Await 如何通过同步的方式实现异步 #156</a></li>
<li><a href="https://github.com/Mr-jiangzhiguo" target="_blank" rel="noopener">最高赞作者github</a></li>
<li><a href="https://juejin.im/post/5d2c814c6fb9a07ecd3d8e43" target="_blank" rel="noopener">最高赞原文地址：https://juejin.im/post/5d2c814c6fb9a07ecd3d8e43</a></li>
<li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/156" target="_blank" rel="noopener">Async/Await 如何通过同步的方式实现异步 #156</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">MDN文档</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noopener">ECMAScript 6 入门 Iterator 和 for…of 循环 阮一峰</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">ECMAScript 6 入门 Generator 函数的异步应用 阮一峰</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>20200820题目</title>
    <url>/post/92bdb23a.html</url>
    <content><![CDATA[<h1 id="异步笔试题"><a href="#异步笔试题" class="headerlink" title="异步笔试题"></a>异步笔试题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><h3 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h3><ul>
<li>script start</li>
<li>async1 start</li>
<li>async2</li>
<li>promise1</li>
<li>script end</li>
<li>promise2</li>
<li>async1 end</li>
<li>setTimeout</li>
</ul>
<h3 id="实际"><a href="#实际" class="headerlink" title="实际"></a>实际</h3><ul>
<li>cript start</li>
<li>async1 start</li>
<li>async2</li>
<li>promise1</li>
<li>script end</li>
<li>async1 end</li>
<li>promise2</li>
<li>setTimeout</li>
</ul>
<h3 id="错误的地方"><a href="#错误的地方" class="headerlink" title="错误的地方"></a>错误的地方</h3><ul>
<li>微任务的顺序自己理解有问题,promise1 跟async1 end 这两个地方,我以为是应该先执行then里面的内容,但实际还是按照微任务的队列进行执行.</li>
</ul>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul>
<li>js是单线程,会先执行script start</li>
<li>settimeout 是宏任务,不会先执行,直接到async1(),输出async 1 start</li>
<li>在async1 里面执行async2,输出async2,有await,让出线程</li>
<li>执行new promise 输出 promise1</li>
<li>then方法等待,输出 script end</li>
<li>script宏任务队列清空,开始执行微任务,输出async1 end</li>
<li>执行微任务队列,输出promise2</li>
<li>微任务队列晴空,开始下一个宏任务 settimeout</li>
</ul>
<h2 id="最高赞题解"><a href="#最高赞题解" class="headerlink" title="最高赞题解"></a>最高赞题解</h2><ul>
<li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/7" target="_blank" rel="noopener">第 10 题：常见异步笔试题，请写出代码的运行结果 #7</a></li>
<li><a href="https://github.com/Mavericker-1996" target="_blank" rel="noopener">作者github</a></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://es6.ruanyifeng.com/#docs/promise#Promise-resolve" target="_blank" rel="noopener">ECMAScript 6 入门</a><br><a href="https://github.com/dwqs/blog/issues/61" target="_blank" rel="noopener">从一道题浅说 JavaScript 的事件循环</a><br><a href="https://segmentfault.com/a/1190000011296839" target="_blank" rel="noopener">async/await 执行顺序详解</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>20211223-题目</title>
    <url>/post/9cae03bf.html</url>
    <content><![CDATA[<h1 id="字符串中的第一个唯一字符"><a href="#字符串中的第一个唯一字符" class="headerlink" title="字符串中的第一个唯一字符"></a>字符串中的第一个唯一字符</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回 0</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96; s &#x3D; &quot;loveleetcode&quot;</span><br></pre></td></tr></table></figure>
<p>返回 2</p>
<p>提示：你可以假定该字符串只包含小写字母。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul>
<li>双重循环遍历<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstUniqChar</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> strMap = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    strMap.set(s[i], (strMap.get(s[i]) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strMap.get(s[i]) === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>索引一致方法</li>
<li>如果找到的第一个索引与倒数找到的最后一个索引相同，代表是第一个<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstUniqChar</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.lastIndexOf(s[i]) === s.indexOf(s[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn5z8r/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn5z8r/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>有效的字母异位词</title>
    <url>/post/b66fe035.html</url>
    <content><![CDATA[<h1 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p>
<p>注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。</p>
<p>示例 1:</p>
<blockquote>
<p>输入: s = “anagram”, t = “nagaram”</p>
<p>输出: true</p>
<p>示例 2:</p>
</blockquote>
<blockquote>
<p>输入: s = “rat”, t = “car”</p>
<p>输出: false</p>
</blockquote>
<p>提示:</p>
<blockquote>
<p>1 &lt;= s.length, t.length &lt;= 5 * 104</p>
<p>s 和 t 仅包含小写字母</p>
</blockquote>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul>
<li><p>两个map比较字母数是否相同</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span>(<span class="params">s: <span class="built_in">string</span>, t: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> strToMap = <span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> strMap = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      strMap.set(s[i], (strMap.get(s[i]) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strMap;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> sMap = strToMap(s);</span><br><span class="line">  <span class="keyword">const</span> tMap = strToMap(t);</span><br><span class="line">  <span class="keyword">if</span> (sMap.size !== tMap.size) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i of sMap.keys()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sMap.get(i) !== tMap.get(i)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>便利第一个字符串为map，便利第二个字符串，如果第一个map有，就减去1，最后看smap的数字是否都是0</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span>(<span class="params">s: <span class="built_in">string</span>, t: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> strToMap = <span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> strMap = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      strMap.set(s[i], (strMap.get(s[i]) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strMap;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> sMap = strToMap(s);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sMap.get(t[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sMap.set(t[i], sMap.get(t[i])! - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [, v] of sMap) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>排序后遍历</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span>(<span class="params">s: <span class="built_in">string</span>, t: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.length !== t.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> sArr = s.split(<span class="string">""</span>).sort();</span><br><span class="line">  <span class="keyword">const</span> tArr = t.split(<span class="string">""</span>).sort();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sArr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sArr[i] !== tArr[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符替换法，耗时比较长</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span>(<span class="params">s: <span class="built_in">string</span>, t: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.length !== t.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    t = t.replace(s[i], <span class="string">""</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(t);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> !t.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2></li>
<li><p>作者：力扣 (LeetCode)</p>
</li>
<li><p>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn96us/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn96us/</a></p>
</li>
<li><p>来源：力扣（LeetCode）</p>
</li>
<li><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>20211227题目</title>
    <url>/post/ec78b2d4.html</url>
    <content><![CDATA[<h1 id="验证回文数"><a href="#验证回文数" class="headerlink" title="验证回文数"></a>验证回文数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>
<ul>
<li>示例 1:</li>
</ul>
<blockquote>
<p>输入: “A man, a plan, a canal: Panama”<br>输出: true<br>解释：”amanaplanacanalpanama” 是回文串</p>
</blockquote>
<ul>
<li>示例 2:</li>
</ul>
<blockquote>
<p>输入: “race a car”<br>输出: false<br>解释：”raceacar” 不是回文串</p>
</blockquote>
<h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><ul>
<li>1 &lt;= s.length &lt;= 2 * 105</li>
<li>字符串 s 由 ASCII 字符组成</li>
</ul>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> rightIndex = s.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> lowS = s.toLowerCase();</span><br><span class="line">  <span class="keyword">const</span> isSmaller = <span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span></span><br><span class="line">    (s.charCodeAt(<span class="number">0</span>) &gt;= <span class="number">97</span> &amp;&amp; s.charCodeAt(<span class="number">0</span>) &lt;= <span class="number">122</span>) ||</span><br><span class="line">    (s.charCodeAt(<span class="number">0</span>) &gt;= <span class="number">48</span> &amp;&amp; s.charCodeAt(<span class="number">0</span>) &lt;= <span class="number">57</span>);</span><br><span class="line">  <span class="keyword">while</span> (leftIndex &lt; rightIndex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isSmaller(lowS[leftIndex])) &#123;</span><br><span class="line">      leftIndex++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isSmaller(lowS[rightIndex])) &#123;</span><br><span class="line">      rightIndex--;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lowS[leftIndex] !== lowS[rightIndex]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      leftIndex++;</span><br><span class="line">      rightIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xne8id/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xne8id/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>20200729题目</title>
    <url>/post/d89c3838.html</url>
    <content><![CDATA[<h3 id="第-160-题：输出以下代码运行结果，为什么？如果希望每隔-1s-输出一个结果，应该如何改造？注意不可改动-square-方法"><a href="#第-160-题：输出以下代码运行结果，为什么？如果希望每隔-1s-输出一个结果，应该如何改造？注意不可改动-square-方法" class="headerlink" title="第 160 题：输出以下代码运行结果，为什么？如果希望每隔 1s 输出一个结果，应该如何改造？注意不可改动 square 方法"></a>第 160 题：输出以下代码运行结果，为什么？如果希望每隔 1s 输出一个结果，应该如何改造？注意不可改动 square 方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const list &#x3D; [1, 2, 3]</span><br><span class="line">const square &#x3D; num &#x3D;&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      resolve(num * num)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">  list.forEach(async x&#x3D;&gt; &#123;</span><br><span class="line">    const res &#x3D; await square(x)</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote>
<p>因为foreach是并行执行的,并不支持异步，需要改成for或者 for of </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function test() &#123;</span><br><span class="line">    for(let i &#x3D; 0 ;i &lt; list.length ; i++)&#123;</span><br><span class="line">        const res &#x3D; await square(list[i])</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function test() &#123;</span><br><span class="line">    for(let i of list)&#123;</span><br><span class="line">        let res &#x3D; await square(i)</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>20211228题目</title>
    <url>/post/1a30c23d.html</url>
    <content><![CDATA[<h1 id="实现-strStr-函数。"><a href="#实现-strStr-函数。" class="headerlink" title="实现 strStr() 函数。"></a>实现 strStr() 函数。</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。</p>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>
<p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。</p>
<ul>
<li>示例 1：</li>
</ul>
<blockquote>
<p>输入：haystack = “hello”, needle = “ll”<br>输出：2<br>示例 2：</p>
</blockquote>
<blockquote>
<p>输入：haystack = “aaaaa”, needle = “bba”<br>输出：-1<br>示例 3：</p>
</blockquote>
<blockquote>
<p>输入：haystack = “”, needle = “”<br>输出：0</p>
</blockquote>
<h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><ul>
<li>0 &lt;= haystack.length, needle.length &lt;= 5 * 104</li>
<li>haystack 和 needle 仅由小写英文字符组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用字符串原型方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strStr</span>(<span class="params">haystack: <span class="built_in">string</span>, needle: <span class="built_in">string</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (needle.length &gt; haystack.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!needle.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; haystack.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (haystack[i] !== needle[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; needle.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (haystack[j + i] !== needle[j]) &#123;</span><br><span class="line">        temp = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      temp = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原生方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strStr</span>(<span class="params">haystack: <span class="built_in">string</span>, needle: <span class="built_in">string</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> haystack.indexOf(needle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnr003/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnr003/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>20211230题目</title>
    <url>/post/e5758cc4.html</url>
    <content><![CDATA[<h1 id="外观数列"><a href="#外观数列" class="headerlink" title="外观数列"></a>外观数列</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个正整数 n ，输出外观数列的第 n 项。</p>
<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p>
<p>你可以将其视作是由递归公式定义的数字字符串序列：</p>
<ul>
<li>countAndSay(1) = “1”</li>
<li>countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。<br>前五项如下：<blockquote>
<ol>
<li>1</li>
<li>11</li>
<li>21</li>
<li>1211</li>
<li>111221</li>
</ol>
<p>第一项是数字 1 </p>
<p>描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 “11”</p>
<p>描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 “21”</p>
<p>描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 “1211”</p>
<p>描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 “111221”</p>
</blockquote>
要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</li>
</ul>
<ul>
<li>示例 1：</li>
</ul>
<blockquote>
<p>输入：n = 1</p>
<p>输出：”1”</p>
<p>解释：这是一个基本样例。</p>
</blockquote>
<ul>
<li>示例 2：</li>
</ul>
<blockquote>
<p>输入：n = 4</p>
<p>输出：”1211”</p>
<p>解释：</p>
<p>countAndSay(1) = “1”</p>
<p>countAndSay(2) = 读 “1” = 一 个 1 = “11”</p>
<p>countAndSay(3) = 读 “11” = 二 个 1 = “21”</p>
<p>countAndSay(4) = 读 “21” = 一 个 2 + 一 个 1 = “12” + “11” = “1211”</p>
</blockquote>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul>
<li><p>普通做法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countAndSay</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> getNextNum = <span class="function">(<span class="params">num: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; num.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num[i] === num[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result += <span class="string">`<span class="subst">$&#123;counter&#125;</span><span class="subst">$&#123;num[i]&#125;</span>`</span>;</span><br><span class="line">        counter = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="string">"1"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    current = getNextNum(current);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>递归做法</p>
<p>感觉性能会比较差</p>
</li>
</ul>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnpvdm/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnpvdm/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>20220206</title>
    <url>/post/5fc2094e.html</url>
    <content><![CDATA[<p>原来，有你陪着已经这么开心<br>房间里，没有你，这么空旷<br>一边流泪，一边收拾衣服的感觉确实不好<br>有点怀疑，自己为什么会劝你回到哪里<br>我果然是个傻逼</p>
<p>一直在身边的，才是最容易被忽视的。<br>有一天突然不见了。<br>原来是这么难受。</p>
<p>嗯。</p>
<p>有些不知所措</p>
<p>跟自己想的那种情况 不太一样</p>
<p>哭成了傻逼</p>
<p>我以为我能很平静的接受这件事</p>
<p>回到家里，看着熟悉的房间，总是感觉她在那里</p>
<p>还没有离开</p>
<p>一边写 一边哭</p>
<p>不写了</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>20220427-daily</title>
    <url>/post/56e1d812.html</url>
    <content><![CDATA[<p>为众人抱薪者，不可使其冻毙于风雪；</p>
<p>为大众谋福利者，不可使其孤军奋战；</p>
<p>为自由开路者，不可使其困顿于荆棘。</p>
<p>如果天空是黑暗的，那就摸黑生存；如果发出声音是危险的，那就保持沉默；如果自觉无力发光，那就蜷伏于墙角。但是，不要习惯了黑暗就为黑暗辩护，也不要为自己的苟且而得意，不要嘲讽那些比自己更勇敢的人。我们可以卑微如尘土，但不可扭曲如蛆虫</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>20220605</title>
    <url>/post/c1c2f028.html</url>
    <content><![CDATA[<p>尝试着去分享更多的东西</p>
<p>起码留下点什么</p>
<p>加油</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>20220622 JS中数据结构的一些想法</title>
    <url>/post/6570235f.html</url>
    <content><![CDATA[<h1 id="JS-中的数据结构"><a href="#JS-中的数据结构" class="headerlink" title="JS 中的数据结构"></a>JS 中的数据结构</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>原型方法较多，可以比较方便的实现各种功能</li>
<li>JSON 支持</li>
<li>相比 java，数组的长度不是固定的，不存在越界问题</li>
<li>兼容性好</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>没有获取到索引的情况下，查询效率相对低，时间复杂度为 O(n)</li>
<li>插入数据效率低O(n)</li>
<li>删除数据效率O(n)</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>绝大部分数据处理</li>
<li>JSON 支持，可以直接在接口中返回</li>
<li>前端列表渲染</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li>兼容性好</li>
<li>查询效率高，时间复杂度为 O(1)</li>
<li>JSON 支持</li>
<li>相对 Map 可以继承原型链上的属性</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>相对 MAP 键值只能是 string</li>
<li>相对 MAP 顺序不确定</li>
<li>相对 MAP 没有迭代属性</li>
</ul>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>通用场景</li>
<li>需要一个固定 key 来做区分数据内容</li>
</ul>
<h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul>
<li>查询效率高，时间复杂度为 O(1)</li>
<li>相对对象这种结构，数据更清晰，效率更高</li>
<li>相对 OBJECT，语义化更好，支持功能多</li>
</ul>
<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>原型方法没有数组多</li>
<li>JSON 不支持，如果作为接口数据返回，需要重新转换为数组或对象</li>
</ul>
<h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>需要一个固定格式的 key value</li>
</ul>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ul>
<li>插入性能比数组高 O(1)</li>
<li>删除性能比数组高 O(1)</li>
</ul>
<h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>索引效率低 O(n)</li>
<li>原生不支持，需要自己实现链表结构</li>
</ul>
<h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>动态插入与删除比较多的场景</li>
</ul>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>先进后出</li>
<li>JS 执行顺序</li>
</ul>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>先进先出</li>
<li>排队场景</li>
<li>性能瓶颈的时候，使用队列，排队处理数据</li>
</ul>
<h2 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h2><h3 id="应用场景-6"><a href="#应用场景-6" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>打标签的场景</li>
</ul>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="应用场景-7"><a href="#应用场景-7" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>DOM 树、CSS 树</li>
<li>多层JSON</li>
<li>级联菜单</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>20220627</title>
    <url>/post/1dfaf386.html</url>
    <content><![CDATA[<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串  “”。</p>
<p>示例 1：</p>
<blockquote>
<p>输入：strs = [“flower”,”flow”,”flight”]</p>
<p>输出：”fl”</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：strs = [“dog”,”racecar”,”car”]</p>
<p>输出：””</p>
<p>解释：输入不存在公共前缀。</p>
</blockquote>
<p>提示：</p>
<ul>
<li>1 &lt;= strs.length &lt;= 200</li>
<li>0 &lt;= strs[i].length &lt;= 200</li>
<li>strs[i] 仅由小写英文字母组成</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">longest_common_prefix</span></span>(strs: <span class="built_in">Vec</span>&lt;<span class="built_in">String</span>&gt;) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> result = <span class="built_in">String</span>::from(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="symbol">'looper</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut</span> _temp = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> &amp;strs &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">str</span>.len() == <span class="number">0</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span> <span class="symbol">'looper</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> index &gt;= <span class="built_in">str</span>.len() &#123;</span><br><span class="line">                        <span class="keyword">break</span> <span class="symbol">'looper</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">let</span> c_val = &amp;<span class="built_in">str</span>[index..index + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> c_val == <span class="string">""</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span> <span class="symbol">'looper</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> _temp == <span class="string">""</span> &#123;</span><br><span class="line">                        _temp = c_val;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> _temp != c_val &#123;</span><br><span class="line">                        <span class="keyword">break</span> <span class="symbol">'looper</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    _temp = c_val;</span><br><span class="line">                &#125;</span><br><span class="line">                result.push_str(&amp;strs.get(<span class="number">0</span>).unwrap()[index..index + <span class="number">1</span>]);</span><br><span class="line">                index += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul>
<li>找出所有字符串的第{index}个元素，判断是否全部相等。</li>
<li>如果相等放入结果中，继续循环</li>
<li>不相等跳出外层循环，返回结果</li>
<li>0ms，2.1mb</li>
</ul>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnmav1/" target="_blank" rel="noopener">https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnmav1/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>20220629</title>
    <url>/post/fa42de81.html</url>
    <content><![CDATA[<h1 id="位-1-的个数"><a href="#位-1-的个数" class="headerlink" title="位 1 的个数"></a>位 1 的个数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>
<li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的   示例 3  中，输入表示有符号整数 -3。</li>
</ul>
<h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><blockquote>
<p>输入：00000000000000000000000000001011</p>
<p>输出：3</p>
<p>解释：输入的二进制串 00000000000000000000000000001011  中，共有三位为 ‘1’。</p>
</blockquote>
<h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><blockquote>
<p>输入：00000000000000000000000010000000</p>
<p>输出：1</p>
<p>解释：输入的二进制串 00000000000000000000000010000000  中，共有一位为 ‘1’。</p>
</blockquote>
<h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><blockquote>
<p>输入：11111111111111111111111111111101</p>
<p>输出：31</p>
<p>解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 ‘1’。</p>
</blockquote>
<h3 id="提示：-1"><a href="#提示：-1" class="headerlink" title="提示："></a>提示：</h3><p>输入必须是长度为 32 的 二进制串 。</p>
<h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><p>如果多次调用这个函数，你将如何优化你的算法？</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自己写的 0ms 2mb</span></span><br><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">hammingWeight</span> </span>(n: <span class="built_in">u32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> i &lt;= n &amp;&amp; i != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> n &amp; i != <span class="number">0</span> &#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = i &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造32位蒙版（只有一个1），进行与操作</span></span><br><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">hammingWeight</span> </span>(n: <span class="built_in">u32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> (<span class="keyword">mut</span> ret, <span class="keyword">mut</span> mask) = (<span class="number">0</span>, <span class="number">1u32</span>);</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">32</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> n &amp; mask != <span class="number">0</span> &#123; ret += <span class="number">1</span>; &#125;</span><br><span class="line">            mask = mask &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ret</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// count_one 方法 可以直接获取数量</span></span><br><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">hammingWeight</span> </span>(n: <span class="built_in">u32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        n.count_ones() <span class="keyword">as</span> <span class="built_in">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>位的与方法判断是否是 1，是的话，数量加 1</li>
<li>位移的方式变更 1 的位置</li>
<li>位移可能会越界，超出最大值的时候位移数据就是 0，需要注意一下</li>
<li>别人的操作是真的牛皮</li>
</ul>
<h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xn1m0i/" target="_blank" rel="noopener">https://leetcode.cn/leetbook/read/top-interview-questions-easy/xn1m0i/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>20220722</title>
    <url>/post/6c526d3e.html</url>
    <content><![CDATA[<h1 id="JS-中的设计模式"><a href="#JS-中的设计模式" class="headerlink" title="JS 中的设计模式"></a>JS 中的设计模式</h1><p>解决一些特定问题的方法，并总结起来，给一个名字。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在面向对象软件设计过程中针对特定的问题简洁而优雅的解决方案。</p>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>找出程序中变化的地方，并将变化封装起来</p>
<h2 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h2><p>如果它走起路来像鸭子，叫起来也是鸭子，那么它就是鸭子。</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。换句话说，给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> makeSound = <span class="function"><span class="keyword">function</span> (<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Duck) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"嘎嘎嘎"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Chicken) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"咯咯咯"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (animal instansof Dog)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"汪汪汪"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">makeSound(<span class="keyword">new</span> Duck()); <span class="comment">// 嘎嘎嘎</span></span><br><span class="line">makeSound(<span class="keyword">new</span> Chicken()); <span class="comment">// 咯咯咯</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> makeSound = <span class="function"><span class="keyword">function</span> (<span class="params">animal: Animal</span>) </span>&#123;</span><br><span class="line">  animal.sound();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  sound() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"不存在sound"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Duck <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  sound() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"嘎嘎嘎"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Chicken <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  sound() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"嘎嘎嘎"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  sound()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"汪汪汪"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeSound(<span class="keyword">new</span> Duck()); <span class="comment">// 嘎嘎嘎</span></span><br><span class="line">makeSound(<span class="keyword">new</span> Chicken()); <span class="comment">// 咯咯咯</span></span><br><span class="line">makeSound(<span class="keyword">new</span> Dog()); <span class="comment">// 咯咯咯</span></span><br><span class="line"><span class="comment">// 更多...</span></span><br><span class="line"><span class="comment">// class Chicken extends Animal &#123;</span></span><br><span class="line"><span class="comment">//   sound() &#123;</span></span><br><span class="line"><span class="comment">// console.log("嘎嘎嘎");</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>


<p>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>考虑你的设计中哪些地方可能变化，这种方式与关注会导致重新设计的原因相反。它不是考虑什么时候会迫使你的设计改变，而是考虑你怎样才能够在不重新设计的情况下进行改变。这里的关键在于封装发生变化的概念，这是许多设计模式的主题</p>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>基于原型链</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul>
<li>需要频繁实例化然后销毁的对象</li>
<li>创建对象时耗时过多或者耗资源过多，但又经常用到的对象</li>
<li>有状态的工具类对象</li>
<li>繁访问数据库或文件的对象</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>window 对象</li>
<li>日志文件</li>
<li>应用配置</li>
<li>线程池</li>
</ul>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>代理模式是为一个对象提供一个代替品或占位符，以便控制对他的访问</p>
<h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><ul>
<li>明星的经纪人</li>
<li>生产数据库访问</li>
<li>翻墙</li>
</ul>
<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>顺序访问一个聚合对象的元素，而不需要暴露对象的内部表示。</p>
<p>基本不需要自己实现，大部分语言内置了迭代器</p>
<h3 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h3><ul>
<li>Array.prototype.forEach</li>
</ul>
<h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>对象间的一对多的依赖关系，当一个对象的状态发生改变时，所以依赖于他的对象都能接受到通知</p>
<h3 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h3><ul>
<li>JS 事件模型</li>
</ul>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>命令是对命令的封装，每一个命令都是一个操作，请求方发出请求，接收方接收请求，并执行操作。命令模式解耦了请求方和接收方，命令模式属于行为型模式</p>
<h3 id="场景-4"><a href="#场景-4" class="headerlink" title="场景"></a>场景</h3><ul>
<li>处理一些功能，但是不知道请求的接收者是谁，操作是什么，希望以一种松耦合的方式来设计程序。</li>
<li>JS 高阶函数</li>
</ul>
<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结</p>
<h3 id="场景-5"><a href="#场景-5" class="headerlink" title="场景"></a>场景</h3><ul>
<li>树形菜单</li>
<li>文件</li>
<li>文件夹的管理</li>
</ul>
<h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p>
<h3 id="场景-6"><a href="#场景-6" class="headerlink" title="场景"></a>场景</h3><ul>
<li>造房子</li>
<li>泡茶还是泡咖啡</li>
</ul>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p>
<p>计算绩效</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> calculateBonus = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  performanceLevel: "S" | "A" | "B",</span></span></span><br><span class="line"><span class="function"><span class="params">  salary: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">"S"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">"A"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">"B"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">calculateBonus(<span class="string">"B"</span>, <span class="number">20000</span>); <span class="comment">// 输出：40000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ts实现</span></span><br><span class="line"><span class="keyword">const</span> bounsMap = <span class="keyword">new</span> Map([</span><br><span class="line">  [<span class="string">"S"</span>, <span class="function">(<span class="params">salary: <span class="built_in">number</span></span>) =&gt;</span> salary * <span class="number">4</span>],</span><br><span class="line">  [<span class="string">"A"</span>, <span class="function">(<span class="params">salary: <span class="built_in">number</span></span>) =&gt;</span> salary * <span class="number">3</span>],</span><br><span class="line">  [<span class="string">"B"</span>, <span class="function">(<span class="params">salary: <span class="built_in">number</span></span>) =&gt;</span> salary * <span class="number">2</span>],</span><br><span class="line">]);</span><br><span class="line">bounsMap.get(<span class="string">"S"</span>)?.(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整实现</span></span><br><span class="line"><span class="keyword">enum</span> strategyEnum &#123;</span><br><span class="line">  S = <span class="string">"S"</span>,</span><br><span class="line">  A = <span class="string">"A"</span>,</span><br><span class="line">  B = <span class="string">"B"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bounsMap = <span class="keyword">new</span> Map&lt;strategyEnum, &#123; times: <span class="built_in">number</span> &#125;&gt;([</span><br><span class="line">  [strategyEnum.S, &#123; times: <span class="number">4</span> &#125;],</span><br><span class="line">  [strategyEnum.B, &#123; times: <span class="number">3</span> &#125;],</span><br><span class="line">  [strategyEnum.B, &#123; times: <span class="number">2</span> &#125;],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getBouns = <span class="function">(<span class="params">strategy: strategyEnum, salary: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> bouns = bounsMap.get(strategy);</span><br><span class="line">  <span class="keyword">if</span> (!bouns) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bouns.times * salary;</span><br><span class="line">&#125;;</span><br><span class="line">getBouns(strategyEnum.S, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20220919服务进程停止原因</title>
    <url>/post/4c254c82.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>原来服务是稳定运行的，加了一个子进程功能后，服务器经常无法访问。</p>
<h3 id="具体情况"><a href="#具体情况" class="headerlink" title="具体情况"></a>具体情况</h3><ul>
<li>除代码直接返回数据的接口，其他涉及到数据库 IO 的接口都无法访问</li>
<li>内存占用正常</li>
<li>CPU 占用正常(待定)</li>
<li>抽风时间不固定</li>
<li>同一套数据库，其他接口服务正常</li>
<li></li>
</ul>
<h2 id="可能性猜测"><a href="#可能性猜测" class="headerlink" title="可能性猜测"></a>可能性猜测</h2><ul>
<li>数据库连接池有问题</li>
<li>子进程调用方式有问题</li>
<li>定时任务有问题</li>
</ul>
<h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><h3 id="排查日志记录，确定抽风是不是有固定的模式，业务。"><a href="#排查日志记录，确定抽风是不是有固定的模式，业务。" class="headerlink" title="排查日志记录，确定抽风是不是有固定的模式，业务。"></a>排查日志记录，确定抽风是不是有固定的模式，业务。</h3><ul>
<li>最近一次 2022-09-19 07:00:00.0<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">85 [info] 2022-09-19 02:14:02.6 [ApiInterceptor] 126ms 61.165.44.200: 1184582: GET: &#x2F;api&#x2F;video: &#123;&quot;current&quot;:&quot;1&quot;,&quot;pageSize&quot;:&quot;20&quot;,&quot;orderBy&quot;:&quot;id&quot;,&quot;order&quot;:&quot;DESC&quot;,&quot;isProfessional&quot;:&quot;true&quot;,&quot;isFake&quot;:&quot;false&quot;&#125;: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (K    HTML, like Gecko) Chrome&#x2F;104.0.0.0 Safari&#x2F;537.36</span><br><span class="line">86 [info] 2022-09-19 07:00:00.0 [DayReportCron] 数据日报开始发送，是否是生产环境：true</span><br><span class="line">87 [info] 2022-09-19 07:47:13.10 [ApiInterceptor] 30ms 180.162.130.187: -: GET: &#x2F;api&#x2F;sms: &#123;&#125;: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.0.0 Safari&#x2F;537.36</span><br><span class="line">88 [info] 2022-09-19 07:47:19.3 [ApiInterceptor] 24ms 180.162.130.187: -: GET: &#x2F;api&#x2F;sms: &#123;&#125;: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.0.0 Safari&#x2F;537.36</span><br><span class="line">89 [info] 2022-09-19 07:47:25.6 [ApiInterceptor] 22ms 180.162.130.187: -: GET: &#x2F;api&#x2F;sms: &#123;&#125;: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.0.0 Safari&#x2F;537.36</span><br><span class="line">90 [info] 2022-09-19 09:47:21.8 [NestFactory] Starting Nest application...</span><br></pre></td></tr></table></figure></li>
<li>倒第二次 2022-09-18 04:00:00.0<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">328 [info] 2022-09-18 03:30:02.0 [KeywordMonitorCommunityCron] 收到close事件，子进程收到信号 256120</span><br><span class="line">329 [info] 2022-09-18 04:00:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">330 [info] 2022-09-18 04:30:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">331 [info] 2022-09-18 05:00:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">332 [info] 2022-09-18 05:30:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">333 [info] 2022-09-18 06:00:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">334 [info] 2022-09-18 06:30:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">335 [info] 2022-09-18 07:00:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">336 [info] 2022-09-18 07:00:00.0 [DayReportCron] 数据日报开始发送，是否是生产环境：true</span><br><span class="line">337 [info] 2022-09-18 07:30:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">338 [info] 2022-09-18 08:00:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">339 [info] 2022-09-18 08:30:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">340 [info] 2022-09-18 09:00:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">341 [info] 2022-09-18 09:30:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">342 [info] 2022-09-18 10:00:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">343 [warn] 2022-09-18 10:04:53.5 [exceptionLogger] ::ffff:127.0.0.1: -: GET: &#x2F;: &#123;&#125; A0002: 用户未登录</span><br><span class="line">344 [warn] 2022-09-18 10:05:36.3 [exceptionLogger] ::ffff:127.0.0.1: -: GET: &#x2F;: &#123;&#125; A0002: 用户未登录</span><br><span class="line">345 [info] 2022-09-18 10:05:43.10 [ApiInterceptor] 27ms 117.143.104.164: -: GET: &#x2F;api&#x2F;sms: &#123;&#125;: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.0.0 Safari&#x2F;537.36</span><br><span class="line">346 [info] 2022-09-18 10:07:57.10 [ApiInterceptor] 30ms 117.143.104.164: -: GET: &#x2F;api&#x2F;sms: &#123;&#125;: Mozilla&#x2F;5.0 (Linux; Android 6.0; Nexus 5 Build&#x2F;MRA58N) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.0.0 Mobile Safari&#x2F;537.36</span><br><span class="line">347 [info] 2022-09-18 10:10:14.10 [ApiInterceptor] 31ms 117.143.104.164: -: GET: &#x2F;api&#x2F;sms: &#123;&#125;: Mozilla&#x2F;5.0 (Linux; Android 6.0; Nexus 5 Build&#x2F;MRA58N) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.0.0 Mobile Safari&#x2F;537.36</span><br><span class="line">348 [info] 2022-09-18 10:11:53.2 [ApiInterceptor] 0ms 117.143.104.164: -: GET: &#x2F;api: &#123;&#125;: apifox&#x2F;1.0.0 (https:&#x2F;&#x2F;www.apifox.cn)</span><br><span class="line">349 [warn] 2022-09-18 10:12:28.2 [exceptionLogger] ::1: 1288925: PATCH: &#x2F;api&#x2F;configuration&#x2F;fake-user: &#123;&#125; A0001: 请求参数错误：fakeUsers must be an array</span><br><span class="line">350 [info] 2022-09-18 10:14:21.3 [ApiInterceptor] 0ms 117.143.104.164: -: GET: &#x2F;api: &#123;&#125;: apifox&#x2F;1.0.0 (https:&#x2F;&#x2F;www.apifox.cn)</span><br><span class="line">351 [info] 2022-09-18 10:14:22.7 [ApiInterceptor] 0ms 117.143.104.164: -: GET: &#x2F;api: &#123;&#125;: apifox&#x2F;1.0.0 (https:&#x2F;&#x2F;www.apifox.cn)</span><br><span class="line">352 [info] 2022-09-18 10:14:23.6 [ApiInterceptor] 0ms 117.143.104.164: -: GET: &#x2F;api: &#123;&#125;: apifox&#x2F;1.0.0 (https:&#x2F;&#x2F;www.apifox.cn)</span><br><span class="line">353 [info] 2022-09-18 10:14:24.4 [ApiInterceptor] 1ms 117.143.104.164: -: GET: &#x2F;api: &#123;&#125;: apifox&#x2F;1.0.0 (https:&#x2F;&#x2F;www.apifox.cn)</span><br><span class="line">354 [info] 2022-09-18 10:16:33.2 [ApiInterceptor] 26ms 117.143.104.164: -: GET: &#x2F;api&#x2F;sms: &#123;&#125;: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;104.0.0.0 Safari&#x2F;537.36</span><br><span class="line">355 [info] 2022-09-18 10:30:00.0 [KeywordMonitorCommunityCron] 社群关键字开始运行</span><br><span class="line">356 [info] 2022-09-18 10:37:32.3 [NestFactory] Starting Nest application...</span><br></pre></td></tr></table></figure></li>
<li>倒第三次 2022-09-17 03:30:02.1<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">94 [info] 2022-09-17 03:30:02.1 [KeywordMonitorCommunityCron] 收到close事件，子进程收到信号 145279</span><br><span class="line">95 [info] 2022-09-17 03:35:45.7 [ApiInterceptor] 160ms 61.173.30.240: 1221394: GET: &#x2F;api&#x2F;oss&#x2F;sts: &#123;&#125;: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;105.0.0.0 Safari&#x2F;537.36</span><br><span class="line">96 [info] 2022-09-17 03:45:34.8 [ApiInterceptor] 141ms 61.173.30.240: 1221394: GET: &#x2F;api&#x2F;oss&#x2F;sts: &#123;&#125;: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;105.0.0.0 Safari&#x2F;537.36</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="日志没有特征，确认是否是定时任务-bug"><a href="#日志没有特征，确认是否是定时任务-bug" class="headerlink" title="日志没有特征，确认是否是定时任务 bug"></a>日志没有特征，确认是否是定时任务 bug</h3><p>没有发现问题</p>
<h3 id="暂时定为是数据库连接池问题"><a href="#暂时定为是数据库连接池问题" class="headerlink" title="暂时定为是数据库连接池问题"></a>暂时定为是数据库连接池问题</h3><p>确认连接池问题</p>
<h3 id="确认是否是连接池问题"><a href="#确认是否是连接池问题" class="headerlink" title="确认是否是连接池问题"></a>确认是否是连接池问题</h3><p>有一段代码循环使用 sql，导致连接池被用尽。</p>
<h3 id="尝试复现-BUG"><a href="#尝试复现-BUG" class="headerlink" title="尝试复现 BUG"></a>尝试复现 BUG</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> PromiseTools.queue(list, <span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="keyword">await</span> <span class="keyword">this</span>.labelCategoryDao.findV2LabelCount(item?.id);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...item,</span><br><span class="line">    count,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果 list 过多，会导致连接池全部使用完，无法释放。<br>PromiseTools.queue 代码逻辑有问题</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">async</span> queue&lt;T, K&gt;<span class="function">(<span class="params">dataList: T[], callBack: (<span class="params">item: T, index: <span class="built_in">number</span></span>) =&gt; <span class="built_in">Promise</span>&lt;K&gt; | K, spliceLength = 5</span>): <span class="params">Promise</span>&lt;<span class="params">K</span>[]&gt; &#123;</span></span><br><span class="line"><span class="function">  <span class="params">if</span> (<span class="params">!dataList?.length</span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">return</span> [];</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">promiseList</span>: <span class="params">Array</span>&lt;<span class="params">Promise</span>&lt;<span class="params">K</span>&gt; | <span class="params">K</span>&gt; = [];</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">list</span>: <span class="params">K</span>[] = [];</span></span><br><span class="line"><span class="function">  <span class="params">for</span> (<span class="params"><span class="keyword">let</span> i = 0; i &lt; dataList.length; i++</span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">promiseList</span>.<span class="params">push</span>(<span class="params">callBack(<span class="params">dataList[i], i</span>)</span>);</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">while</span> (<span class="params">promiseList.length</span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">list</span>.<span class="params">push</span>(<span class="params">...(<span class="params"><span class="keyword">await</span> <span class="built_in">Promise</span>.all(<span class="params">promiseList.splice(<span class="params">0, spliceLength</span>)</span>)</span>)</span>);</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">return</span> <span class="params">list</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>尝试优化代码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">async</span> queue&lt;T, K&gt;<span class="function">(<span class="params">dataList: T[], callBack: (<span class="params">item: T, index: <span class="built_in">number</span></span>) =&gt; <span class="built_in">Promise</span>&lt;K&gt; | K, spliceLength = 5</span>): <span class="params">Promise</span>&lt;<span class="params">K</span>[]&gt; &#123;</span></span><br><span class="line"><span class="function">  <span class="params">if</span> (<span class="params">!dataList?.length</span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">return</span> [];</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">list</span>: <span class="params">K</span>[] = [];</span></span><br><span class="line"><span class="function">  <span class="params">for</span> (<span class="params"><span class="keyword">let</span> i = 0; i &lt; dataList.length; i += spliceLength</span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">step</span> = <span class="params">i</span> + <span class="params">spliceLength</span> &lt; <span class="params">dataList</span>.<span class="params">length</span> ? <span class="params">spliceLength</span> : <span class="params">dataList</span>.<span class="params">length</span> - <span class="params">i</span>;</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">promiseList</span> = <span class="params">new</span> <span class="params">Array</span>(<span class="params">step</span>).<span class="params">fill</span>(<span class="params">0</span>).<span class="params">map</span>(<span class="params">(<span class="params">_, index</span>) =&gt; callBack(<span class="params">dataList[i + index], i + index</span>)</span>);</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">result</span> = <span class="params">await</span> <span class="params">Promise</span>.<span class="params">all</span>(<span class="params">promiseList</span>);</span></span><br><span class="line"><span class="function">    <span class="params">list</span>.<span class="params">push</span>(<span class="params">...result</span>);</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">return</span> <span class="params">list</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20220925-router</title>
    <url>/post/ac0ffb95.html</url>
    <content><![CDATA[<h2 id="路由器梅林clash下载地址"><a href="#路由器梅林clash下载地址" class="headerlink" title="路由器梅林clash下载地址"></a>路由器梅林clash下载地址</h2><p><a href="https://github.com/zusterben/plan_c" target="_blank" rel="noopener">https://github.com/zusterben/plan_c</a></p>
<h2 id="路由器关闭关键字检测"><a href="#路由器关闭关键字检测" class="headerlink" title="路由器关闭关键字检测"></a>路由器关闭关键字检测</h2><p>sed -i ‘s/\tdetect_package/\t# detect_package/g’ /jffs/softcenter/scripts/ks_tar_install.sh</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20221015</title>
    <url>/post/64e8dabe.html</url>
    <content><![CDATA[<p>不知道应该写点什么。</p>
<p>想到哪 写到哪吧。</p>
<p>都会有一段令人铭记在心的记忆，随着时间的流逝，逐渐变淡</p>
<p>已经感觉到了</p>
<p>最开始</p>
<p>后来</p>
<p>现在</p>
<p>嗯，这种情况也许不会持续很久。</p>
<p>也许到了说再见的时候</p>
<p>不知道是不是最坏的结果</p>
<p>但应该不是最好的</p>
<p>但</p>
<p>总是有些东西，在夜深人静的时候会想起来</p>
<p>想起来 就一阵难过</p>
<p>为什么当时热恋的两个人</p>
<p>到现在</p>
<p>em，可能分离两地的结果就是这样子吧</p>
<p>自己也没想着尝试改变什么</p>
<p>按班就不</p>
<p>一步步走到那个阶段</p>
<p>是你自己选择的</p>
<p>不应该埋怨什么</p>
<p>你当时做这件事情的时候 已经预见到了结果</p>
<p>这不是如你所愿</p>
<p>感性吗</p>
<p>不应该</p>
<p>应该是活该</p>
<p>晚上总是瞎J8想</p>
<p>就这吧</p>
<p>还有吗</p>
<p>木有了，就这。</p>
<p>希望她有更好的生活</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>20221104-积分设计</title>
    <url>/post/8696aaa8.html</url>
    <content><![CDATA[<h1 id="积分表结构设计"><a href="#积分表结构设计" class="headerlink" title="积分表结构设计"></a>积分表结构设计</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>记录积分行为来源</li>
<li>允许撤销用户积分</li>
<li>个人中心有展示总积分</li>
<li>未来积分可以兑换商品</li>
<li>未来积分逐条过期机制</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="记录积分行为来源"><a href="#记录积分行为来源" class="headerlink" title="记录积分行为来源"></a>记录积分行为来源</h3><ul>
<li>需要增加行为枚举类，并且记录该行为对应的表主键，比如发帖需要对应发帖的内容 id</li>
<li>行为增加的分数，考虑到变动很少，可以放在代码中。如果后期确认该需求经常变动，需要建立对应的表结构，映射该枚举数据</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 积分枚举</span></span><br><span class="line"><span class="keyword">enum</span> ScoreSourceTypeEnum &#123;</span><br><span class="line">  LIKE = <span class="number">1</span>,</span><br><span class="line">  COMMENT = <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 积分对应分数</span></span><br><span class="line"><span class="keyword">const</span> ScoreSourceTypeMap = <span class="keyword">new</span> Map(&#123;</span><br><span class="line">  [ScoreSourceTypeEnum.LIKE]: &#123; score: <span class="number">5</span>, title: <span class="string">"点赞"</span> &#125;,</span><br><span class="line">  [ScoreSourceTypeEnum.COMMENT]: &#123; score: <span class="number">10</span>, title: <span class="string">"评论"</span> &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="允许撤销用户积分"><a href="#允许撤销用户积分" class="headerlink" title="允许撤销用户积分"></a>允许撤销用户积分</h3><ul>
<li>撤销用户积分不能修改原始数据，应增加一条新纪录记录该行为，积分记录表允许负值或新建一个表记录数据(先采用允许负值方案)</li>
<li>撤销用户积分需要增加操作人，撤销的原因两个字段</li>
<li>增加一个撤销用户积分的行为，行为对应的主键为对应的积分记录 ID</li>
</ul>
<h3 id="积分逐条过期机制"><a href="#积分逐条过期机制" class="headerlink" title="积分逐条过期机制"></a>积分逐条过期机制</h3><ul>
<li>积分记录表增加剩余积分字段，默认等于当前积分</li>
<li>用户消费积分时，判断剩余积分字段相加是否满足需求，如果满足，按时间倒序挨个去扣除剩余积分字段，直到扣除完毕</li>
<li>统计用户积分时，SUM（剩余积分）</li>
<li>每天跑一次定时任务，每次用户积分过期，剩余积分字段设置为 0</li>
</ul>
<h3 id="个人中心展示总积分"><a href="#个人中心展示总积分" class="headerlink" title="个人中心展示总积分"></a>个人中心展示总积分</h3><ul>
<li>每次查询用户的积分数据，都需要 sum 方法，如果数据量多，性能会比较差</li>
<li>是否需要直接统计用户的积分，每次插入或删除去修改该数据</li>
<li>如果需要用户总积分，应独立于用户模块，新建一张表，统计用户总积分，以及用户积分相关数据</li>
</ul>
<h3 id="未来积分可以兑换商品"><a href="#未来积分可以兑换商品" class="headerlink" title="未来积分可以兑换商品"></a>未来积分可以兑换商品</h3><ul>
<li>积分记录表增加商品兑换的行为，并记录订单 id</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>并发问题（如果用户同时访问数据，一边增加一边消费，是否需要在数据库加锁，或使用单个消息队列来实现）</li>
<li>积分异常（如果突然出现大批量积分发放，每天应有积分监控功能，每日发放积分、扣减积分，总积分数据）</li>
</ul>
<h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><h3 id="用户积分记录表"><a href="#用户积分记录表" class="headerlink" title="用户积分记录表"></a>用户积分记录表</h3><table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>primary key</td>
<td>主键</td>
</tr>
<tr>
<td>uid</td>
<td>bigint</td>
<td>用户 id</td>
</tr>
<tr>
<td>source_type</td>
<td>tinyint</td>
<td>积分来源类型</td>
</tr>
<tr>
<td>source_id</td>
<td>int</td>
<td>积分来源 id</td>
</tr>
<tr>
<td>socre</td>
<td>int</td>
<td>分值</td>
</tr>
<tr>
<td>rest_score</td>
<td>datetime</td>
<td>剩余积分</td>
</tr>
<tr>
<td>action_uid</td>
<td>bigint</td>
<td>操作人</td>
</tr>
<tr>
<td>reason</td>
<td>varchar</td>
<td>原因</td>
</tr>
<tr>
<td>exprie_time</td>
<td>datetime</td>
<td>过期时间</td>
</tr>
<tr>
<td>create_time</td>
<td>datetime</td>
<td>创建时间</td>
</tr>
<tr>
<td>update_time</td>
<td>datetime</td>
<td>更新时间</td>
</tr>
<tr>
<td>delete_time</td>
<td>datetime</td>
<td>删除时间</td>
</tr>
</tbody></table>
<h3 id="用户积分表-暂时不使用，数据库无法支撑再考虑"><a href="#用户积分表-暂时不使用，数据库无法支撑再考虑" class="headerlink" title="用户积分表(暂时不使用，数据库无法支撑再考虑)"></a>用户积分表(暂时不使用，数据库无法支撑再考虑)</h3><table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>primary key</td>
<td>主键</td>
</tr>
<tr>
<td>uid</td>
<td>bigint</td>
<td>用户 id</td>
</tr>
<tr>
<td>socre</td>
<td>int</td>
<td>分值</td>
</tr>
<tr>
<td>create_time</td>
<td>datetime</td>
<td>创建时间</td>
</tr>
<tr>
<td>update_time</td>
<td>datetime</td>
<td>更新时间</td>
</tr>
<tr>
<td>delete_time</td>
<td>datetime</td>
<td>删除时间</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>积分</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-02-17-xnbcaj</title>
    <url>/post/9f15917b.html</url>
    <content><![CDATA[<h1 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’  的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p>
<p>示例 1：</p>
<p>输入：s = “()”<br>输出：true<br>示例  2：</p>
<p>输入：s = “()[]{}”<br>输出：true<br>示例  3：</p>
<p>输入：s = “(]”<br>输出：false</p>
<p>提示：</p>
<p>1 &lt;= s.length &lt;= 104<br>s 仅由括号 ‘()[]{}’ 组成</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">is_valid</span></span>(s: <span class="built_in">String</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> stack: <span class="built_in">Vec</span>&lt;<span class="built_in">char</span>&gt; = <span class="built_in">Vec</span>::new();</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s.chars() &#123;</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">'&#123;'</span> &#123;</span><br><span class="line">                stack.push(<span class="string">'&#125;'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">'['</span> &#123;</span><br><span class="line">                stack.push(<span class="string">']'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> c == <span class="string">'('</span> &#123;</span><br><span class="line">                stack.push(<span class="string">')'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(i) = stack.pop() &#123;</span><br><span class="line">                    <span class="keyword">if</span> i == c &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.is_empty()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[allow(dead_code)]</span></span><br><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">is_valid</span></span>(s: <span class="built_in">String</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> res: <span class="built_in">Vec</span>&lt;<span class="built_in">char</span>&gt; = <span class="built_in">Vec</span>::with_capacity(s.len());</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> pre: <span class="built_in">Option</span>&lt;&amp;<span class="built_in">char</span>&gt;;</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s.chars() &#123;</span><br><span class="line">            pre = res.last();</span><br><span class="line">            <span class="keyword">match</span> (pre, c) &#123;</span><br><span class="line">                (<span class="literal">Some</span>(<span class="string">'&#123;'</span>), <span class="string">'&#125;'</span>) | (<span class="literal">Some</span>(<span class="string">'['</span>), <span class="string">']'</span>) | (<span class="literal">Some</span>(<span class="string">'('</span>), <span class="string">')'</span>) =&gt; &#123;</span><br><span class="line">                    res.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                _ =&gt; res.push(c),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.is_empty()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>原本也没啥思路，就想着怎么处理字符串</p>
<p>然后发现解答里面有关于栈的问题，看了别人的解体思路后，比较明朗</p>
<p>匹配到左括号，向栈推入右括号</p>
<p>如果匹配到右括号，就把栈顶的括号推出，判断是不是为当前的右括号，如果是，代表括号闭合，如果不是，直接失败</p>
<p>匹配到右括号空栈也直接失败</p>
<p>最后判断栈的长度是不是为 0，如果为 0，代表完全匹配</p>
<p>emm</p>
<p>示例的代码写的比较精简，感觉可以复现一次</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnbcaj/" target="_blank" rel="noopener">https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnbcaj/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>20230220-缺失数字</title>
    <url>/post/19a67249.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包含 [0, n]  中  n  个数的数组 nums ，找出 [0, n] 这个范围内没有出现在数组中的那个数。</p>
<p>示例 1：</p>
<p>输入：nums = [3,0,1]<br>输出：2<br>解释：n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。<br>示例 2：</p>
<p>输入：nums = [0,1]<br>输出：2<br>解释：n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。<br>示例 3：</p>
<p>输入：nums = [9,6,4,2,3,5,7,0,1]<br>输出：8<br>解释：n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。<br>示例 4：</p>
<p>输入：nums = [0]<br>输出：1<br>解释：n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。</p>
<p>提示：</p>
<p>n == nums.length<br>1 &lt;= n &lt;= 104<br>0 &lt;= nums[i] &lt;= n<br>nums 中的所有数字都 独一无二</p>
<p>进阶：你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看到题目的时候靠直觉去写，就是循环 0-n，然后判断 n 在不在，不在就抛出，循环完后，还没找到，返回数组的长度</p>
<p>时间复杂度 n^2</p>
<p>发现可以用等差数列去做，计算等差数列的和，然后去掉数组内的数，最终的结果为缺失的数</p>
<p>还一个是用异或的方案</p>
<p>数组的数与0-n的数，全部进行异或，最终的数据为缺失的数</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="自己实现的"><a href="#自己实现的" class="headerlink" title="自己实现的"></a>自己实现的</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">missing_number</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..nums.len() <span class="keyword">as</span> <span class="built_in">i32</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums.contains(&amp;i) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums.len() <span class="keyword">as</span> <span class="built_in">i32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="看到别人题解后优化"><a href="#看到别人题解后优化" class="headerlink" title="看到别人题解后优化"></a>看到别人题解后优化</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">missing_number</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> num_size: <span class="built_in">i32</span> = nums.len().try_into().unwrap();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> total = (<span class="number">1</span> + num_size) * num_size / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums.iter() &#123;</span><br><span class="line">            total -= i;</span><br><span class="line">        &#125;</span><br><span class="line">        total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnj4mt/" target="_blank" rel="noopener">https://leetcode.cn/leetbook/read/top-interview-questions-easy/xnj4mt/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20230224-二分查找</title>
    <url>/post/a5ba83c4.html</url>
    <content><![CDATA[<p>##</p>
<p>给定一个  n  个元素有序的（升序）整型数组  nums 和一个目标值  target  ，写一个函数搜索  nums  中的 target，如果目标值存在返回下标，否则返回 -1。</p>
<p>示例 1:</p>
<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例  2:</p>
<p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p>
<p>提示：</p>
<p>你可以假设 nums  中的所有元素是不重复的。<br>n  将在  [1, 10000]之间。<br>nums  的每个元素都将在  [-9999, 9999]之间。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="笨比版本"><a href="#笨比版本" class="headerlink" title="笨比版本"></a>笨比版本</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">search</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, target: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> nums.len() == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> right = nums.len() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> mid = nums.len() / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">if</span> left == right &#123;</span><br><span class="line">                <span class="keyword">if</span> nums[left] == target &#123;</span><br><span class="line">                    <span class="keyword">return</span> left <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> c = *nums.get(mid).unwrap();</span><br><span class="line">            <span class="keyword">if</span> c == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> c &lt; target &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">                mid = (left + right) / <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">                mid = (left + right) / <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优化过后版本"><a href="#优化过后版本" class="headerlink" title="优化过后版本"></a>优化过后版本</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">search</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, target: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> left: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> right: <span class="built_in">usize</span> = nums.len() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最主要的困难点在于边界问题的处理</p>
<p>以前一直有这个问题，不过是用的弱类型的语言，所以一直没啥问题</p>
<p>这次用 rust 写，i32 跟 usize 一个有符号，一个无符号，导致在第一个版本的时候，写了很多冗余代码处理这个问题。</p>
<p>然后发现边界处理，可以在循环外层解决，左闭右开的方式</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>来源：力扣（LeetCode）</li>
<li>链接：<a href="https://leetcode.cn/problems/binary-search" target="_blank" rel="noopener">https://leetcode.cn/problems/binary-search</a></li>
<li>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20230227-第一个错误的版本</title>
    <url>/post/d1a37ab0.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p>
<p>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p>
<p>你可以通过调用  bool isBadVersion(version)  接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p>
<p>示例 1：</p>
<p>输入：n = 5, bad = 4<br>输出：4<br>解释：<br>调用 isBadVersion(3) -&gt; false<br>调用 isBadVersion(5) -&gt; true<br>调用 isBadVersion(4) -&gt; true<br>所以，4 是第一个错误的版本。<br>示例 2：</p>
<p>输入：n = 1, bad = 1<br>输出：1</p>
<p>提示：</p>
<p>1 &lt;= bad &lt;= n &lt;= 231 - 1</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="个人解法"><a href="#个人解法" class="headerlink" title="个人解法"></a>个人解法</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">first_bad_version</span></span>(&amp;<span class="keyword">self</span>, n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> right = n;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> first_false = n;</span><br><span class="line">        <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">let</span> is_bad = <span class="keyword">self</span>.isBadVersion(mid);</span><br><span class="line">            <span class="keyword">if</span> is_bad &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">                <span class="keyword">if</span> first_false &gt; mid &#123;</span><br><span class="line">                    first_false = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        first_false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例解法"><a href="#示例解法" class="headerlink" title="示例解法"></a>示例解法</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">first_bad_version</span></span>(&amp;<span class="keyword">self</span>, n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> right = n;</span><br><span class="line">        <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		    <span class="keyword">if</span> <span class="keyword">self</span>.isBadVersion(mid) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>写完后看示例解题，发下思路还不是很清晰</p>
<p>查找到的数据跟自己想的补太一样</p>
<p>还一个是处理越界的方案，最开始没有处理好。</p>
<p>然后除以二，可以用位移实现</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>来源：力扣（LeetCode）</li>
<li>链接：<a href="https://leetcode.cn/problems/first-bad-version" target="_blank" rel="noopener">https://leetcode.cn/problems/first-bad-version</a></li>
<li>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20230228-二分查找问题</title>
    <url>/post/88b8ca93.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20230309-有序数组的平方</title>
    <url>/post/9f3316ea.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>
<p>示例 1：</p>
<p>输入：nums = [-4,-1,0,3,10]<br>输出：[0,1,9,16,100]<br>解释：平方后，数组变为 [16,1,0,9,100]<br>排序后，数组变为 [0,1,9,16,100]<br>示例 2：</p>
<p>输入：nums = [-7,-3,2,3,11]<br>输出：[4,9,9,49,121]</p>
<p>提示：</p>
<p>1 &lt;= nums.length &lt;= 104<br>-104 &lt;= nums[i] &lt;= 104<br>nums 已按 非递减顺序 排序</p>
<p>进阶：</p>
<p>请你设计时间复杂度为 O(n) 的算法解决本问题</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="直觉解法（最快）"><a href="#直觉解法（最快）" class="headerlink" title="直觉解法（最快）"></a>直觉解法（最快）</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">sorted_squares</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> v = nums.iter().map(|x| x * x).collect::&lt;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;&gt;();</span><br><span class="line">        v.sort();</span><br><span class="line">        v</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双指针，插入（最慢）"><a href="#双指针，插入（最慢）" class="headerlink" title="双指针，插入（最慢）"></a>双指针，插入（最慢）</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">sorted_squares</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> right = nums.len() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> result = <span class="built_in">Vec</span>::new();</span><br><span class="line">        <span class="keyword">while</span> left &lt;= right &#123;</span><br><span class="line">            <span class="keyword">let</span> left_suqare = nums[left].abs().pow(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">let</span> right_suqare = nums[right].abs().pow(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> left_suqare &lt; right_suqare &#123;</span><br><span class="line">                result.insert(<span class="number">0</span>, right_suqare);</span><br><span class="line">                right = right - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.insert(<span class="number">0</span>, left_suqare);</span><br><span class="line">                left = left + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.reverse();</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双指针后插入后，翻转"><a href="#双指针后插入后，翻转" class="headerlink" title="双指针后插入后，翻转"></a>双指针后插入后，翻转</h3><pre><code class="Rust"><span class="keyword">impl</span> Solution {
    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">sorted_squares</span></span>(nums: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; {
        <span class="keyword">let</span> <span class="keyword">mut</span> left = <span class="number">0</span>;
        <span class="keyword">let</span> <span class="keyword">mut</span> right = nums.len() - <span class="number">1</span>;
        <span class="keyword">let</span> <span class="keyword">mut</span> result = <span class="built_in">Vec</span>::new();
        <span class="keyword">while</span> left &lt;= right {
            <span class="keyword">let</span> left_suqare = nums[left].abs().pow(<span class="number">2</span>);
            <span class="keyword">let</span> right_suqare = nums[right].abs().pow(<span class="number">2</span>);
            <span class="keyword">if</span> left_suqare &lt; right_suqare {
                result.insert(<span class="number">0</span>, right_suqare);
                right = right - <span class="number">1</span>;
            } <span class="keyword">else</span> {
                result.insert(<span class="number">0</span>, left_suqare);
                left = left + <span class="number">1</span>;
            }
        }
        result.reverse();
        result
    }
}</code></pre>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>来源：力扣（LeetCode）</li>
<li>链接：<a href="https://leetcode.cn/problems/squares-of-a-sorted-array" target="_blank" rel="noopener">https://leetcode.cn/problems/squares-of-a-sorted-array</a></li>
<li>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20230304-em</title>
    <url>/post/970e2d56.html</url>
    <content><![CDATA[<p>时至今日，你依然是我心中的光。</p>
<p>em，可惜了。</p>
<p>太难了啊。。</p>
<p>我已经好像 em 太少了会em</p>
<p>想的太多了</p>
<p>太计较得失</p>
<p>很难再去全力做那样一件事</p>
<p>em</p>
<p>时至今日啊</p>
<p>好像从来没有过</p>
<p>内心</p>
<p>自卑啊</p>
<p>em</p>
<p>确实挺卑微的</p>
<p>嗨</p>
<p>不知道脑子再想什么</p>
<p>突然就是觉得应该写点什么</p>
<p>老样子，想到哪写到哪</p>
<p>有时候会觉得有些孤单啊</p>
<p>想找个人陪着</p>
<p>但好像em</p>
<p>都木有什么好结果啊</p>
<p>是不是得忍受一些寂寞</p>
<p>稍微对你好一点 </p>
<p>内心就开始躁动</p>
<p>你应该知道，什么是正确的选择</p>
<p>em</p>
<p>确实需要</p>
<p>不应该</p>
<p>已经决定了</p>
<p>不</p>
<p>俺也不知道</p>
<p>迷茫的很啊</p>
<p>什么是对的</p>
<p>内心坚持的</p>
<p>对的吗</p>
<p>不知道</p>
<p>嗯，能让自己舒服点</p>
<p>克制</p>
<p>没有完全克制</p>
<p>还是有骚动</p>
<p>却不敢</p>
<p>君子论迹不论心？</p>
<p>不</p>
<p>只是我</p>
<p>直面自己的想法</p>
<p>她</p>
<p>冬天了吧</p>
<p>没有可能 再次</p>
<p>确实很好</p>
<p>我</p>
<p>有问题</p>
<p>犹豫不决</p>
<p>嗯</p>
<p>可能</p>
<p>不知道</p>
<p>就这样子吧</p>
<p>也挺好</p>
<p>理一下思路</p>
<p>初恋</p>
<p>我不成熟，她对我有好感，可能是刚好，我也是？嗯，应该是喜欢的，刚好，念念不忘那么多年，应该是第一份感情的原因吧，放下了。</p>
<p>高中的那个女孩子</p>
<p>笑起来特别好看，可惜。</p>
<p>大学的那个人</p>
<p>em</p>
<p>刚好吧，已经回忆不起来当时的感觉了，她很努力，也尽力了，她应该这么做，不值得。做的是对的，哪怕后来，不明白她的想法，愧疚。。还是其他？不明白。说我心太狠了，确实。我已经没有留恋的地方了。从什么时候开始？记不清楚了，不应该再次联系的，可能她也很辛苦吧，嗯，应该是很辛苦，不然不会这样子。嗯，我变了吗。不，可能一直是这样子，只是不再是她。确实有点人渣 ，不知道是不是对的。不，对的。不应该再继续了，保留那些美好的记忆吧。</p>
<p>大学</p>
<p>哈哈，一个。二。em，是的。单纯的二，了解不深，当时确实蛮喜欢？应该是了，不然不会那么在意，祝福她吧，写到这里的时候，竟然没想起来她，看来，不应该。。不应该，希望她也幸福，她值得。不怪什么，木有再来一次，况且真的再来一次，会是好的吗。</p>
<p>她，我比较变态？确实变态，男人啊，都是管不住下半身的动物，傻逼。如果真的有，你，em，可能还是，真特么是头牲口，直面内心，如果有机会你会继续吗？会，嗯，甚至每次都有一些期望。。。你果然是一头。。。对吗？不知道，大概率不对吧。。em算了，过去了。。决定一些事情，不摇再有期望，不要再当牲口了。</p>
<p>花？我也不知道，可能，只是单纯的寂寞了，刚好的出现了，em，太多次了，男人啊，克制住你的寂寞，确实有点狗，谁不是呢，应该也结婚了吧。开心的走下去吧</p>
<p>emmmm，下次不要当神经病了，傻逼，玩玩吗，她也是吧？em，两颗焦动的心啊，凑一起了，真的狗。。你也太狗了，太狗了</p>
<p>做了一个正确的决定，em</p>
<p>她，那么多的坏脾气，你，那么多的受气包。。。喜欢吗。喜欢啊，可爱的妹子。。她应该，em，刚好我出现了吧。后面，不知道。。也许有一些依赖吧，只是我当了牲口。对吗，对我来说对的。对她来说呢，对的。决定正确吗，正确。她好，我也好。她知道的，她做的决定，em，但是你知道，你的内心得不到安宁，这些有你的原因。曾经想过就她了，可。。 em她是，我也是，财迷。。。挺好的，应该是正确的决定吧。她值得更好的。哪天结束了，。。em，还是有些难过，回忆又涌了上来。。。你尽力了吗？没有。你对她好吗？自认没有亏欠。有愧疚吗？有一些。这个排比不通顺，你尽力了吗，应该放最后面。做到了一部分吧，果然我已经很难去全力em，是的。。。做了一半吧。100分打多少？不重要了，没有愧对她，某一些方面，你活该。活该，活该。。你做的那些事情，只有你自己知道，哪怕是她自己选的，哪怕是对的。这会是你心里的一根刺。。</p>
<p>小姑娘？只是你内心开始骚动了，是骚动了。是不对的，也没有可能的。为什么还这么做呢？快乐？是快乐吧。为什么？耐不住寂寞。结果是什么，木有结果。你应该怎么做，嗯，不越线，做该做的事情。。不要再有期望，哪怕你内心依然。好像哪里怪怪的。你依然管不住你骚动的内心啊。。牲口。。。就这样子吧。。不要越线，不主动，不负责，傻逼。。。哈哈哈哈，你配吗。 膨胀的一批。傻逼。傻逼。傻逼。知道应该做什么了吗。em，决定点什么？？yeah，不可能。只是因为开心。有个好心情。可以，很合理。</p>
<p>她，对的，牲口当一次就够了。。希望她能好起来。。。希望她以后不要在受苦了。。已经那么难了。。照顾好自己啊。。照顾好自己。。已经这么难了，不要再为难她了好不好。。。。 em，。你这个人啊。。。自我感动的样子真是太傻逼了。</p>
<p>我能做些什么吗。。</p>
<p>em 陪她聊聊天吧。可是她好像。。。我应该问问</p>
<p>大概就这样子了吧</p>
<p>可能还有一些骚动的经历，啊。。。。</p>
<p>高中时候的你，还真是。。。狗啊。。。</p>
<p>狗啊。。。</p>
<p>真的狗。。</p>
<p>难道那就是我喜欢的类型？emm，不不不。。。你什么都不知道。谈什么喜欢？你知道自己喜欢什么吗。没有。。。</p>
<p>甚至脑子里面连一幅画都没有，也许。。。她出现的那天？画里面的人就是她？？</p>
<p>可能吧。。。</p>
<p>梦里那个人的样子一直没有记忆，只是温馨。。</p>
<p>长大后再也没做过这种梦了吧。。</p>
<p>如果哪天，我能遇到，。 </p>
<p>不了。</p>
<p>不再有期望了</p>
<p>我不配</p>
<p>人心深处的黑暗，太可怕了。。。</p>
<p>估计我再也不能理直气壮的对未来的她讲起我的过往了</p>
<p>就这样子吧</p>
<p>我知道，也许不只是我。。。</p>
<p>嗨，不要去窥探。。。</p>
<p>希望明天是美好的一天，see you。</p>
<p>对了，</p>
<p>你要耐得住寂寞，骚动的心啊，是时候开始缓一缓了。。</p>
<p>不知道</p>
<p>也不要再期望了。</p>
<p>希望有一天啊</p>
<p>…………有一天啊。。。</p>
<p>对的，猜猜这时候你再想什么。</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>20230310-轮转数组</title>
    <url>/post/34fcf8bc.html</url>
    <content><![CDATA[<h1 id="轮转数组"><a href="#轮转数组" class="headerlink" title="轮转数组"></a>轮转数组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums，将数组中的元素向右轮转 k  个位置，其中  k  是非负数。</p>
<p>示例 1:</p>
<p>输入: nums = [1,2,3,4,5,6,7], k = 3<br>输出: [5,6,7,1,2,3,4]<br>解释:<br>向右轮转 1 步: [7,1,2,3,4,5,6]<br>向右轮转 2 步: [6,7,1,2,3,4,5]<br>向右轮转 3 步: [5,6,7,1,2,3,4]<br>示例  2:</p>
<p>输入：nums = [-1,-100,3,99], k = 2<br>输出：[3,99,-1,-100]<br>解释:<br>向右轮转 1 步: [99,-1,-100,3]<br>向右轮转 2 步: [3,99,-1,-100]</p>
<p>提示：</p>
<p>1 &lt;= nums.length &lt;= 105<br>-231 &lt;= nums[i] &lt;= 231 - 1<br>0 &lt;= k &lt;= 105</p>
<p>进阶：</p>
<p>尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。<br>你可以使用空间复杂度为  O(1) 的   原地   算法解决这个问题吗？</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="系统-api"><a href="#系统-api" class="headerlink" title="系统 api"></a>系统 api</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rust api</span></span><br><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">rotate</span></span>(nums: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, k: <span class="built_in">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> len = nums.len();</span><br><span class="line">        nums.rotate_right(k <span class="keyword">as</span> <span class="built_in">usize</span> % len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="直觉实现，效率低到难以接受"><a href="#直觉实现，效率低到难以接受" class="headerlink" title="直觉实现，效率低到难以接受"></a>直觉实现，效率低到难以接受</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">rotate</span></span>(nums: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, k: <span class="built_in">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> _i <span class="keyword">in</span> <span class="number">0</span>..(k <span class="keyword">as</span> <span class="built_in">usize</span> % nums.len()) &#123;</span><br><span class="line">            <span class="keyword">let</span> v = nums.pop().unwrap();</span><br><span class="line">            nums.insert(<span class="number">0</span>, v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="优化后，仍效率不太高"><a href="#优化后，仍效率不太高" class="headerlink" title="优化后，仍效率不太高"></a>优化后，仍效率不太高</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">rotate</span></span>(nums: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, k: <span class="built_in">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> rotate_len = k <span class="keyword">as</span> <span class="built_in">usize</span>;</span><br><span class="line">        <span class="keyword">if</span> nums.len() &lt; rotate_len &#123;</span><br><span class="line">            rotate_len = rotate_len % nums.len();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, rotate_len);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> v: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = nums.splice(<span class="number">0</span>..(nums.len() - rotate_len), <span class="built_in">vec!</span>[]).collect();</span><br><span class="line">        nums.append(&amp;<span class="keyword">mut</span> v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>来源：力扣（LeetCode）</li>
<li>链接：<a href="https://leetcode.cn/problems/rotate-array" target="_blank" rel="noopener">https://leetcode.cn/problems/rotate-array</a></li>
<li>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20230311</title>
    <url>/post/e41fee2b.html</url>
    <content><![CDATA[<p>做了一件不太聪明的事</p>
<p>当别人再向你陈述一件事的时候，你是这么认为的，她也是这么认为的，但是不能说出来，很奇怪</p>
<p>你知道，我知道，说出来，就不一样了。</p>
<p>又想起多年之前的一个事情，A、B是好朋友，有一天C说，你们俩关系并没有那么好</p>
<p>最后如C所说，确实慢慢就，em ，对。</p>
<p>不知道是C看出了什么，还是AB因为C的那句话，一些小的想法慢慢被放大了</p>
<p>em，有时候我在想，如果没有C的那句话，应该还是很好的朋友</p>
<p>是吧，有些话还是不能说的。</p>
<p>今天，我也犯了同样的错误</p>
<p>对，好像我的表达也有一些问题。</p>
<p>她说的是当下，我回答的是往后余生，往后余生这个词不太好，但是暂时没有想到其他的，先这样</p>
<p>朋友，都会离去的，大部分吧</p>
<p>em，应该这么说，如果没有人努力维持这种关系，应该都会离开的</p>
<p>我现在的想法是这样子</p>
<p>不知对错</p>
<p>看完活着以后，这种想法愈加强烈</p>
<p>嗨，认真思考一下，假如</p>
<p>朋友多年未联系，再次碰到会是什么感觉，应该还是能愉快的吹牛，回去以后，什么也没有改变。</p>
<p>他已经没有在你的生活里面，以后估计也不会有吧</p>
<p>好像是这样子</p>
<p>可能我本身就是一个心性薄凉的人</p>
<p>刚想到一句话，完整的记不清楚了，大概是倒向你的墙，离开你的人，手里的沙子</p>
<p>em</p>
<p>不知道别人是不是也会有这种想法</p>
<p>或者没有注意到</p>
<p>活在当下，开心就好，随遇而安</p>
<p>你自己最明白你在想什么</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>20230315-移动0</title>
    <url>/post/6ae72222.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20240113</title>
    <url>/post/bbb58779.html</url>
    <content><![CDATA[<p>一个情绪崩溃的晚上</p>
<p>茫然</p>
<p>有些彷徨</p>
<p>不知道该怎么办</p>
<p>忍不住哭啊。</p>
<p>哭啊</p>
<p>嗯，又没忍住。。</p>
<p>出去走走吧</p>
<p>所以生命啊，它苦涩如歌</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>20240129</title>
    <url>/post/704d3da4.html</url>
    <content><![CDATA[<p>这个周末去看望她了</p>
<p>我真特么是个five啊</p>
<p>为什么 连这点勇气都没有，你到底在顾虑什么？</p>
<p>顾虑当场翻脸吗？</p>
<p>为什么她都可以</p>
<p>也许她会很失望吧</p>
<p>既想又想的典范</p>
<p>希望 以后 我能清楚 我到底想要的是什么</p>
<p>而不是，我不想要的是什么</p>
<p>想的太多，做的太少。</p>
<p>瞻前顾后，左思右滤</p>
<p>十年前就知道的问题</p>
<p>依然还是这个吊样子</p>
<p>活该</p>
<p>希望都会有一个好的结果，不是我也行。</p>
<p>问心</p>
<p>你想吗？</p>
<p>确实很难回答，也许我心里已经有答案了，这才能解释为什么我的行为是这样子。</p>
<p>为什么这么做？</p>
<p>愧疚吗？不是，我觉得我应该这么做，我应该去看她，理所应当的事情。</p>
<p>为什么不敢承认？</p>
<p>担心会有不好的后果，害怕连说话的机会都没有。不想跟她父母有牵扯</p>
<p>再来一次 还会这么做吗？</p>
<p>以我现在心态，还会再来一次，我的目的是她，如果因为这件事，最重要的目的无法达成，那么就不应该这么做</p>
<p>太多茫然，太多思绪，太多顾虑。</p>
<p>辉哥说的对，思想太阴沉，无法开放自己的内心。。</p>
<p>为什么我会变成这个样子。 。</p>
<p>不，本性就是这个样子</p>
<p>贪婪、不自律、粗心、说大话、自私自立（不想承认，确实有），应该还有吧，暂时想不出来了？</p>
<p>em</p>
<p>如果还有机会的话，我还是想成为一个好人。</p>
]]></content>
  </entry>
  <entry>
    <title>20240224-truenas-安装日记</title>
    <url>/post/a80836a2.html</url>
    <content><![CDATA[<h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1><ul>
<li>进入truenas 下载 truenas scale ISO镜像</li>
<li>准备U盘</li>
<li>使用U盘刻录工具(UltraISO)将Truenas刻录到U盘上</li>
<li>进入BIOS设置U盘启动</li>
<li>安装系统</li>
</ul>
<h1 id="设置网络"><a href="#设置网络" class="headerlink" title="设置网络"></a>设置网络</h1><ul>
<li>设置服务器的IP地址，我自己本地为192.168.1.10/24</li>
<li>设置DNS服务器，设置网关</li>
<li>进入192.168.1.10</li>
</ul>
<h1 id="设置系统"><a href="#设置系统" class="headerlink" title="设置系统"></a>设置系统</h1><ul>
<li>系统设置-常规-设置时区与语音</li>
<li>系统设置-服务-SSH 开启</li>
<li>用户凭证-本地用户-用户名称(root/admin)-编辑-设置密码登录或者密钥登录</li>
</ul>
<h1 id="配置系统准备工作"><a href="#配置系统准备工作" class="headerlink" title="配置系统准备工作"></a>配置系统准备工作</h1><ul>
<li>ssh <a href="mailto:admin@192.168.1.10">admin@192.168.1.10</a> 就是刚才的用户@设置的IP地址</li>
<li>truenas 默认禁用了 apt ,使用<code>chmod +x /bin/apt*</code> <code>chmod +x /bin/dpkg</code> 开启</li>
<li>配置国内镜像源,<code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></li>
<li>替换下面的内容到 /etc/apt/sources.list<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bookworm main non-free non-free-firmware contrib</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bookworm main non-free non-free-firmware contrib</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian-security&#x2F; bookworm-security main</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian-security&#x2F; bookworm-security main</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bookworm-updates main non-free non-free-firmware contrib</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bookworm-updates main non-free non-free-firmware contrib</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bookworm-backports main non-free non-free-firmware contrib</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;debian&#x2F; bookworm-backports main non-free non-free-firmware contrib</span><br></pre></td></tr></table></figure></li>
<li>更新，<code>sudo apt update</code></li>
</ul>
<h1 id="安装nvidia驱动-可选"><a href="#安装nvidia驱动-可选" class="headerlink" title="安装nvidia驱动(可选)"></a>安装nvidia驱动(可选)</h1><ul>
<li>不装了，可以直接用</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>20240226-tauri安卓问题</title>
    <url>/post/627b78.html</url>
    <content><![CDATA[<p>1、安装rust git2 包<br>2、rust x86编译安卓aarch-linux-android 会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh: 1: aarch64-linux-android-ranlib: not found</span><br></pre></td></tr></table></figure>
<p>3、除了安装android-cmd-line包工具后，需要配置一系列环境变量，还叫将ndk的环境变量配置到PATH中去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/aladdin/software/Android/ndk/26.2.11394342/toolchains/llvm/prebuilt/linux-x86_64/bin</span><br></pre></td></tr></table></figure>
<p>配置完毕后，不再报错。<br>啊，安卓开发好麻烦啊</p>
<p>遇到问题再补充</p>
]]></content>
  </entry>
  <entry>
    <title>20240311</title>
    <url>/post/563f323b.html</url>
    <content><![CDATA[<p>有些emo</p>
<p>怎么形容这种感觉呢。。</p>
<p>看到大龄剩女的一篇知乎问答，感觉 我好像也到了这个年纪。。</p>
<p>大龄剩男</p>
<p>而我一直都有种认知，年龄大了，还没有结婚，一定是有点什么毛病。</p>
<p>我应该是有点问题的</p>
<p>同学聚会的时候，看到他们都带着孩子，实在是羡慕。</p>
<p>想到自己的年龄，然后感觉，是不是也到时候了。。</p>
<p>老婆孩子热炕头</p>
<p>这是我想要的生活</p>
<p>想找到一个可以相伴一生的人，未来的生活是快乐的</p>
<p>应该是很困难吧</p>
<p>不想将就，别人也看不上。</p>
<p>嗯，这应该是目前我的问题了</p>
<p>一位优秀的姑娘，在哪里都有人追，我又有啥竞争力呢。</p>
<p>嗯，不该妄自菲薄。</p>
<p>去试试吧</p>
<p>em</p>
<p>以前的想法是：非她不可，非我不可</p>
<p>可我应该很难做到了</p>
<p>也不应该奢望</p>
<p>白日梦：如果能遇到这样一个女孩子，该有多幸福啊。。啊（慈母笑）</p>
<p>end</p>
<p>祝愿我能找一个心仪的女孩子结婚，也祝愿这个女孩幸福快乐的生活下去。</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>post</title>
    <url>/post/5a8a6c8d.html</url>
    <content><![CDATA[<p>心情不能平复</p>
<p>感觉获得的少了，对方感觉可能又太多了。</p>
<p>人之常情</p>
<p>很合理，却不太好接受</p>
<p>你只看到了自己想看到的东西</p>
<p>对方也只能看到他觉得有意义的东西</p>
<p>本来就是不对等的</p>
<p>当地位不平等的时候，你很难去平衡这些东西</p>
<p>你是有求于人的一方</p>
<p>所以这些是应该的吗</p>
<p>不！不应该！</p>
<p>凭什么？</p>
<p>去吧，追寻自己想要的结果</p>
<p>是时候了</p>
]]></content>
  </entry>
  <entry>
    <title>特么，又是蛋疼的一天。。</title>
    <url>/post/122ea145.html</url>
    <content><![CDATA[<p>明天还要上班啊，法克。。</p>
<p>好烦</p>
]]></content>
  </entry>
  <entry>
    <title>emmm</title>
    <url>/post/8ee38851.html</url>
    <content><![CDATA[<p>傻傻两个姑娘，婚姻幸福</p>
<p>机灵聪慧的几个姑娘，却离婚了</p>
<p>有感而发</p>
<p>傻一点好</p>
<p>聪明，却很难活的通透</p>
<p>不满意现状，却又无力改变</p>
<p>只会让自己更压抑</p>
<p>前车之鉴，后车之师。</p>
]]></content>
  </entry>
  <entry>
    <title>特么，失眠了</title>
    <url>/post/33a560b2.html</url>
    <content><![CDATA[<p>草！</p>
<p>真特么蛋疼，。。</p>
<p>脑子里都在想啥啊</p>
<p>烦死了。。</p>
]]></content>
  </entry>
  <entry>
    <title>20240527-youtube-dl</title>
    <url>/post/3dc2f85d.html</url>
    <content><![CDATA[<h1 id="youtube-dl-最新地址"><a href="#youtube-dl-最新地址" class="headerlink" title="youtube-dl 最新地址"></a>youtube-dl 最新地址</h1><p>因为违反了一些协议，所以不能在官方网站上下载地址，APT还有官网下载的都是老版本，无法使用。</p>
<p>使用下面的地址</p>
<p><a href="https://github.com/ytdl-org/ytdl-nightly/releases/" target="_blank" rel="noopener">下载地址</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>找到命令行工具 </p>
<p>就是 youtube-dl</p>
<p>点击下载</p>
<p>下载的链接大概是下面这个样子<br> <a href="https://objects.githubusercontent.com/github-production-release-asset-2e65be/661290495/8f2110dc-9005-4c88-8b83-e3950cb32f7f?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=releaseassetproduction%2F20240527%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20240527T104040Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=23f814aed43bc16a8799862fba5b299ef1d4aeed29998a94c913be45a4311de8&amp;X-Amz-SignedHeaders=host&amp;actor_id=26974584&amp;key_id=0&amp;repo_id=661290495&amp;response-content-disposition=attachment%3B%20filename%3Dyoutube-dl&amp;response-content-type=application%2Foctet-stream" target="_blank" rel="noopener">https://objects.githubusercontent.com/github-production-release-asset-2e65be/661290495/8f2110dc-9005-4c88-8b83-e3950cb32f7f?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=releaseassetproduction%2F20240527%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20240527T104040Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=23f814aed43bc16a8799862fba5b299ef1d4aeed29998a94c913be45a4311de8&amp;X-Amz-SignedHeaders=host&amp;actor_id=26974584&amp;key_id=0&amp;repo_id=661290495&amp;response-content-disposition=attachment%3B%20filename%3Dyoutube-dl&amp;response-content-type=application%2Foctet-stream</a></p>
<p>sudo curl -L {上面的链接} -o /usr/local/bin/youtube-dl<br>sudo chmod a+rx /usr/local/bin/youtube-dl</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>好累的一周啊</title>
    <url>/post/127cf4e9.html</url>
    <content><![CDATA[<p>人麻了</p>
<p>我特么图个啥啊。。</p>
<p>脑壳疼</p>
<p>emmmm</p>
<p>当个独立开发者？</p>
<p>没什么好点子。。</p>
<p>嗨</p>
]]></content>
  </entry>
  <entry>
    <title>20240621-微软bing search 问题</title>
    <url>/post/d1dbfb20.html</url>
    <content><![CDATA[<h1 id="问题经过"><a href="#问题经过" class="headerlink" title="问题经过"></a>问题经过</h1><p>在本机(windows)与开发机器(linux)在使用微软 Bing Search Api 搜索时，参数一致的情况下，返回的结果却不一致。</p>
<p>最开始以为是 query 的编码问题</p>
<ol>
<li>本机apifox请求 <a href="https://api.bing.microsoft.com/v7.0/news/search?q=%E7%89%B9%E6%96%AF%E6%8B%89%20%E6%B5%8B%E8%AF%95&amp;mkt=zh-CN" target="_blank" rel="noopener">https://api.bing.microsoft.com/v7.0/news/search?q=%E7%89%B9%E6%96%AF%E6%8B%89%20%E6%B5%8B%E8%AF%95&amp;mkt=zh-CN</a>  </li>
<li>开发机代码请求 <a href="https://api.bing.microsoft.com/v7.0/news/search?q=%E7%89%B9%E6%96%AF%E6%8B%89+%E6%B5%8B%E8%AF%95&amp;mkt=zh-CN" target="_blank" rel="noopener">https://api.bing.microsoft.com/v7.0/news/search?q=%E7%89%B9%E6%96%AF%E6%8B%89+%E6%B5%8B%E8%AF%95&amp;mkt=zh-CN</a> </li>
</ol>
<p>因为query里面有空格，一个是URL编码的 %20 ，一个是 + ，一开始以为是这个的问题，当我调整编码一致的时候，发现结果还是不一样</p>
<p>在同事的电脑上搜索的结果与开发机器一致，怀疑是代理问题</p>
<p>后来发现参数的 mtk 对区域有限制，比如你当前是在中国，搜索不到 mkt 为 en-US 的内容，反过来也是如此。</p>
<p>本机服务器在杭州，所以直接请求 zh-CN 的结果</p>
<p>en-US 必须是国外的服务器，所以在阿里云(香港)函数计算上搭建了一个代理服务，用于获取英文的搜索结果</p>
]]></content>
  </entry>
  <entry>
    <title>法克鱿，抖音又刷了一天</title>
    <url>/post/fb833248.html</url>
    <content><![CDATA[<p>抖音！卸载！</p>
]]></content>
  </entry>
  <entry>
    <title>“不要责怪以前的自己，他一个人站在雾里也很迷茫”</title>
    <url>/post/fdd024ba.html</url>
    <content><![CDATA[<p>特么，正大口吃着饭呢。。</p>
<p>看到这句，突然泪崩。</p>
]]></content>
  </entry>
  <entry>
    <title>凌晨这个时间点啊</title>
    <url>/post/1d5c2f78.html</url>
    <content><![CDATA[<p>难顶哟</p>
<p>嗨</p>
<p>对的起自己的良心</p>
<p>快乐的生活下去</p>
<p>捋顺自己</p>
<p>蓦然回首，我心依旧</p>
]]></content>
  </entry>
  <entry>
    <title>如果写不出来，那就是没想明白</title>
    <url>/post/e6e078aa.html</url>
    <content><![CDATA[<p>rt</p>
]]></content>
  </entry>
  <entry>
    <title>230323-用两个栈实现队列</title>
    <url>/post/46bff899.html</url>
    <content><![CDATA[<h1 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead  操作返回 -1 )</p>
<p>示例 1：</p>
<p>输入：<br>[“CQueue”,”appendTail”,”deleteHead”,”deleteHead”,”deleteHead”]<br>[[],[3],[],[],[]]<br>输出：[null,null,3,-1,-1]<br>示例 2：</p>
<p>输入：<br>[“CQueue”,”deleteHead”,”appendTail”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[],[5],[2],[],[]]<br>输出：[null,-1,null,null,5,2]<br>提示：</p>
<p>1 &lt;= values &lt;= 10000<br>最多会对  appendTail、deleteHead 进行  10000  次调用</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="原生方法"><a href="#原生方法" class="headerlink" title="原生方法"></a>原生方法</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::VecDeque;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CQueue</span></span> &#123;</span><br><span class="line">    stack: VecDeque&lt;<span class="built_in">i32</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> CQueue &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>() -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        CQueue &#123;</span><br><span class="line">            stack: VecDeque::new(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">append_tail</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, value: <span class="built_in">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.stack.push_front(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">delete_head</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> v = <span class="keyword">self</span>.stack.pop_back();</span><br><span class="line">        <span class="keyword">match</span> v &#123;</span><br><span class="line">            <span class="literal">Some</span>(v) =&gt; v,</span><br><span class="line">            <span class="literal">None</span> =&gt; -<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双-vec"><a href="#双-vec" class="headerlink" title="双 vec"></a>双 vec</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Default)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CQueue</span></span> &#123;</span><br><span class="line">    stack1: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;,</span><br><span class="line">    stack2: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> CQueue &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>() -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        Self::default()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">append_tail</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, value: <span class="built_in">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.stack1.push(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">delete_head</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(i) = <span class="keyword">self</span>.stack2.pop() &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(i) = <span class="keyword">self</span>.stack1.pop() &#123;</span><br><span class="line">            <span class="keyword">self</span>.stack2.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.stack2.pop().unwrap_or(-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>第一反应是找原生队列支持，确实有，引入标准库就可以了。</li>
<li>做完后发现跟题目不太符合，需要用两个栈来实现队列的功能。</li>
<li>栈是先进后出，队列是先进先出</li>
<li>原生 vec 可以实现栈的功能，pus- pop。</li>
<li>把出栈的内容 push 到第二个 vec 里面，然后 在第二 vec pop 出来，就实现了类似队列的功能</li>
<li>比如 stack1.push(1),stack1.push(2), stack1 = [1,2]; stack2 = [];</li>
<li>stakc2.push(stack1.pop()),stack1 = [1];stack2= [2]</li>
<li>stakc2.push(stack1.pop()),stack1 = [];stack2= [2,1]</li>
<li>stack2.pop(),stack1 = [];stack2= [2],返回值 1</li>
<li>stack2.pop(),stack1 = [];stack2= [],返回值 2</li>
</ul>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>来源：力扣（LeetCode）</li>
<li>链接：<a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof" target="_blank" rel="noopener">https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof</a></li>
<li>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>230328-包含min函数的栈</title>
    <url>/post/7693c044.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>
<p>示例:</p>
<p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.min(); –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top(); –&gt; 返回 0.<br>minStack.min(); –&gt; 返回 -2.</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;<span class="built_in">f32</span>::MIN, vec&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MinStack</span></span> &#123;</span><br><span class="line">    stack_a: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;,</span><br><span class="line">    stack_b: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `&amp;self` means the method takes an immutable reference.</span></span><br><span class="line"><span class="comment"> * If you need a mutable reference, change it to `&amp;mut self` instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">impl</span> MinStack &#123;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>() -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MinStack &#123;</span><br><span class="line">            stack_a: <span class="built_in">vec!</span>[],</span><br><span class="line">            stack_b: <span class="built_in">vec!</span>[],</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">push</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, x: <span class="built_in">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.stack_a.push(x);</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.stack_b.len() == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.stack_b.push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">self</span>.min() &gt;= x &#123;</span><br><span class="line">            <span class="keyword">self</span>.stack_b.push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.stack_b.push(<span class="keyword">self</span>.min());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">pop</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.stack_a.pop();</span><br><span class="line">        <span class="keyword">self</span>.stack_b.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">top</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> top: <span class="built_in">i32</span> = <span class="keyword">self</span>.stack_a.last().unwrap().clone();</span><br><span class="line">        top</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">min</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> min: <span class="built_in">i32</span> = <span class="keyword">self</span>.stack_b.last().unwrap().clone();</span><br><span class="line">        min</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>emmm，没思路，对栈不熟悉，看了代码才知道应该用两个栈来存储数据。</li>
<li>第一个栈正常存数据，第二个栈存数据的最小值，一一对应的</li>
</ul>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul>
<li>来源：力扣（LeetCode）</li>
<li>链接：<a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof" target="_blank" rel="noopener">https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof</a></li>
<li>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>230329--选择排序</title>
    <url>/post/ca98f073.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>写一个选择排序</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">selection_sort</span></span>(arr: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> min = std::<span class="built_in">i32</span>::MIN;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> result = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">for</span> _i <span class="keyword">in</span> &amp;arr &#123;</span><br><span class="line">        <span class="keyword">let</span> c_min = find_small(&amp;arr, min);</span><br><span class="line">        min = c_min;</span><br><span class="line">        result.push(c_min);</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">find_small</span></span>(arr: &amp;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, min: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> c_min = std::<span class="built_in">i32</span>::MAX;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr &#123;</span><br><span class="line">        <span class="keyword">if</span> *i &lt;= min &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> *i &lt; c_min &#123;</span><br><span class="line">            c_min = *i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    c_min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>230403-分治</title>
    <url>/post/e18fcdf5.html</url>
    <content><![CDATA[<h2 id="重要的两点"><a href="#重要的两点" class="headerlink" title="重要的两点"></a>重要的两点</h2><ul>
<li>如何找出基线条件</li>
<li>如何缩小计算规模</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算元素的和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> [c, ...rest] = arr;</span><br><span class="line">  <span class="keyword">return</span> c + sum(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a =  sum([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算元素的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayLength</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> [i, ...rest] = arr;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> + ArrayLength(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = ArrayLength([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找出元素中的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxNumber</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="literal">Infinity</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> [i, ...rest] = arr;</span><br><span class="line">  <span class="keyword">let</span> max = maxNumber(rest);</span><br><span class="line">  <span class="keyword">return</span> i &gt; max ? i : max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = maxNumber([<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找，分治方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">midSearch</span>(<span class="params">arr: <span class="built_in">number</span>[], search: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr[<span class="number">0</span>] === search) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> mid = (arr.length - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (arr[mid] &gt; search) &#123;</span><br><span class="line">    <span class="keyword">return</span> midSearch(arr.slice(<span class="number">0</span>, mid), search);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> midSearch(arr.slice(mid, arr.length), search);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分治，二分查找，Rust版本</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">mid_search</span></span>(arr: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, search: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> arr.len() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> arr[<span class="number">0</span>] == search &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = (arr.len() - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> arr[mid] &gt; search &#123;</span><br><span class="line">        <span class="keyword">return</span> mid_search(arr[<span class="number">0</span>..mid].to_vec(), search);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mid_search(arr[mid..arr.len()].to_vec(), search);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>230407-分治-快排</title>
    <url>/post/27259b04.html</url>
    <content><![CDATA[<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">q_srot</span></span>(arr: &amp;<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> arr.len() &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> base = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> small: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = arr.into_iter().filter(|x| *x &lt; &amp;base).map(|x| *x).collect();</span><br><span class="line">    <span class="keyword">let</span> bigger: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = arr.iter().filter(|x| *x &gt; &amp;base).map(|x| *x).collect();</span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = q_srot(&amp;small)</span><br><span class="line">        .into_iter()</span><br><span class="line">        .chain(<span class="built_in">vec!</span>[base])</span><br><span class="line">        .chain(q_srot(&amp;bigger))</span><br><span class="line">        .collect();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="理解思路"><a href="#理解思路" class="headerlink" title="理解思路"></a>理解思路</h2><p>分治，就是把问题不断的分解，这个问题的最小解就是问题的答案。不是所有的问题都可以使用分治</p>
<p>递归是实现分治的方案</p>
<p>递归实现的两个重要条件</p>
<ul>
<li>基准条件，满足此条件相当于找到最小解，可以结束递归</li>
<li>递归条件，如何递归能得到结果</li>
</ul>
<p>草，写这个东西是真的很困难。</p>
<p>还是需要在理解一下分治</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>230421-图-广度优先</title>
    <url>/post/63430a4c.html</url>
    <content><![CDATA[<h1 id="给一个单向关系图，实现广度优先算法"><a href="#给一个单向关系图，实现广度优先算法" class="headerlink" title="给一个单向关系图，实现广度优先算法"></a>给一个单向关系图，实现广度优先算法</h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">search_m</span></span>&lt;<span class="symbol">'a</span>&gt;(hashmap: HashMap&lt;&amp;<span class="built_in">str</span>, <span class="built_in">Vec</span>&lt;&amp;<span class="symbol">'a</span> <span class="built_in">str</span>&gt;&gt;) -&gt; <span class="built_in">Option</span>&lt;&amp;<span class="symbol">'a</span> <span class="built_in">str</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> queue: <span class="built_in">Vec</span>&lt;&amp;<span class="built_in">str</span>&gt; = <span class="built_in">Vec</span>::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> check_list = HashSet::new();</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(first) = hashmap.get(<span class="string">"you"</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> ele <span class="keyword">in</span> first &#123;</span><br><span class="line">            queue.push(ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> queue.len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> c = queue.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> check_list.contains(c) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check_list.insert(c);</span><br><span class="line">        <span class="keyword">if</span> c.ends_with(<span class="string">"m"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">Some</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(eles) = hashmap.get(c) &#123;</span><br><span class="line">            <span class="keyword">for</span> ele <span class="keyword">in</span> eles &#123;</span><br><span class="line">                queue.push(ele)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> hashmap = HashMap::new();</span><br><span class="line">    hashmap.insert(<span class="string">"you"</span>, <span class="built_in">vec!</span>[<span class="string">"alice"</span>, <span class="string">"bob"</span>, <span class="string">"claire"</span>]);</span><br><span class="line">    hashmap.insert(<span class="string">"bob"</span>, <span class="built_in">vec!</span>[<span class="string">"anuj"</span>, <span class="string">"peggy"</span>]);</span><br><span class="line">    hashmap.insert(<span class="string">"alice"</span>, <span class="built_in">vec!</span>[<span class="string">"peggy"</span>]);</span><br><span class="line">    hashmap.insert(<span class="string">"claire"</span>, <span class="built_in">vec!</span>[<span class="string">"you"</span>, <span class="string">"thom"</span>, <span class="string">"jonny"</span>]);</span><br><span class="line">    hashmap.insert(<span class="string">"anuj"</span>, <span class="built_in">vec!</span>[]);</span><br><span class="line">    hashmap.insert(<span class="string">"peggy"</span>, <span class="built_in">vec!</span>[]);</span><br><span class="line">    hashmap.insert(<span class="string">"thom"</span>, <span class="built_in">vec!</span>[]);</span><br><span class="line">    hashmap.insert(<span class="string">"jonny"</span>, <span class="built_in">vec!</span>[]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> v = search_m(hashmap);</span><br><span class="line">    <span class="keyword">match</span> v &#123;</span><br><span class="line">        <span class="literal">Some</span>(i) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"find mongoose! name &#123;:?&#125;"</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"not find mongoose"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>创建一个队列，把离自己最近的一层放在队列内<br>队列出队，检查当前元素是否符合要求，符合终止查找<br>不符合，把该元素的子集放入队列<br>这样子，只要队列不为空，就能把所有的内容检查一遍，且依照离原点最近的距离检查。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>231103-心神不宁</title>
    <url>/post/a946e460.html</url>
    <content><![CDATA[<p>感觉有些烦躁，知道原因是什么</p>
<p>但是想不明白，我应该怎么做。</p>
<p>过去的经历，不能够给我带来抉择的办法</p>
<p>没办法静下心来思考</p>
<p>这对我很重要吗？ 没有</p>
<p>那我为什么还在纠结这件事？ 不甘心吗？不是，会失去一些然我觉得快乐的事情。</p>
<p>是或者不是带来的后果是什么？ 做或者不做，没太多区别。</p>
<p>那就不做</p>
<p>这就是别人觉着我无趣的原因？</p>
<p>患得患失，思绪太重。</p>
<p>本是一件小事</p>
<p>不应该费心思</p>
<p>否掉</p>
<p>干</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>240115</title>
    <url>/post/e9bdadd4.html</url>
    <content><![CDATA[<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>有一个小想法</p>
<p>做一个自动部署的hexo的插件？</p>
<p>或者是</p>
<p>当我在手机上写玩一篇内容，就会git 自动创建</p>
<p>git 自动提交</p>
<p>github action 自动打包发布</p>
<p>这样子 每次想写点什么东西，就可以在手机上写好，然后发布。</p>
<p>方便快捷的发布博客内容</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>手机客户端？em，应该是个网页？小程序？APP？</li>
</ul>
<p>是否需要一个公网服务端？</p>
<ul>
<li>需要<ul>
<li>优点：<ul>
<li>serverless可以部署在国外服务器，没有代理问题</li>
<li>不行，这个好像不可取，暂不考虑这个方案</li>
</ul>
</li>
<li>缺点<ul>
<li>需要服务器，代理问题，成本高</li>
<li>不需要服务器，就得走serverless，那么每次提交开销有点大，没办法使用缓存。</li>
</ul>
</li>
</ul>
</li>
<li>不需要<ul>
<li>优点：<ul>
<li>手机本地就能跑，基本没有其他任何成本<br>缺点：</li>
<li>手机本地得翻墙。</li>
<li>手机客户端不能是纯前端，得前端+后端，技术栈对我来说选择不多。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如果考虑前端+后端的实现都在本地的话，那么。。。前端部分应该用什么实现？后端应该用什么实现？</p>
<p>tarui<br>rn<br>如果是纯后端，如何触发git</p>
<h2 id="做一下技术调研"><a href="#做一下技术调研" class="headerlink" title="做一下技术调研"></a>做一下技术调研</h2><p>tauri 支持情况</p>
<p>支持安卓，ios，但是alpha版本..</p>
<p>emm</p>
<p>rust练手这个目的很重要。。</p>
<p>所以</p>
<p>冲！<br>就它！</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>240123</title>
    <url>/post/2bf35b22.html</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>遇到一次openclash无法打开部分网页的问题</p>
<p>github，google正常访问</p>
<p>但是部分网页比如githubusercontent.com 无法访问</p>
<p>查了一下dns解析，发现dns解析的路径是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server:  UnKnown</span><br><span class="line">Address:  fdab:bd6f:e5be::1</span><br><span class="line"></span><br><span class="line">DNS request timed out.</span><br><span class="line">    timeout was 2 seconds.</span><br><span class="line">DNS request timed out.</span><br><span class="line">    timeout was 2 seconds.</span><br><span class="line">*** Request to UnKnown timed-out</span><br></pre></td></tr></table></figure>

<p>导致无法解析dns，尝试切换本地dns也不行。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>这个地址是ipv6的方式，是不是因为路由器上开了ipv6导致的。</p>
<p>把路由器接口里面IPv6给关掉，然后尝试刷新dns，重新访问，还是不行。</p>
<p>然后查openclash的问题</p>
<p>找到一篇与我情况类似的问题 <a href="https://github.com/vernesong/OpenClash/wiki/%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%B8%B8%E6%97%B6%E6%8E%92%E6%9F%A5%E5%8E%9F%E5%9B%A0" target="_blank" rel="noopener">网络连接异常时排查原因</a></p>
<p>按上面说的，切换到fake-ip的方式，然后重启openclash，恢复正常</p>
<p>下次如果遇到类似问题，可以这么解决，记录一下</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>20241211-系统工程</title>
    <url>/post/ab293b5a.html</url>
    <content><![CDATA[<h1 id="系统工程"><a href="#系统工程" class="headerlink" title="系统工程"></a>系统工程</h1><h2 id="整体最优原则"><a href="#整体最优原则" class="headerlink" title="整体最优原则"></a>整体最优原则</h2><p>最优设计、最优规划、最优管理、最优控制</p>
<h2 id="系统工程方法"><a href="#系统工程方法" class="headerlink" title="系统工程方法"></a>系统工程方法</h2><h3 id="霍尔三维结构"><a href="#霍尔三维结构" class="headerlink" title="霍尔三维结构"></a>霍尔三维结构</h3><p>大型工程项目</p>
<h4 id="逻辑维"><a href="#逻辑维" class="headerlink" title="逻辑维"></a>逻辑维</h4><ul>
<li>认识问题</li>
<li>确定目标</li>
<li>系统综合</li>
<li>系统分析</li>
<li>优化</li>
<li>系统决策</li>
<li>实施计划<h4 id="时间维"><a href="#时间维" class="headerlink" title="时间维"></a>时间维</h4></li>
<li>规划阶段</li>
<li>拟定方案</li>
<li>研制阶段</li>
<li>生产阶段</li>
<li>安装阶段</li>
<li>运行阶段</li>
<li>更新阶段<h4 id="知识维度"><a href="#知识维度" class="headerlink" title="知识维度"></a>知识维度</h4></li>
</ul>
<p>各个领域专业知识；如医药、金融等</p>
<h3 id="茄克兰德方方法"><a href="#茄克兰德方方法" class="headerlink" title="茄克兰德方方法"></a>茄克兰德方方法</h3><p>比较与探寻</p>
<p>认识问题、根底定义、建立概念模型、比较与探寻、选择、设计与实施、评估与反馈</p>
<h3 id="并行工程方法"><a href="#并行工程方法" class="headerlink" title="并行工程方法"></a>并行工程方法</h3><p>制造过程 与 支持过程</p>
<h3 id="综合集合法"><a href="#综合集合法" class="headerlink" title="综合集合法"></a>综合集合法</h3><p>钱学森命名，简单系统、巨系统</p>
<h3 id="WSR系统方法"><a href="#WSR系统方法" class="headerlink" title="WSR系统方法"></a>WSR系统方法</h3><p>懂物理、明事理、通人理</p>
<h2 id="系统工程生命周期阶段"><a href="#系统工程生命周期阶段" class="headerlink" title="系统工程生命周期阶段"></a>系统工程生命周期阶段</h2><p>探索性研究、概念阶段、开发阶段、生产阶段、使用阶段、保障阶段、退役阶段</p>
<h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3><h3 id="计划开发周期"><a href="#计划开发周期" class="headerlink" title="计划开发周期"></a>计划开发周期</h3><p>调研、设计、构建、测试、部署</p>
<h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>连续，不是按周期进行交付已达到预设系统状态</p>
<h3 id="精益开发"><a href="#精益开发" class="headerlink" title="精益开发"></a>精益开发</h3><p>敏捷开发的一种，以客户为中心</p>
<h3 id="敏捷快发"><a href="#敏捷快发" class="headerlink" title="敏捷快发"></a>敏捷快发</h3><p>更高的灵活性</p>
<h2 id="系统生命周期"><a href="#系统生命周期" class="headerlink" title="系统生命周期"></a>系统生命周期</h2><h3 id="产生阶段"><a href="#产生阶段" class="headerlink" title="产生阶段"></a>产生阶段</h3><p>主要是调研、分析可行性</p>
<h3 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h3><p>总体规划、系统分析、系统设计、系统实施、系统验收</p>
<h3 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h3><p>验收、移交过后</p>
<h3 id="消亡阶段"><a href="#消亡阶段" class="headerlink" title="消亡阶段"></a>消亡阶段</h3><p>系统改造、功能扩展、报废重建</p>
<p>这特么记得住的？？</p>
]]></content>
  </entry>
  <entry>
    <title>241212-信息系统建设原则</title>
    <url>/post/d5a46717.html</url>
    <content><![CDATA[<h1 id="信息系统建立原则"><a href="#信息系统建立原则" class="headerlink" title="信息系统建立原则"></a>信息系统建立原则</h1><h2 id="高层人员参与原则"><a href="#高层人员参与原则" class="headerlink" title="高层人员参与原则"></a>高层人员参与原则</h2><p>系统的建立会跟原业务流程产生一定影响，导致部分人的利益受损，如果没有高层参与，推进会变得困难</p>
<h2 id="用于参与原则"><a href="#用于参与原则" class="headerlink" title="用于参与原则"></a>用于参与原则</h2><p>确定系统是给谁使用的，明确用户的范围，深度用户应全程参与，了解系统的运作</p>
<h2 id="自顶而下原则"><a href="#自顶而下原则" class="headerlink" title="自顶而下原则"></a>自顶而下原则</h2><p>系统建立应有全局观念以及目标，保证系统建立的方向正确</p>
<h2 id="工程化原则"><a href="#工程化原则" class="headerlink" title="工程化原则"></a>工程化原则</h2><p>系统工程是工程的一种，应有工程化观念</p>
<h2 id="其他原则"><a href="#其他原则" class="headerlink" title="其他原则"></a>其他原则</h2><p>需要继续了解</p>
]]></content>
  </entry>
  <entry>
    <title>241213-信息系统的分类</title>
    <url>/post/8fc1aa57.html</url>
    <content><![CDATA[<h1 id="信息系统的分类"><a href="#信息系统的分类" class="headerlink" title="信息系统的分类"></a>信息系统的分类</h1><h2 id="业务处理系统（TPS）"><a href="#业务处理系统（TPS）" class="headerlink" title="业务处理系统（TPS）"></a>业务处理系统（TPS）</h2><p>比较早期的系统，主要处理简单的输入，与数据处理（批处理、OLTP），又叫电子数据处理系统，最低级，最基础的系统<br>开环结构，单向输入</p>
<h2 id="管理信息系统（MIS）"><a href="#管理信息系统（MIS）" class="headerlink" title="管理信息系统（MIS）"></a>管理信息系统（MIS）</h2><p>高度集成化的人机系统，金字塔结构，有多个层级</p>
<h2 id="决策支持系统（DSS）"><a href="#决策支持系统（DSS）" class="headerlink" title="决策支持系统（DSS）"></a>决策支持系统（DSS）</h2><p>由语言系统、知识系统、问题处理系统组成，用于辅助抉择</p>
<h2 id="专家系统（ES）"><a href="#专家系统（ES）" class="headerlink" title="专家系统（ES）"></a>专家系统（ES）</h2><p>知识+推理 = 专家系统，人工智能的一个重要分支</p>
<h2 id="办公自动化系统（OAS）"><a href="#办公自动化系统（OAS）" class="headerlink" title="办公自动化系统（OAS）"></a>办公自动化系统（OAS）</h2><p>将各种硬件设备与软件系统通过网络进行连接、交互，用于办公的系统，不是一个单独的系统</p>
<h2 id="企业资源计划（ERP）"><a href="#企业资源计划（ERP）" class="headerlink" title="企业资源计划（ERP）"></a>企业资源计划（ERP）</h2><p>供应链的整合与管理，不是一个单独的系统</p>
]]></content>
  </entry>
  <entry>
    <title>241212-信息系统开发方法</title>
    <url>/post/1a37efca.html</url>
    <content><![CDATA[<h1 id="信息系统开发方法"><a href="#信息系统开发方法" class="headerlink" title="信息系统开发方法"></a>信息系统开发方法</h1><h2 id="原型法"><a href="#原型法" class="headerlink" title="原型法"></a>原型法</h2><p>明确需求中的不确定性，分两种，一种是平面结构，主要用于界面，交互之类的功能。另外一种是垂直结构，主要用于复杂算法，比如头条的推荐功能。不好用平面结构进行表示</p>
<h2 id="结构化方法"><a href="#结构化方法" class="headerlink" title="结构化方法"></a>结构化方法</h2><p>自顶而下，文档、流程规范化，开发过程相对固定，不灵活</p>
<h2 id="面向对象的方法"><a href="#面向对象的方法" class="headerlink" title="面向对象的方法"></a>面向对象的方法</h2><p>自下而上，主要思想为，构建各种基础对象，把各种基础对象进行组装，得到最终的功能，更符合人类习惯。</p>
<h2 id="面向服务方法"><a href="#面向服务方法" class="headerlink" title="面向服务方法"></a>面向服务方法</h2><p>粗颗粒，低耦合，标准化与结构化，将各种方法封装为一个服务，然后一个业务，通过调用各种服务实现所需要的功能。</p>
<h2 id="形式化开发"><a href="#形式化开发" class="headerlink" title="形式化开发"></a>形式化开发</h2><p>比如净室软件开发，通过数学模型证明该方法的可行性，而不是通过测试。</p>
]]></content>
  </entry>
  <entry>
    <title>241213-软件开发方法习题</title>
    <url>/post/f1f71307.html</url>
    <content><![CDATA[<p>软件方法学是以软件开发方法为研究对象的学科。其中,()是先对最高层次中的问题进行定义、<br>设计、编程和测试,而将其中未解决的问题作为一个子任务放到下一层次中去解决。()是根据<br>系统功能要求,从具体的器件、逻辑部件或者相似系统开始,通过对其进行相互连接、修改和扩大,<br>构成所要求的系统。()是建立在严格数学基础上的软件开发方法。</p>
<p>A面向对象开发方法 （面向对象是从下向上的开发方法）<br>B形式化开发方法 （以数学模型为基础的开发方法）<br>C非形式化开发方法（没有这种发开方法）<br>D自顶向下开发方法（结构法也是自顶向下的开发方法之一，应该选这条）</p>
<p>A自底向上开发方法(面向对象的开发方法是自底向上的开发方法之一)<br>B形式化开发方法（以数学模型为基准的开放方法）<br>C非形式化开发方法<br>D原型开发方法（原型是明确目标的一种方法，一般是作为前置）</p>
<p>A自底向上开发方法<br>B形式化开发方法<br>C非形式化开发方法<br>D自顶向下开发方法</p>
]]></content>
  </entry>
  <entry>
    <title>241218-决策支持系统</title>
    <url>/post/9dc82db1.html</url>
    <content><![CDATA[<h1 id="决策支持系统-（DDS）"><a href="#决策支持系统-（DDS）" class="headerlink" title="决策支持系统 （DDS）"></a>决策支持系统 （DDS）</h1><p>主要又语言系统、知识系统、问题处理系统组成，经典场景比如医院</p>
<h2 id="主要特征-记忆版，有个没记住"><a href="#主要特征-记忆版，有个没记住" class="headerlink" title="主要特征(记忆版，有个没记住)"></a>主要特征(记忆版，有个没记住)</h2><ul>
<li>主要资源为数据与模型，用于辅助决策</li>
<li>主要解决的是半机构化与非结构化的问题</li>
<li>系统主要是提高决策的有效性，而不是决策的效率</li>
<li>主要是辅助决策，而不是代替用户做决策（这条没记住，再来一遍）</li>
</ul>
<h2 id="主要特征（2）"><a href="#主要特征（2）" class="headerlink" title="主要特征（2）"></a>主要特征（2）</h2><ul>
<li>主要资源是数据与模型</li>
<li>系统主要用于辅助决策，而不是代替决策</li>
<li>主要解决半结构化与非结构化的问题，比如，出具一些可行的选项，可能各有优劣，让用户去决定，应该使用哪种抉择</li>
<li>该系统主要提高决策的有效性，而不是决策的效率</li>
</ul>
<h2 id="再次整理一遍"><a href="#再次整理一遍" class="headerlink" title="再次整理一遍"></a>再次整理一遍</h2><p>决策支持系统，DDS，主要由 语言系统、知识系统、问题处理系统组成，类似的如 医院的处理系统</p>
<p>主要特称有，数据和模型是该系统的主要资源，用于辅助用户决策，而不是代替用户做决策，主要解决半结构化问题与非结构化问题，比如系统给出解决该问题的方法可能各有优劣，用户需要找出适合当前方案的解决办法，该系统主要提高用户决策的有效性而不是决策的效率。</p>
]]></content>
  </entry>
  <entry>
    <title>241218-管理信息系统</title>
    <url>/post/cacb4331.html</url>
    <content><![CDATA[<h1 id="管理信息系统（MIS）"><a href="#管理信息系统（MIS）" class="headerlink" title="管理信息系统（MIS）"></a>管理信息系统（MIS）</h1><p>在基础的业务处理系统上扩展而来，跟企业信息管理有较高的关联性，高度集成化的人机系统，金字塔结构，有多个层级。<br>引进大量管理方法，对企业整体信息进行处理</p>
<!-- 4大部件分别为，信息源，信息处理器，用户管理，信息管 这个错了 -->
<p>4大部分为，信息源，信息处理器，信息用户，信息管理者（者，不是员）</p>
<p>是一种闭环结构</p>
<p>整体路径为 事件，记录，变换，存储，决策，执行，结果，评价（少了一个识别）</p>
<h2 id="开环结构"><a href="#开环结构" class="headerlink" title="开环结构"></a>开环结构</h2><p>整体路径为 事件，识别，记录，变化 存储，决策，执行，结果，评价</p>
<p>输入后除了决策，其他情况不影响本次执行结果</p>
<h2 id="闭环结构"><a href="#闭环结构" class="headerlink" title="闭环结构"></a>闭环结构</h2><p>事件，识别，记录，变换，存储，决策，执行，结果，评价。</p>
<p>与开环结构类似，但是在决策后面的阶段（决策，执行，结果，评价）可以回到最开始的事件上，影响本次输入的执行结果。</p>
]]></content>
  </entry>
  <entry>
    <title>241219-专家系统</title>
    <url>/post/faa82b71.html</url>
    <content><![CDATA[<h1 id="专家系统-ES"><a href="#专家系统-ES" class="headerlink" title="专家系统(ES)"></a>专家系统(ES)</h1><p>人工智能的一个分支，录入专家的知识与经验，处理该领域的问题，并决策。</p>
<p>专家系统可以自己做决策<br>与一般通用系统不一样的地方在于，不仅可以处理字符还能处理符号，结果一些非结构性问题。因知识库的不同，解决的问题领域也不同。</p>
<h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>知识库：存储该领域的知识与经验<br>推理机： 推理系统，主要用于规则解释<br>综合数据库：辅助功能，主要解决一些中间状态，比如推理过程中的结果<br>知识获取：知识库通过知识获取功能得到专家的知识与经验<br>解释器：主要面向人机接口</p>
<h2 id="第二遍"><a href="#第二遍" class="headerlink" title="第二遍"></a>第二遍</h2><p>专家系统是一个具有专家知识和经验的人工只能系统，可以帮助用户决策并解决问题</p>
<p>与通用系统不一样的点</p>
<p>该系统不光可以解决问题，而且可以还可以分析结果，并做决策</p>
<p>除了数字还可以分析符号</p>
<p>不光解决结构化问题，有可以解决非结构化问题，且能解决不确定的问题</p>
<p>跟通用系统不太一样的地方，因知识库的不同，针对的领域也会不同</p>
<p>核心</p>
<p>知识库：存储专家知识经验<br>推理机：规则解释器<br>综合知识库：辅助功能，比如用于存放推理过程中的状态，中间结果等<br>知识录入：知识库通过该接口获得专家的知识与经验，主要有内容的编辑还有自学习功能（获取，不是录入）<br>解释器：主要面向与人机接口</p>
<p>更正：知识获取，而不是知识录入。</p>
]]></content>
  </entry>
  <entry>
    <title>241219-电子政务</title>
    <url>/post/5276e5d2.html</url>
    <content><![CDATA[<h1 id="电子政务"><a href="#电子政务" class="headerlink" title="电子政务"></a>电子政务</h1><p>电子政务的主体主要有 政府（Govment），企事业单位（Business），民众(Citizen)，公务员(Emplyee) ，确认一下单词拼写是否有错误</p>
<p>一些特殊情况，比如人口信息，地理信息等，基本都为政府与政府。其他情况，要看谁是主动方</p>
<p>G2G: 政府对政府，主要业务可能会涉及到人口信息，地理信息采集等<br>G2B: 发放各种证照，例如营业执照，许可证<br>B2G: 缴税，向政府提供服务等<br>G2E: 政府内部系统<br>G2C: 发放各种执照，提供公共信息，比如天气<br>C2G: 公民对政府，主要是纳税，报警灯</p>
<h1 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h1><p>电子政务的主体有：政府（Government）、企事业单位(Business)、公民（Citizen）、公务员（Employee）</p>
<p>除了人口信息与地理信息外，对应关系主要看谁是主体<br>G2E: 政府对公务员，主要是政府内部系统<br>G2G: 政府对政府，主要是基础信息采集，比如人口信息，地理信息。各级政府之间的决策与汇报<br>G2B: 政府对企业，发放各种证照，比如营业执照，各类许可证<br>B2G: 企业对政府，缴税、承接政府工程、向政府提建议、申诉<br>G2C: 政府对公民，提供社区公安，水、火、天灾等信息，发放各类牌照，比如户口，驾驶证（信息主要是公共安全信息，包括水、火、天灾等）<br>C2G: 公民对政府，向政府纳税与各类费用，向政府提建议，报警等</p>
]]></content>
  </entry>
  <entry>
    <title>241225-总线</title>
    <url>/post/cbcd97c9.html</url>
    <content><![CDATA[<h1 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h1><p>分时共享的半双工 传送线路</p>
<p>可以同时接收数据，但是发送只能分时发送</p>
<p>通过总线复用可以减少信号线数量，用较少的信号线传输更多的数据</p>
<p>芯片内总线</p>
<p>系统总线（数据总线、控制总线、地址总线）</p>
<h1 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h1><h2 id="并行传输"><a href="#并行传输" class="headerlink" title="并行传输"></a>并行传输</h2><p>短距离</p>
<h2 id="串行传输"><a href="#串行传输" class="headerlink" title="串行传输"></a>串行传输</h2><p>长距离，多种传输方式，可以调整比特率，正确方式靠校验码完成</p>
<h1 id="计算机传输方式"><a href="#计算机传输方式" class="headerlink" title="计算机传输方式"></a>计算机传输方式</h1><h2 id="程序查询"><a href="#程序查询" class="headerlink" title="程序查询"></a>程序查询</h2><p>分为全量发送与程序查询，会一直占用CPU，无法做别的事情，实现简单，硬件开销小，CPU利用率低，IO效率低。</p>
<h2 id="中断方式"><a href="#中断方式" class="headerlink" title="中断方式"></a>中断方式</h2><p>相比于程序查询，使用CPU中断的方式可以减轻CPU的压力，IO传输完成后，CPU再恢复现场，继续执行后面的步骤。CPU跟IO可以同步执行，一般类似键盘鼠标</p>
<h2 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h2><p>CPU与IO之间增加一个DMA控制器，IO不直接与CPU打交道，而是跟主存，CPU跟IO可以同步执行，极大提高了效率，一般认为硬盘是DMA的方式 </p>
<h1 id="CPU-处理器结构"><a href="#CPU-处理器结构" class="headerlink" title="CPU 处理器结构"></a>CPU 处理器结构</h1><p>冯诺依曼结构，指令与数据不区分，用同样的总线，一般的通用电脑</p>
<p>哈佛结构，区分指令与数据，使用4条总线，可以并行传输，较高的数据吞吐率，主要用于嵌入式。DSP</p>
<h1 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h1><h2 id="复杂指令集"><a href="#复杂指令集" class="headerlink" title="复杂指令集"></a>复杂指令集</h2><p>数量多，可变长格式，使用微码控制，支持多种寻址方式，代表为X86</p>
<h2 id="精简指令集"><a href="#精简指令集" class="headerlink" title="精简指令集"></a>精简指令集</h2><p>数量少，定长格式，使用硬件电路实现，适合流水线，增加了通用寄存器，比较少的寻址方式，大部分为单周期操作，代表为arm</p>
<h1 id="操作系统分类"><a href="#操作系统分类" class="headerlink" title="操作系统分类"></a>操作系统分类</h1><h2 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h2><p>单道批，多道批，输入一个或多个文档，宏观上可以并行，围观是穿行</p>
<h2 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h2><p>CPU事件分片的方式去运行，每个用户感觉自己都拥有完整的操作系统</p>
<h2 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h2><p>高可靠的系统，一般用于嵌入式，需要在规定事件内相应</p>
<h2 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h2><p>linux、windows server，在网络上共享内容的操作系统</p>
<h2 id="分布式操作系统"><a href="#分布式操作系统" class="headerlink" title="分布式操作系统"></a>分布式操作系统</h2><p>网络操作系统的进阶，透明、高可靠、高性能</p>
<h2 id="微机操作系统"><a href="#微机操作系统" class="headerlink" title="微机操作系统"></a>微机操作系统</h2><p>windows、linux，多进行、多用户、多CPU的操作系统</p>
<h2 id="嵌入式操作系统"><a href="#嵌入式操作系统" class="headerlink" title="嵌入式操作系统"></a>嵌入式操作系统</h2><p>高可靠，可移植性，硬件定制</p>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>程序块、数据块、PCB（进程信息）<br>表舒服、状态、等一列东西</p>
]]></content>
  </entry>
  <entry>
    <title>20231013-生日</title>
    <url>/post/fef49984.html</url>
    <content><![CDATA[<p>生日快乐！</p>
<p>真快呀，转眼三十了。依稀记得18岁生日的场景，好像也没啥感觉，不，还是有点emo，期待总是不可靠的，虽然期望已经很低了。</p>
<p>不要抱怨，没有意义。</p>
<p>努力、奋斗，做最好的自己。</p>
<p>永远年轻，永远热泪盈眶。</p>
<p>Best wish for me.</p>
]]></content>
  </entry>
  <entry>
    <title>20231007-随便写写</title>
    <url>/post/9a30b515.html</url>
    <content><![CDATA[<p>emmm，这次尝试用不那么杂乱的方式去记录。</p>
<p>遇到一个小姑娘，人挺好，脾气也挺大，不太清楚什么原因，我挺喜欢跟她混在一起。</p>
<h3 id="她是一个什么样子的人？"><a href="#她是一个什么样子的人？" class="headerlink" title="她是一个什么样子的人？"></a>她是一个什么样子的人？</h3><ul>
<li>第一反应是奇怪，很多想法跟我差距蛮大的，有些东西我甚至难以理解，是不是年龄差距大，有代沟了。</li>
<li>脾气，不太好，应该生过好多次气，大部分都是打哈哈就过去了。不过有一次，我也很生气，一个月互相都没联系。</li>
<li>怕冷场，努力的说话，就是为了场面不那么尴尬。可能这对她来说，是一个不太想回忆的场景？</li>
<li>可能是一个内向的人吧，我们俩人格测试的结果差不多，她比我严重点。纠结、内耗、讨好型、I还是E型来着，记不清楚了。。</li>
<li>喜欢唱歌，唱的也好听，上次晚上吃完饭，一起散步，路灯下，桂花旁，两个人，她唱着歌，我在她身边晃悠的走着。我很喜欢这种感觉，内心有一丝悸动。</li>
<li>emmm，不知道算不算，跟她在一起会感到快乐。</li>
</ul>
<h3 id="有想过追她吗"><a href="#有想过追她吗" class="headerlink" title="有想过追她吗"></a>有想过追她吗</h3><ul>
<li>想过，但是每次都放弃了，很多原因</li>
<li>我现在还没有结束，哪怕已经是这样子了，依然会有负罪感</li>
<li>另外一个是自卑吧，年龄差距大，她也很受人喜欢，感觉我不太配</li>
<li>另外的一些性格、尿性。感觉也不太适合。</li>
<li>嗯，把上面这些写下来，感觉确实不应该追。</li>
<li>总体来说，喜欢跟她在一起，但是种种原因又导致，不适合在一起。</li>
</ul>
<h3 id="她跟你的关系"><a href="#她跟你的关系" class="headerlink" title="她跟你的关系"></a>她跟你的关系</h3><ul>
<li>她对我应该有些好感，类似大哥哥那种？或者大叔？我也是第一次遇到，很新奇的感觉</li>
<li>不知道是不是喜欢，感觉像，又感觉不像。。。有人说过，当你有这种感觉的时候，那就不是。</li>
</ul>
<h3 id="你的打算"><a href="#你的打算" class="headerlink" title="你的打算"></a>你的打算</h3><p>维持现状吧，没有太多的想法，不要越界，享受现在拥有的，这对我来说已经够了。</p>
<h3 id="随便写写"><a href="#随便写写" class="headerlink" title="随便写写"></a>随便写写</h3><p>感觉我自己是有点问题，太少与异性打交道了，导致稍微有一些好感，就会胡思乱想。</p>
<p>需要调整一下这种心态，嗨，屌丝的命。。。</p>
<p>挺羡慕朋友的风格，不管行不行，先去试试，万一成了呢</p>
<p>考虑的太多，导致我不太愿意去改变，不想接受失败的后果，好吧，好像也没那么难以接受。。。性格使然吧</p>
<p>就这。</p>
]]></content>
  </entry>
  <entry>
    <title>20230716-随便写写</title>
    <url>/post/c49bbcbd.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>241225-操作系统</title>
    <url>/post/3f43b32b.html</url>
    <content><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>人机接口<br>应用软件与硬件的接口<br>控制程序运行<br>管理软件硬件数据资源<br>为应用程序提供一个高效率的开发平台</p>
<h1 id="主要管理资源"><a href="#主要管理资源" class="headerlink" title="主要管理资源"></a>主要管理资源</h1><p>进程管理<br>存储管理<br>文件管理<br>作业管理<br>设备管理</p>
]]></content>
  </entry>
  <entry>
    <title>241226-进程管理</title>
    <url>/post/1645b9fa.html</url>
    <content><![CDATA[<h1 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h1><h2 id="三态模型"><a href="#三态模型" class="headerlink" title="三态模型"></a>三态模型</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>CPU正在执行该线程，一个CPU同时只能执行一个线程，多余的线程会进入就绪或者等待状态，运行状态的线程可以转换为就绪状态，与等待状态</p>
<h3 id="就绪"><a href="#就绪" class="headerlink" title="就绪"></a>就绪</h3><p>所有资源准备就绪，进入等待队列，有计算资源就可以进入运行状态。</p>
<h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><p>运行时发生了需要等待的事情，这时候CPU会被阻塞，例如IO事件，即使CPU分配给该进程也无法使用，等待的事件发生后，仅需就绪状态，不可以直接运行</p>
<h2 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h2><h3 id="时间分片"><a href="#时间分片" class="headerlink" title="时间分片"></a>时间分片</h3><p>每个进程均匀按固定的时间片执行</p>
<h3 id="先来先到"><a href="#先来先到" class="headerlink" title="先来先到"></a>先来先到</h3><p>谁先排队，谁先执行</p>
<h3 id="短作业优先"><a href="#短作业优先" class="headerlink" title="短作业优先"></a>短作业优先</h3><p>执行时间段的先执行，部分长作业可能会一直无法执行</p>
<h3 id="优先级执行"><a href="#优先级执行" class="headerlink" title="优先级执行"></a>优先级执行</h3><p>设定好进程的优先级，分为动态和静态。</p>
<h3 id="响应比优先"><a href="#响应比优先" class="headerlink" title="响应比优先"></a>响应比优先</h3><p>计算进程的等待时间与进程的来到时间，综合了先来先到与短作业优先的算法，高响应比的优先执行</p>
<h3 id="抢占式-amp-非抢占式"><a href="#抢占式-amp-非抢占式" class="headerlink" title="抢占式 &amp; 非抢占式"></a>抢占式 &amp; 非抢占式</h3><p>如果高优先级的进程到了，抢占式会踢出现在执行的进程，交给高优先级的进程。非抢占式则不会</p>
<h2 id="操作系统原语-PV操作"><a href="#操作系统原语-PV操作" class="headerlink" title="操作系统原语 PV操作"></a>操作系统原语 PV操作</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>当前资源的数量，全局的，原子性的</p>
<h3 id="P操作"><a href="#P操作" class="headerlink" title="P操作"></a>P操作</h3><p>申请资源，信号量减1，如果信号量小于0，代表没有资源，需要进入阻塞队列进行等待</p>
<h3 id="V操作"><a href="#V操作" class="headerlink" title="V操作"></a>V操作</h3><p>释放资源，信号量加1，判断信号量是否小于等于0，如果小于等于0，意味着有队列在排队，将阻塞队列里面最先进入的进程放到就绪队列</p>
]]></content>
  </entry>
  <entry>
    <title>250226关系模型相关概念</title>
    <url>/post/3d35343a.html</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="关系模型相关概念"><a href="#关系模型相关概念" class="headerlink" title="关系模型相关概念"></a>关系模型相关概念</h2><ul>
<li>目或者度： 关系模式种属性的个数</li>
<li>候选键、候选码，唯一表述元组，且无冗余，类似 学号与身份证号</li>
<li>主键：从候选键从任意挑一个</li>
<li>主属性与非主属性： 组成候选键的属性为主属性，其余为非助兴</li>
<li>外键、外码： 其他实体的主键在本实体的属性</li>
<li>全码： 所有的属性都是候选键</li>
</ul>
<h2 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h2><ul>
<li>实体完整性约束： 主属性唯一且不能为空</li>
<li>参照完整性约束：关系与关系之间的引用，主要是外键，要么是其他实体的主键，要么是空值</li>
<li>用户自定义完整性约束： 应用环境决定，比如 性别：要么0 要么 1</li>
</ul>
<h2 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a>逻辑结构设计</h2><h3 id="ER图向关系模式的转换"><a href="#ER图向关系模式的转换" class="headerlink" title="ER图向关系模式的转换"></a>ER图向关系模式的转换</h3><ul>
<li>实体向关系模式的转换，实体一定是一个关系模式</li>
<li>联系向关系模式的转换</li>
</ul>
<h3 id="关系模式的规范化"><a href="#关系模式的规范化" class="headerlink" title="关系模式的规范化"></a>关系模式的规范化</h3><h3 id="确定完整性约束（保证数据的正确性）"><a href="#确定完整性约束（保证数据的正确性）" class="headerlink" title="确定完整性约束（保证数据的正确性）"></a>确定完整性约束（保证数据的正确性）</h3><h3 id="用户视图的确定（提高数据的安全性和独立性）"><a href="#用户视图的确定（提高数据的安全性和独立性）" class="headerlink" title="用户视图的确定（提高数据的安全性和独立性）"></a>用户视图的确定（提高数据的安全性和独立性）</h3><ul>
<li>根据数据流图确定处理过程使用的视图</li>
<li>根据用户类别确定不同用户使用的视图</li>
</ul>
<h3 id="应用程序设计"><a href="#应用程序设计" class="headerlink" title="应用程序设计"></a>应用程序设计</h3><h3 id="联系类型"><a href="#联系类型" class="headerlink" title="联系类型"></a>联系类型</h3><ul>
<li>1对1</li>
<li>1对多</li>
<li>多对多</li>
</ul>
<h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><p>S1 01 02 03<br>S2 01 04 05 </p>
<h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><p>S1 ∩ S2 = 01</p>
<h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><p>S1 ∪ S2 = 01 02 03 04 05</p>
<h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><p>S1 - S2 = 02 03</p>
<h3 id="差集-1"><a href="#差集-1" class="headerlink" title="差集"></a>差集</h3><p>S2 - S1 = 04 05</p>
<h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p>S1 X S2 = 01 01 04 05 02 01 04 05 03 01 04 05<br>可以异构<br>列数为两者之和<br>行数为两者乘积<br>列号一版从1开始</p>
<h3 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h3><p>Π，派<br>Πsno,sname(S1) ，表示展示表 sno,sname 这两列的所有记录或元组<br>选择属性列<br>会改变表的结构</p>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>σ ，sigma<br>σ sno=No00003（S1） ,表示选择表名为S1，列明 sno 为 No00003 的记录或元组<br>选择符合的行数</p>
<h3 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h3><p>S1 ⋈ S2 join<br>列数为两者之和减去重复的<br>行数为两个表里面所有的<strong>同名属性列取值相等</strong>的行数<br>可以从 笛卡尔积-&gt; 选择-&gt;投影的方式转换而来<br>性能优于笛卡尔积</p>
]]></content>
  </entry>
  <entry>
    <title>250303-规范化理论</title>
    <url>/post/7dbcde9a.html</url>
    <content><![CDATA[<h2 id="求候选键"><a href="#求候选键" class="headerlink" title="求候选键"></a>求候选键</h2><ul>
<li>找入度为0的属性</li>
<li>如果不满足上面的条件，则尝试便利中间节点（既有入度，也有出度），并入上面的条件，直至该集合能便利所有节点</li>
</ul>
<h2 id="部分函数依赖"><a href="#部分函数依赖" class="headerlink" title="部分函数依赖"></a>部分函数依赖</h2><p>如果候选键是一个合集，且一部分非主属性依赖于候选键的一部分，为部分函数依赖</p>
<h2 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h2><p>A-&gt; B,B-&gt;C 则 A-&gt;C</p>
<h2 id="Armstrong-公里"><a href="#Armstrong-公里" class="headerlink" title="Armstrong 公里"></a>Armstrong 公里</h2><h3 id="自反率"><a href="#自反率" class="headerlink" title="自反率"></a>自反率</h3><p>Y∈X∈U<br>U={ABC}<br>X={AB}<br>Y={A}<br>则，X-&gt; Y<br>身份证号与姓名 可以确认姓名，身份证号也可以确认姓名.</p>
<h3 id="增广律"><a href="#增广律" class="headerlink" title="增广律"></a>增广律</h3><p>若 Z ∈ U 且 X-&gt;Y，则 XZ-&gt;YZ</p>
<h3 id="传递率"><a href="#传递率" class="headerlink" title="传递率"></a>传递率</h3><p>A-&gt; B,B-&gt;C 则 A-&gt;C<br>学号可以推出系号，系号可以推出系名，那么学号可以推出系名</p>
<h3 id="合并规则"><a href="#合并规则" class="headerlink" title="合并规则"></a>合并规则</h3><p>如果 X-&gt;Y，X-&gt;Z 则 X-&gt;YZ</p>
<h3 id="伪传递规则"><a href="#伪传递规则" class="headerlink" title="伪传递规则"></a>伪传递规则</h3><p>如果 X-&gt;Y,WY-&gt;Z，则WX-&gt;Z</p>
<h3 id="分解规则"><a href="#分解规则" class="headerlink" title="分解规则"></a>分解规则</h3><p>如果 X-Y 且 Z ∈ Y,则 X-&gt; Z</p>
<h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>属性都是不可分的原子值</p>
<h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>消除<strong>非主属性</strong>对<strong>候选键</strong>的<strong>部份依赖</strong></p>
<p>单属性候选键不会出现这类问题，只有候选键可能存在这种可能</p>
<p>完全依赖于主键，不存在部分依赖</p>
<p>学号、课程号、成绩、学分</p>
<p>学号,课程号-&gt; 成绩</p>
<p>课程号-&gt; 学分</p>
<p>没有课程的情况下，无法插入学分信息</p>
<p>如果课程没有人报名，那么没有课程信息</p>
<p>解决办法：将课程号与学分单独提取到一张表</p>
<h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>消除<strong>非主属性</strong>对<strong>候选键</strong>的<strong>传递依赖</strong></p>
<p>学校、身份证号、系号、系名 满足第三范式，因为不存在对非主属性的传递依赖</p>
<p>学号、姓名、系号、系名</p>
<p>学号-&gt; 系号</p>
<p>系号-&gt; 系名</p>
<p>学号-&gt; 系名</p>
<p>其中系名依赖于非主属性系号，所以存在对非主属性的传递依赖，不满足第三范式</p>
<p>解决办法：系号、系名 单独组表</p>
<h3 id="BC范式"><a href="#BC范式" class="headerlink" title="BC范式"></a>BC范式</h3><p>完全依赖于候选键</p>
<p>不解决</p>
]]></content>
  </entry>
  <entry>
    <title>250309-习题</title>
    <url>/post/4c13f9cb.html</url>
    <content><![CDATA[<h1 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h1><h2 id="单缓冲区"><a href="#单缓冲区" class="headerlink" title="单缓冲区"></a>单缓冲区</h2><p>（各步骤时间之和） + （块数 - 1） * 缓冲区时间</p>
<h2 id="双缓冲区"><a href="#双缓冲区" class="headerlink" title="双缓冲区"></a>双缓冲区</h2><p>（各个骤时间之和） + （块数 - 1）* 最长时间</p>
<p>50 + 80 + 10 + （9） * 80</p>
]]></content>
  </entry>
  <entry>
    <title>250304-模式分解</title>
    <url>/post/44a7dc70.html</url>
    <content><![CDATA[<h1 id="模式分解"><a href="#模式分解" class="headerlink" title="模式分解"></a>模式分解</h1><h2 id="是否保持函数依赖"><a href="#是否保持函数依赖" class="headerlink" title="是否保持函数依赖"></a>是否保持函数依赖</h2><p>是否能复原为原本的函数依赖</p>
<ul>
<li>冗余依赖不进行推导 </li>
</ul>
<h2 id="是否无损"><a href="#是否无损" class="headerlink" title="是否无损"></a>是否无损</h2><p>分解后是否能还原</p>
<ul>
<li>还原必须包括同名属性列</li>
<li>同名属性列是决定属性</li>
</ul>
<h2 id="表格法"><a href="#表格法" class="headerlink" title="表格法"></a>表格法</h2><p>有一行全为钩的就认为还原</p>
<p>公式法</p>
<h2 id="交集推差集"><a href="#交集推差集" class="headerlink" title="交集推差集"></a>交集推差集</h2><p>只适用于两个表</p>
<p>R = ABC</p>
<p>F = {A-&gt;B}</p>
<p>分解 = {R1(AB),R2(AC)} </p>
<p>R1 ∩ R2 = A</p>
<p>R1 - R2 = B</p>
<p>R2 - R1 = C</p>
<p>得出 A-&gt;B 和 A-&gt;C </p>
<p>其中 A-&gt;B 满足原本的函数依赖，所以无损</p>
<h1 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h1><h2 id="事务-ACID"><a href="#事务-ACID" class="headerlink" title="事务 ACID"></a>事务 ACID</h2><ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<h2 id="产生的并发问题"><a href="#产生的并发问题" class="headerlink" title="产生的并发问题"></a>产生的并发问题</h2><ul>
<li>丢失更新   一级封锁协议预防 加写锁</li>
<li>脏读 二级封锁协议预防 加读锁，读取完毕释放</li>
<li>不可重复读 三级封锁协议预防  加读锁，事务完毕后释放</li>
</ul>
<h1 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h1><ul>
<li>用户标识与鉴定</li>
<li>存取控制（权限控制）</li>
<li>密码存储与传输</li>
<li>视图的保护</li>
<li>审计</li>
</ul>
<h1 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h1><ul>
<li>完全备份</li>
<li>增量备份：比上次备份增加的内容</li>
<li>差量备份：比上次完全备份增加的内容</li>
</ul>
<h1 id="故障与恢复"><a href="#故障与恢复" class="headerlink" title="故障与恢复"></a>故障与恢复</h1><ul>
<li>事物本身的可预期故障</li>
<li>事务本身的不可预期故障</li>
<li>系统故障 ，扫描检查点，已提交的事务 放入 redo，未完成 undo 撤销</li>
<li>介质故障</li>
</ul>
<h1 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h1><ul>
<li>硬件， CPU、内存、硬盘等</li>
<li>系统软件，各种参数，进程优先级</li>
<li>数据库设计</li>
<li><ul>
<li>表与视图，规范化与反规范化</li>
</ul>
</li>
<li><ul>
<li>索引，提高查询效率，减少插入修改删除效率</li>
</ul>
</li>
<li><ul>
<li>SQL语句，各类操作</li>
</ul>
</li>
<li>应用软件，连接池</li>
<li>分布式数据库-通信代价</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>250310-未来信息技术</title>
    <url>/post/bf05ca28.html</url>
    <content><![CDATA[<h1 id="信息物理系统-CPS"><a href="#信息物理系统-CPS" class="headerlink" title="信息物理系统 CPS"></a>信息物理系统 CPS</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>CPS通过集成先进的感知、计算、通信、空制等信息技术和自动控制技术，构建了物理空间与信息空间中人、机、物、环境、信息等要素相互映射、适时交互、高的按需响应、快速迭代、动态优化。效协同的复杂系统实现系统内资源配置和运行</p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>实现资源优化配置</p>
<h2 id="关键目标"><a href="#关键目标" class="headerlink" title="关键目标"></a>关键目标</h2><p>数据的自动流动</p>
<h2 id="体系架构"><a href="#体系架构" class="headerlink" title="体系架构"></a>体系架构</h2><p><img src="../images/article/250310-%E6%9C%AA%E6%9D%A5%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/image.png" alt="alt text"></p>
<h3 id="单元级"><a href="#单元级" class="headerlink" title="单元级"></a>单元级</h3><p>一个智能部件，最小单元</p>
<h3 id="系统级"><a href="#系统级" class="headerlink" title="系统级"></a>系统级</h3><p>多个最小单元通过工业网络连接起来的系统</p>
<h3 id="SoS-级"><a href="#SoS-级" class="headerlink" title="SoS 级"></a>SoS 级</h3><p>多个系统级CPS的有机组合构成</p>
<h2 id="技术体系"><a href="#技术体系" class="headerlink" title="技术体系"></a>技术体系</h2><h3 id="总体技术"><a href="#总体技术" class="headerlink" title="总体技术"></a>总体技术</h3><p>全局相关的</p>
<h3 id="支撑技术"><a href="#支撑技术" class="headerlink" title="支撑技术"></a>支撑技术</h3><p>环境相关的</p>
<h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>业务场景相关</p>
<h3 id="核心要素"><a href="#核心要素" class="headerlink" title="核心要素"></a>核心要素</h3><p>一硬、一软、一网、一平台</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>智能设计、智能生产、智能服务、智能应用</p>
]]></content>
  </entry>
  <entry>
    <title>250317-系统工程2</title>
    <url>/post/78c40a8f.html</url>
    <content><![CDATA[<h1 id="系统工程2"><a href="#系统工程2" class="headerlink" title="系统工程2"></a>系统工程2</h1><h2 id="企业信息化方法"><a href="#企业信息化方法" class="headerlink" title="企业信息化方法"></a>企业信息化方法</h2><ul>
<li>业务流程重构方法</li>
<li>核心业务应用方法</li>
<li>信息系统建设方法</li>
<li>主题数据库方法</li>
<li>资源管理方法</li>
<li>人力资本投资方法</li>
</ul>
<h2 id="信息系统战略规划方法"><a href="#信息系统战略规划方法" class="headerlink" title="信息系统战略规划方法"></a>信息系统战略规划方法</h2><h3 id="关键成功因素法"><a href="#关键成功因素法" class="headerlink" title="关键成功因素法"></a>关键成功因素法</h3><p>抓主要矛盾，确定开发优先级</p>
<h3 id="战略集合转换"><a href="#战略集合转换" class="headerlink" title="战略集合转换"></a>战略集合转换</h3><p>企业战略与信息系统做映射，一一对应</p>
<h3 id="企业系统规划法"><a href="#企业系统规划法" class="headerlink" title="企业系统规划法"></a>企业系统规划法</h3><p>自上而下规划，自下而上实现，U（使用）C（创建） 矩阵</p>
<h2 id="商业智能"><a href="#商业智能" class="headerlink" title="商业智能"></a>商业智能</h2><h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><ul>
<li>面向主题</li>
<li>集成的，整个企业对应一个数据仓库</li>
<li>基本以查询为主</li>
<li>反应历史变化</li>
</ul>
<h4 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h4><ul>
<li>关联分析： 挖掘出隐藏在数据间的关系</li>
<li>序列模式分析：按照时间线进行分析</li>
<li>分类分析： 为记录打标记，然后俺标记分类</li>
<li>聚类分析：起始先聚合，然后再打抱歉</li>
</ul>
<h3 id="数据湖"><a href="#数据湖" class="headerlink" title="数据湖"></a>数据湖</h3><p>未清洗数据，是数据就像里面扔，支持业务处理，分析处理</p>
<h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><p>BPR 业务流程重组：颠覆原有设计<br>BPM 业务流程管理： P（plan）D(DO)C(check)A(act)</p>
<h2 id="企业应用集成"><a href="#企业应用集成" class="headerlink" title="企业应用集成"></a>企业应用集成</h2><ul>
<li>界面集成：统一一个入口</li>
<li>数据集成：不同数据源逻辑或者物理上集成</li>
<li>控制集成：可以调用其他系统方法，有 API</li>
<li>业务流程集成（过程集成）：跨企业，优化流程而非直接调用</li>
<li>门户集成： 将内部系统对接到互联网</li>
</ul>
<h2 id="企业门户"><a href="#企业门户" class="headerlink" title="企业门户"></a>企业门户</h2><ul>
<li>信息门户：网络上的人可以通过一个统一入口访问所需要的信息</li>
<li>知识门户：信息门户的基础上，增加帮助文档，知识库</li>
<li>应用门户：企业信息系统模块放到网络上集成界面</li>
<li>垂直门户：特定行业服务</li>
</ul>
<h2 id="电子商务"><a href="#电子商务" class="headerlink" title="电子商务"></a>电子商务</h2><ul>
<li>B2B: 1688</li>
<li>C2C: 咸鱼</li>
<li>B2C: 京东、天猫</li>
<li>C2B: 个人对企业提供咨询服务</li>
<li>O2O: 团购</li>
</ul>
<h2 id="智能制造体系"><a href="#智能制造体系" class="headerlink" title="智能制造体系"></a>智能制造体系</h2><ul>
<li>设备层：传感器</li>
<li>单元层：单个流程，局部的自动化控制</li>
<li>车间层</li>
<li>企业级</li>
<li>协同层：跨企业共享</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>250311-系统工程</title>
    <url>/post/346b16ea.html</url>
    <content><![CDATA[<h1 id="系统工程"><a href="#系统工程" class="headerlink" title="系统工程"></a>系统工程</h1><h2 id="系统工程方法"><a href="#系统工程方法" class="headerlink" title="系统工程方法"></a>系统工程方法</h2><p><img src="../images/article/250311-%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B/image.png" alt="系统工程方法"></p>
<h3 id="霍尔三维结构"><a href="#霍尔三维结构" class="headerlink" title="霍尔三维结构"></a>霍尔三维结构</h3><p>适合大型工程建设项目</p>
<ul>
<li>逻辑维</li>
<li>时间维</li>
<li>知识维</li>
</ul>
<h3 id="切克兰德方法"><a href="#切克兰德方法" class="headerlink" title="切克兰德方法"></a>切克兰德方法</h3><p>核心不是最优化</p>
<ul>
<li>比较</li>
<li>探寻</li>
</ul>
<h3 id="并行工程方法"><a href="#并行工程方法" class="headerlink" title="并行工程方法"></a>并行工程方法</h3><ul>
<li>制造过程</li>
<li>支持过程</li>
</ul>
<h3 id="综合集成法"><a href="#综合集成法" class="headerlink" title="综合集成法"></a>综合集成法</h3><ul>
<li>简单系统</li>
<li>巨系统</li>
</ul>
<h3 id="WSR（物理、事理、人理）-系统方法"><a href="#WSR（物理、事理、人理）-系统方法" class="headerlink" title="WSR（物理、事理、人理） 系统方法"></a>WSR（物理、事理、人理） 系统方法</h3><ul>
<li>懂物理</li>
<li>明事理</li>
<li>通人理</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期阶段"><a href="#生命周期阶段" class="headerlink" title="生命周期阶段"></a>生命周期阶段</h3><ul>
<li>探索性研究</li>
<li>概念阶段</li>
<li>开发阶段</li>
<li>生产阶段</li>
<li>使用阶段</li>
<li>保障阶段</li>
<li>退役阶段</li>
</ul>
<h3 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h3><ul>
<li>计划驱动方法</li>
<li>渐进迭代是开发</li>
<li>精益开发</li>
<li>敏捷开发</li>
</ul>
<h2 id="信息系统生命周期"><a href="#信息系统生命周期" class="headerlink" title="信息系统生命周期"></a>信息系统生命周期</h2><ul>
<li>生产阶段: 提出想法，对需求进行调研分析</li>
<li>开发阶段: 总体规划-&gt;系统分析-&gt;系统设计-&gt;系统实施-&gt;系统验收</li>
<li>运行阶段: 运行及维护</li>
<li>消亡阶段: 更新改造、功能扩展、报废重建</li>
</ul>
<h2 id="信息系统建设原则"><a href="#信息系统建设原则" class="headerlink" title="信息系统建设原则"></a>信息系统建设原则</h2><ul>
<li>高层管理人员接入原则</li>
<li>用户参与开发原则</li>
<li>自顶向下规划原则</li>
<li>工程化原则</li>
</ul>
<h2 id="信息系统开发方法"><a href="#信息系统开发方法" class="headerlink" title="信息系统开发方法"></a>信息系统开发方法</h2><ul>
<li>结构化法: 自顶向下，逐步求精，面向过程，流程化，改变困难</li>
<li>面向对象法: 自底向上，符合人们的思维习惯</li>
<li>面向服务法：粗粒度、松耦合，标准化、构建化；抽象级别：操作【低】-&gt; 服务【中】-&gt; 业务流程【高】</li>
<li>原型法：针对需求不明确；功能分：水平原型（界面）、垂直原型（发杂算法）；结果分：抛弃式原型、演化式原型</li>
<li>形式化：数学模型化；净室软件工程</li>
</ul>
<h2 id="信息系统的分类"><a href="#信息系统的分类" class="headerlink" title="信息系统的分类"></a>信息系统的分类</h2><ul>
<li>业务处理系统（TPS）: 早期最初期信息系统，数据处理</li>
<li>管理信息系统（MIS）：xx管理系统，开环闭环结构</li>
<li>决策支持系统（DSS）：语言系统、知识系统、问题处理。辅助决策，不做决定</li>
<li>专家系统（ES）：大模型；自动驾驶；做决定；核心：知识库、推理机</li>
<li>办公自动化系统（OAS）：办公用的</li>
<li>企业资源计划（ERP）：供应链集成</li>
</ul>
<h2 id="电子政府"><a href="#电子政府" class="headerlink" title="电子政府"></a>电子政府</h2><ul>
<li>政府（G） 人口是政府对政府的</li>
<li>企业（B）</li>
<li>公民（C）</li>
<li>公务员（E）</li>
</ul>
<h2 id="企业信息化"><a href="#企业信息化" class="headerlink" title="企业信息化"></a>企业信息化</h2><ul>
<li>战略需求</li>
<li>运作需求</li>
<li>技术需求</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>250318-项目管理</title>
    <url>/post/b07558da.html</url>
    <content><![CDATA[<h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><h2 id="盈亏平衡分析"><a href="#盈亏平衡分析" class="headerlink" title="盈亏平衡分析"></a>盈亏平衡分析</h2><p>正常情况：销售额= 固定成本+可变成本+税费+利润</p>
<p>盈亏平衡：销售额= 固定成本+可变成本+税费</p>
<p>其中税费、可变成本是随销售额变化的</p>
<p>可变成本比例 = (可变成本)/(销售额)</p>
<p>税费= 销售额 * 税率</p>
<h2 id="进度管理"><a href="#进度管理" class="headerlink" title="进度管理"></a>进度管理</h2><ul>
<li>活动定义</li>
<li>活动排序</li>
<li>活动的资源估算</li>
<li>活动历时估算</li>
<li>制定计划</li>
<li>进度控制</li>
</ul>
<p>三点估算法= (乐观时间 + 4 * 最可能时间 + 悲观时间) / 6<br><img src="../images/article/250318-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-4.png" alt="alt text"></p>
<h3 id="单代号网络图"><a href="#单代号网络图" class="headerlink" title="单代号网络图"></a>单代号网络图</h3><h3 id="质量管理"><a href="#质量管理" class="headerlink" title="质量管理"></a>质量管理</h3><ul>
<li>质量保证：事前预防，审计</li>
<li>质量控制：针对具体结果，测试<br><img src="../images/article/250318-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image.png" alt="alt text"></li>
</ul>
<h3 id="软件能力成熟度模型集成-CMMI"><a href="#软件能力成熟度模型集成-CMMI" class="headerlink" title="软件能力成熟度模型集成(CMMI)"></a>软件能力成熟度模型集成(CMMI)</h3><ul>
<li>初始级： 混乱</li>
<li>已管理级： 项目级可重复</li>
<li>已定义级：组织级，文档标准化</li>
<li>定量管理级： 量化管理，过程可预测</li>
<li>优化级：持续优化</li>
</ul>
<h3 id="数据管理能力成熟度评估模型（DCMM）"><a href="#数据管理能力成熟度评估模型（DCMM）" class="headerlink" title="数据管理能力成熟度评估模型（DCMM）"></a>数据管理能力成熟度评估模型（DCMM）</h3><p><img src="../images/article/250318-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-1.png" alt="alt text"></p>
<ul>
<li>初始级</li>
<li>受管理级</li>
<li>稳健级</li>
<li>量化管理级</li>
<li>优化级</li>
</ul>
<h2 id="数据治理"><a href="#数据治理" class="headerlink" title="数据治理"></a>数据治理</h2><p><img src="../images/article/250318-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-2.png" alt="alt text"></p>
<h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p><img src="../images/article/250318-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/image-3.png" alt="alt text"></p>
]]></content>
  </entry>
  <entry>
    <title>250320-习题</title>
    <url>/post/7daaca66.html</url>
    <content><![CDATA[<h2 id="SDN网络在控制平面和转发平面分别采用了不同技术，以满足SDN网络控制的全局性和灵活性，业务转发的高效性及高性价比要求。主要关键技术不包括-。"><a href="#SDN网络在控制平面和转发平面分别采用了不同技术，以满足SDN网络控制的全局性和灵活性，业务转发的高效性及高性价比要求。主要关键技术不包括-。" class="headerlink" title="SDN网络在控制平面和转发平面分别采用了不同技术，以满足SDN网络控制的全局性和灵活性，业务转发的高效性及高性价比要求。主要关键技术不包括()。"></a>SDN网络在控制平面和转发平面分别采用了不同技术，以满足SDN网络控制的全局性和灵活性，业务转发的高效性及高性价比要求。主要关键技术不包括()。</h2><ul>
<li>A.控制平面技术</li>
<li>B.数据平面技术</li>
<li>C.应用平面技术</li>
<li>D.转发规则一致性更新技术<br>SDN 的关键技术有 控制平面技术、数据平面技术、转发规则一致性更新技术,不包括应用平面技术</li>
</ul>
<h2 id="为了避免备份数据，或转移存储数据占用过高网络带宽从而影响业务系统正常运作，-首次采用了业务网络与存储网络分开的结构。"><a href="#为了避免备份数据，或转移存储数据占用过高网络带宽从而影响业务系统正常运作，-首次采用了业务网络与存储网络分开的结构。" class="headerlink" title="为了避免备份数据，或转移存储数据占用过高网络带宽从而影响业务系统正常运作，()首次采用了业务网络与存储网络分开的结构。"></a>为了避免备份数据，或转移存储数据占用过高网络带宽从而影响业务系统正常运作，()首次采用了业务网络与存储网络分开的结构。</h2><ul>
<li>A.SAN 存储区域网络，区分与传统网络</li>
<li>B.NAS 附加存储，还在一个网络内</li>
<li>C.SCSI 一种接口</li>
<li>D.DAS 计算机内的直连技术</li>
</ul>
<h2 id="下面用于收取电子邮件的协议是-。"><a href="#下面用于收取电子邮件的协议是-。" class="headerlink" title="下面用于收取电子邮件的协议是()。"></a>下面用于收取电子邮件的协议是()。</h2><ul>
<li>A.SMTP  发送电子邮件</li>
<li>B.SNMP 监控网络协议</li>
<li>C.ICMP ping 命令</li>
<li>D.POP3 收件</li>
</ul>
<h2 id="在-OSI-参考模型中，负责对应用层消息进行压缩、加密的层次是-。"><a href="#在-OSI-参考模型中，负责对应用层消息进行压缩、加密的层次是-。" class="headerlink" title="在 OSI 参考模型中，负责对应用层消息进行压缩、加密的层次是()。"></a>在 OSI 参考模型中，负责对应用层消息进行压缩、加密的层次是()。</h2><ul>
<li>A.传输层 TCP、UDP</li>
<li>B.会话层</li>
<li>C.表示层</li>
<li>D.应用层 FTP、HTTP</li>
</ul>
<p>需要重新记忆 OSI 七层模型</p>
<ul>
<li>传输层：传输比特流</li>
<li>数据链路层 帧的解封装，差错检测，MAC 寻址</li>
<li>网络层 网络路径，IP 地址路由</li>
<li>传输层 端到端传输，可靠传输，流量控制</li>
<li>会话层 建立、维护、终止会话</li>
<li>表示层 数据格式转换，加密，解压缩</li>
<li>应用层 网络服务接口，http</li>
</ul>
<h1 id="在DHCP运行过程中会交互多种报文类型，那么下列哪些个报文不是从客户端发往服务器的"><a href="#在DHCP运行过程中会交互多种报文类型，那么下列哪些个报文不是从客户端发往服务器的" class="headerlink" title="在DHCP运行过程中会交互多种报文类型，那么下列哪些个报文不是从客户端发往服务器的??"></a>在DHCP运行过程中会交互多种报文类型，那么下列哪些个报文不是从客户端发往服务器的??</h1><ul>
<li>A.DHCP NAK</li>
<li>B.DHCP REQUEST</li>
<li>C.DHCP RELEASE</li>
<li>D.DHCP DISCOVER</li>
</ul>
<h1 id="DNS-的迭代查找与递归查找的去呗"><a href="#DNS-的迭代查找与递归查找的去呗" class="headerlink" title="DNS 的迭代查找与递归查找的去呗"></a>DNS 的迭代查找与递归查找的去呗</h1><ul>
<li>迭代查找，A 找到 B，B说我知道在C那里，你去找C</li>
<li>递归查找，A 找到 B，B 知道在C那里，自己去找 C，C 如果有，就返回给B，B 返回给 A</li>
<li>主要的区别在于，需要多次查找的情况下，对客户机来说，是否能一次请求直接找到地址</li>
</ul>
<h1 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a>网络拓扑结构</h1><ul>
<li>总线型 就一个线</li>
<li>星型 所有的都连接一个中心节点</li>
<li>环形  所有的计算机都在一个环上</li>
<li>网状 所有计算机可能瞎J8连</li>
<li>树形 正经网络用的</li>
</ul>
<h1 id="IPv6站点通过IPv4网络通信需要使用隧道技术，常用的3种自动隧道技术不包括-。"><a href="#IPv6站点通过IPv4网络通信需要使用隧道技术，常用的3种自动隧道技术不包括-。" class="headerlink" title="IPv6站点通过IPv4网络通信需要使用隧道技术，常用的3种自动隧道技术不包括()。"></a>IPv6站点通过IPv4网络通信需要使用隧道技术，常用的3种自动隧道技术不包括()。</h1><ul>
<li>A.PPTP隧道 这特么是用来做VPN的，我特么用过都忘了？？</li>
<li>B.6to4隧道</li>
<li>C.ISATAP隧道</li>
<li>D.6over4隧道</li>
</ul>
<h1 id="决策支持系统-DSS-是辅助决策者通过数据、模型和知识，以人机交互方式进行半结构化或非结构化决策的计算机应用系统。其中，-可以建立适当的算法产生决策方案，使决策方案得到较优解。DSS基本结构主要由四个部分组成，即数据库子系统模型库子系统、推理部分和用户接口子系统。DSS用户是依靠-进行决策的。"><a href="#决策支持系统-DSS-是辅助决策者通过数据、模型和知识，以人机交互方式进行半结构化或非结构化决策的计算机应用系统。其中，-可以建立适当的算法产生决策方案，使决策方案得到较优解。DSS基本结构主要由四个部分组成，即数据库子系统模型库子系统、推理部分和用户接口子系统。DSS用户是依靠-进行决策的。" class="headerlink" title="决策支持系统(DSS)是辅助决策者通过数据、模型和知识，以人机交互方式进行半结构化或非结构化决策的计算机应用系统。其中，() 可以建立适当的算法产生决策方案，使决策方案得到较优解。DSS基本结构主要由四个部分组成，即数据库子系统模型库子系统、推理部分和用户接口子系统。DSS用户是依靠()进行决策的。"></a>决策支持系统(DSS)是辅助决策者通过数据、模型和知识，以人机交互方式进行半结构化或非结构化决策的计算机应用系统。其中，() 可以建立适当的算法产生决策方案，使决策方案得到较优解。DSS基本结构主要由四个部分组成，即数据库子系统模型库子系统、推理部分和用户接口子系统。DSS用户是依靠()进行决策的。</h1><p>问题1</p>
<ul>
<li>A.结构化和半结构化决策</li>
<li>B.半结构化决策</li>
<li>C.非结构化决策</li>
<li>D.半结构化和非结构化决策<br>问题2</li>
<li>A.数据库中的数据</li>
<li>B.模型库中的模型</li>
<li>C.知识库中的方法</li>
<li>D.人机交互界面</li>
</ul>
<p>DSS 主要依赖半结构化数据建立适当算法产生决策方案，非结构化数据无没有固定规律可循，无法使用算法</p>
<p>模型是主要决策依据</p>
<h2 id="数据安全治理的目标主要包括-三个方面。数据安全治理体系是组织达成数据安全治理目标需要具备的能力框架，其中数据分类分级属于该体系中的-。"><a href="#数据安全治理的目标主要包括-三个方面。数据安全治理体系是组织达成数据安全治理目标需要具备的能力框架，其中数据分类分级属于该体系中的-。" class="headerlink" title="数据安全治理的目标主要包括()三个方面。数据安全治理体系是组织达成数据安全治理目标需要具备的能力框架，其中数据分类分级属于该体系中的()。"></a>数据安全治理的目标主要包括()三个方面。数据安全治理体系是组织达成数据安全治理目标需要具备的能力框架，其中数据分类分级属于该体系中的()。</h2><p>问题1</p>
<ul>
<li>A.满足用户需求、满足技术安全规范、促进数据开发利用</li>
<li>B.满足合规需求、管理用户安全风险、满足数据安全规范</li>
<li>C.满足用户需求、管理用户安全风险、促进数据开发利用</li>
<li>D.满足合规要求、管理数据安全风险、促进数据开发利用<br>跟用户没关系，带用户的都去刁</li>
</ul>
<p>问题2</p>
<ul>
<li>A.数据全生命周期安全层</li>
<li>B.访问权限控制层</li>
<li>C.数据安全战略层</li>
<li>D.基础安全层</li>
</ul>
<p>根据题目来看，我选的 数据权限控制层。但实际上，没有这一层。<br>主要是三层：数据安全战略（数据安全规划、机构人员管理），数据生命周期安全(字面意义)，基础安全（除了上面这俩以外所有的）</p>
<p><img src="../images/article/250320-%E4%B9%A0%E9%A2%98/image.png" alt="数据安全治理图示"></p>
<p>行，你就背吧，特么的，一背一个不吱声。法克鱿</p>
<h2 id="企业数字化转型的五个发展阶段依次是"><a href="#企业数字化转型的五个发展阶段依次是" class="headerlink" title="企业数字化转型的五个发展阶段依次是"></a>企业数字化转型的五个发展阶段依次是</h2><ul>
<li>初始级发展阶段</li>
<li>单元级发展阶段</li>
<li>流程级发展阶段</li>
<li>网络级发展阶段</li>
<li>生态级发展阶段</li>
</ul>
<p>妹有系统级！！！！！！！妹有！！！！</p>
<h1 id="CRM即客户关系管理，关于它的描述，不正确的是-。供应链应该理解为从源头的供应商开始，到最终的消费者的集成的业务整个流程，这个流程就包括了-。"><a href="#CRM即客户关系管理，关于它的描述，不正确的是-。供应链应该理解为从源头的供应商开始，到最终的消费者的集成的业务整个流程，这个流程就包括了-。" class="headerlink" title="CRM即客户关系管理，关于它的描述，不正确的是()。供应链应该理解为从源头的供应商开始，到最终的消费者的集成的业务整个流程，这个流程就包括了 ()。"></a>CRM即客户关系管理，关于它的描述，不正确的是()。供应链应该理解为从源头的供应商开始，到最终的消费者的集成的业务整个流程，这个流程就包括了 ()。</h1><p>问题1</p>
<ul>
<li>A.CRM可以提高工作效率，节省开支</li>
<li>B.市场营销和客户服务是CRM的支柱性功能</li>
<li>C.客户关系管理系统的核心是客户信息管理， 其目的是与客户建立长期和有效的业务关系，最大限度地增加利润</li>
<li>D.CRM可以提升客户满意度</li>
</ul>
<p>我选的C，核心是客户价值管理，不是信息管理。</p>
<p>问题2</p>
<ul>
<li>A.计划、采购、制造、配送和退货</li>
<li>B.计划、供应、制造、配送和退货</li>
<li>C.计划、供应、生产、配送和退货</li>
<li>D.计划、采购、生产、配送和退货</li>
</ul>
<p>我选的D，但是制造是包括生产、测试、打包等各种活动，所以应该选A</p>
<p>这B问题不是恶心人吗？神经病啊！！！！</p>
<h2 id="企业应用集成是一个战略意义上的方法，它从服务和信息角度将多个信息系统绑定在一起，提供实时交换信息和影响流程的能力。-提供企业之间的信息共享能力，-在用户使用角度能够对集成系统产生一个“整体”的感觉。"><a href="#企业应用集成是一个战略意义上的方法，它从服务和信息角度将多个信息系统绑定在一起，提供实时交换信息和影响流程的能力。-提供企业之间的信息共享能力，-在用户使用角度能够对集成系统产生一个“整体”的感觉。" class="headerlink" title="企业应用集成是一个战略意义上的方法，它从服务和信息角度将多个信息系统绑定在一起，提供实时交换信息和影响流程的能力。()提供企业之间的信息共享能力，()在用户使用角度能够对集成系统产生一个“整体”的感觉。"></a>企业应用集成是一个战略意义上的方法，它从服务和信息角度将多个信息系统绑定在一起，提供实时交换信息和影响流程的能力。()提供企业之间的信息共享能力，()在用户使用角度能够对集成系统产生一个“整体”的感觉。</h2><p>问题1</p>
<ul>
<li>A.API集成</li>
<li>B.数据集成</li>
<li>C.界面集成</li>
<li>D.过程集成<br>问题2</li>
<li>A.API集成</li>
<li>B.数据集成</li>
<li>C.界面集成</li>
<li>D.过程集成</li>
</ul>
<h2 id="第16题-单选题"><a href="#第16题-单选题" class="headerlink" title="第16题(单选题):"></a>第16题(单选题):</h2><p>某大型公司欲开发一个门户系统，该系统为访问结构数据和无结构数据提供统一入口，实现收集、访问、管理和无缝集成。根据这种需求，采用企业()门户解决方案最为合适。</p>
<ul>
<li>A.垂直</li>
<li>B.知识</li>
<li>C.应用</li>
<li>D.信息</li>
</ul>
<p>如果是我，应该是选B或者D。主要区别在于知识门户是在信息门户的基础上增强了一些能力，客户创造、手机、传播企业知识。。但是出题人？你他妈是不是有病啊？</p>
<h1 id="智能制造系统架构从生命周期、系统层级和智能特征3个维度对智能制造所涉及的活动、装备、特征等内容进行描述，主要用于明确智能制造的标准化需求、对象和范围，指导国家智能制造标准体系建设。其中，系统层级是对与企业生产活动相关的组织结构的层级划分，-是负责企业内处理信息、实现监测和控制物理流程的层级。"><a href="#智能制造系统架构从生命周期、系统层级和智能特征3个维度对智能制造所涉及的活动、装备、特征等内容进行描述，主要用于明确智能制造的标准化需求、对象和范围，指导国家智能制造标准体系建设。其中，系统层级是对与企业生产活动相关的组织结构的层级划分，-是负责企业内处理信息、实现监测和控制物理流程的层级。" class="headerlink" title="智能制造系统架构从生命周期、系统层级和智能特征3个维度对智能制造所涉及的活动、装备、特征等内容进行描述，主要用于明确智能制造的标准化需求、对象和范围，指导国家智能制造标准体系建设。其中，系统层级是对与企业生产活动相关的组织结构的层级划分，()是负责企业内处理信息、实现监测和控制物理流程的层级。"></a>智能制造系统架构从生命周期、系统层级和智能特征3个维度对智能制造所涉及的活动、装备、特征等内容进行描述，主要用于明确智能制造的标准化需求、对象和范围，指导国家智能制造标准体系建设。其中，系统层级是对与企业生产活动相关的组织结构的层级划分，()是负责企业内处理信息、实现监测和控制物理流程的层级。</h1><ul>
<li>A.设备层 最小层</li>
<li>B.单元层 控制设备的层级</li>
<li>车间层 面向车间与工厂的层级</li>
<li>C.企业层 面向企业管理的层级</li>
<li>D.协同层 最高层，内部与外部信息共享</li>
</ul>
<p>【考生回忆版】企业应用集成EAI构建统一标准的基础平台，将进程、软件、标准和硬件联合起来，提供4个层次的服务，从下至上依次为()。<br>A.通讯服务、信息传递与转化服务、流程控制服务、应用连接服务<br>B.通讯服务、流程控制服务、应用连接服务、信息传递与转化服务<br>C.通讯服务、应用连接服务、信息传递与转化服务、流程控制服务<br>D.通讯服务、信息传递与转化服务、应用连接服务、流程控制服务</p>
<p>应该选D<br>通讯服务、信息传递与转化服务、应用连接服务、流程控制服务 。但是完全不记得有这条</p>
]]></content>
  </entry>
  <entry>
    <title>250321-大数据</title>
    <url>/post/d51c5f51.html</url>
    <content><![CDATA[<h1 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h1><h2 id="特点-5V"><a href="#特点-5V" class="headerlink" title="特点 5V"></a>特点 5V</h2><ul>
<li>大规模</li>
<li>高速化</li>
<li>多样化</li>
<li>价值性</li>
<li>真实性</li>
</ul>
<h2 id="步骤-（OLAP）"><a href="#步骤-（OLAP）" class="headerlink" title="步骤 （OLAP）"></a>步骤 （OLAP）</h2><ul>
<li>数据获取/记录</li>
<li>信息抽取/清洗/标注</li>
<li>数据集成/聚集/表现</li>
<li>分析/建模</li>
<li>解释(业务专家)</li>
</ul>
<h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><ul>
<li>数据获取问题</li>
<li>数据结构问题</li>
<li>数据集成问题</li>
<li>数据分析、组织、抽取、建模</li>
<li>数据呈现</li>
</ul>
<h2 id="Lambda-架构"><a href="#Lambda-架构" class="headerlink" title="Lambda 架构"></a>Lambda 架构</h2><ul>
<li>批处理层 hdaop</li>
<li>加速层 spark</li>
<li>服务层 Hbase<br><img src="../images/article/250321-%E5%A4%A7%E6%95%B0%E6%8D%AE/image.png" alt="架构"><br><img src="../images/article/250321-%E5%A4%A7%E6%95%B0%E6%8D%AE/image-1.png" alt="优缺点"></li>
</ul>
<h2 id="Kappa-架构"><a href="#Kappa-架构" class="headerlink" title="Kappa 架构"></a>Kappa 架构</h2><p>取消批处理层<br><img src="../images/article/250321-%E5%A4%A7%E6%95%B0%E6%8D%AE/image-2.png" alt="架构"><br><img src="../images/article/250321-%E5%A4%A7%E6%95%B0%E6%8D%AE/image-3.png" alt="优缺点"></p>
<h2 id="架构对比"><a href="#架构对比" class="headerlink" title="架构对比"></a>架构对比</h2><p><img src="../images/article/250321-%E5%A4%A7%E6%95%B0%E6%8D%AE/image-4.png" alt="对比"></p>
]]></content>
  </entry>
  <entry>
    <title>250321-知识产权与标准化</title>
    <url>/post/db086a0a.html</url>
    <content><![CDATA[<h1 id="知识产权与标准化"><a href="#知识产权与标准化" class="headerlink" title="知识产权与标准化"></a>知识产权与标准化</h1><p><img src="../images/article/250321-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%8C%96/image.png" alt="alt text"></p>
<h2 id="保护期限"><a href="#保护期限" class="headerlink" title="保护期限"></a>保护期限</h2><ul>
<li>著作权 重要节点是50年</li>
<li>商标是 10年 可延期</li>
<li>发明专利是 20年</li>
<li>实用型与外观设计 10 年</li>
</ul>
<p><img src="../images/article/250321-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%8C%96/image-1.png" alt="alt text"></p>
<h2 id="知识产权人"><a href="#知识产权人" class="headerlink" title="知识产权人"></a>知识产权人</h2><ul>
<li>合同是第一原则</li>
<li>除了署名，都是单位的</li>
<li>软件开发，没约定，归属于创作方</li>
<li>商标与专利 谁先申请给谁</li>
</ul>
<p><img src="../images/article/250321-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%8C%96/image-2.png" alt="alt text"></p>
<h2 id="侵权判定"><a href="#侵权判定" class="headerlink" title="侵权判定"></a>侵权判定</h2><p><img src="../images/article/250321-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%8C%96/image-3.png" alt="alt text"><br><img src="../images/article/250321-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83%E4%B8%8E%E6%A0%87%E5%87%86%E5%8C%96/image-4.png" alt="alt text"></p>
]]></content>
  </entry>
  <entry>
    <title>250324-软件工程</title>
    <url>/post/ccbac791.html</url>
    <content><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><h2 id="开发过程模型"><a href="#开发过程模型" class="headerlink" title="开发过程模型"></a>开发过程模型</h2><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><ul>
<li>需求分析</li>
<li>软件设计</li>
<li>程序设计</li>
<li>编码实现</li>
<li>单元测试</li>
<li>集成测试</li>
<li>系统测试</li>
<li>运行维护</li>
</ul>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>严格区分阶段，只适合需求明确的项目</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>正确性难以确定</li>
<li>串行化，很长才能看到结果</li>
<li>每个阶段完全解决这个阶段的问题（不现实）</li>
</ul>
<h3 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h3><ul>
<li>需求分析（主要针对该项）</li>
<li>软件涉及</li>
<li>程序设计</li>
</ul>
<h4 id="两个阶段"><a href="#两个阶段" class="headerlink" title="两个阶段"></a>两个阶段</h4><ul>
<li>原型开发阶段</li>
<li>目标软件开发阶段</li>
</ul>
<h4 id="原型分类"><a href="#原型分类" class="headerlink" title="原型分类"></a>原型分类</h4><ul>
<li>抛弃型原型</li>
<li>演化型原型</li>
</ul>
<p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image.png" alt="alt text"></p>
<h3 id="V-模型"><a href="#V-模型" class="headerlink" title="V 模型"></a>V 模型</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-2.png" alt="alt text"><br>测试贯穿于始终</p>
<p>测试分阶段，测试计划提前</p>
<h3 id="W-模型"><a href="#W-模型" class="headerlink" title="W 模型"></a>W 模型</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-3.png" alt="W模型"></p>
<p>测试和开发进行</p>
<h3 id="迭代和增量"><a href="#迭代和增量" class="headerlink" title="迭代和增量"></a>迭代和增量</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-4.png" alt="迭代与增量"></p>
<h4 id="增量"><a href="#增量" class="headerlink" title="增量"></a>增量</h4><p>一块一块做增量</p>
<h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>逐步进化</p>
<h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-5.png" alt="螺旋模型"></p>
<p>以快速原型模型为基础+瀑布模型</p>
<p>考虑了风险问题</p>
<h3 id="构建组装模型"><a href="#构建组装模型" class="headerlink" title="构建组装模型"></a>构建组装模型</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-6.png" alt="构建组装模型"><br>示例：方舱医院、积木 </p>
<p>优点：易扩展、易重用、降低成本、安排任务更灵活</p>
<p>缺点：需要经验丰富的架构师、设计不好的构建难重用、强调重用牺牲其他指标、第三方构建质量难控制</p>
<h3 id="基于构建的软件工程（CBSE）"><a href="#基于构建的软件工程（CBSE）" class="headerlink" title="基于构建的软件工程（CBSE）"></a>基于构建的软件工程（CBSE）</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-7.png" alt="CBSE"></p>
<ul>
<li>购买而不是重新构造（不要重新造轮子 ）<br><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-8.png" alt="要素"></li>
</ul>
<h4 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h4><ul>
<li>顺序组装 </li>
<li>层次组装（必须分层，层次之间接口兼容）</li>
<li>叠加组装（多个合并新的构建、对外提供接口，不需明确顺序）<h4 id="不兼容"><a href="#不兼容" class="headerlink" title="不兼容"></a>不兼容</h4></li>
<li>参数不兼容(操作有相同的名字，但是参数类型和参数个数不相同)</li>
<li>操作不兼容(操作名有不同)</li>
<li>操作不完备(有些操作无法完成)</li>
</ul>
<h3 id="快速应用开发模型（RAD）"><a href="#快速应用开发模型（RAD）" class="headerlink" title="快速应用开发模型（RAD）"></a>快速应用开发模型（RAD）</h3><ul>
<li>SDLC 瀑布</li>
<li>CBSD 基于构建</li>
</ul>
<h3 id="统一过程（UP）"><a href="#统一过程（UP）" class="headerlink" title="统一过程（UP）"></a>统一过程（UP）</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-9.png" alt="核心工作流"></p>
<h4 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h4><ul>
<li>用例驱动</li>
<li>以架构为中心</li>
<li>迭代和增量<h4 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h4></li>
<li>初始（需求）</li>
<li>细化（设计确定系统架构）</li>
<li>构造（构建的开发、构建）</li>
<li>移交</li>
</ul>
<h4 id="核心工作流"><a href="#核心工作流" class="headerlink" title="核心工作流"></a>核心工作流</h4><ul>
<li>业务建模</li>
<li>需求</li>
<li>分析与设计</li>
<li>实现</li>
<li>测试</li>
<li>部署</li>
<li>配置与变更管理</li>
<li>项目管理</li>
<li>环境</li>
</ul>
<h3 id="敏捷方法"><a href="#敏捷方法" class="headerlink" title="敏捷方法"></a>敏捷方法</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-10.png" alt="敏捷方法"></p>
<h3 id="敏捷方法-XP"><a href="#敏捷方法-XP" class="headerlink" title="敏捷方法-XP"></a>敏捷方法-XP</h3><h4 id="价值观"><a href="#价值观" class="headerlink" title="价值观"></a>价值观</h4><ul>
<li>沟通（加强面对面沟通）</li>
<li>简单（不过度设计）</li>
<li>反馈（及时反馈）</li>
<li>勇气（接受变更的勇气）</li>
</ul>
<h3 id="敏捷方法（SCRUM）"><a href="#敏捷方法（SCRUM）" class="headerlink" title="敏捷方法（SCRUM）"></a>敏捷方法（SCRUM）</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-11.png" alt="SCRUM"><br><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-12.png" alt="alt text"></p>
<h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-13.png" alt="alt text"></p>
<ul>
<li>实现级（语法树）</li>
<li>结构级（程序分量之间相互联系关系）</li>
<li>功能级（程序段）</li>
<li>领域级（应用领域概念之间对应关系）</li>
</ul>
<p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-14.png" alt="alt text"></p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>重构（同一抽象级别，例如算法重写，输入输出不变）</li>
<li>设计恢复（借助工具抽象出有关数据设计）</li>
<li>逆向工程（设计的恢复过程）</li>
<li>正向工程（改变重构，改善整体质量）</li>
<li>再工程（）</li>
</ul>
<h3 id="净室软件工程"><a href="#净室软件工程" class="headerlink" title="净室软件工程"></a>净室软件工程</h3><p><img src="../images/article/250324-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-15.png" alt="净室软件工程"></p>
]]></content>
  </entry>
  <entry>
    <title>250324-需求工程</title>
    <url>/post/4d4136bb.html</url>
    <content><![CDATA[<h1 id="需求工程"><a href="#需求工程" class="headerlink" title="需求工程"></a>需求工程</h1><h2 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h2><p><img src="../images/article/250324-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/image.png" alt="需求阶段"></p>
<ul>
<li>需求获取</li>
<li>需求分析</li>
<li>形成需求规格</li>
<li>需求确认与验证(形成需求基线)</li>
<li>需求管理(对基线的管理)</li>
</ul>
<h3 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h3><p><img src="../images/article/250324-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/image-1.png" alt="需求获取"></p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li>用户面谈（成本高，需要专业领域知识支撑）</li>
<li>联合需求计划（高度组织的群体会议，消除分歧，做好交互）</li>
<li>问卷调查(用户多，成本低)</li>
<li>现场观察（针对较为复杂的流程和操作）</li>
<li>原型化方法（解决早期需求不确定问题）</li>
<li>头脑风暴法(发散思维，产生新的观点)</li>
</ul>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="../images/article/250324-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/image-2.png" alt="需求分析"></p>
<ul>
<li>功能模型（数据流图 DFD）</li>
<li>数据模型（关系模型ER）</li>
<li>行为模型(状态转换图)<br>通过数据字典进行联系</li>
</ul>
<h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="../images/article/250324-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/image-3.png" alt="UML"></p>
<h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><ul>
<li>结构事务（静态部分） </li>
<li>行为事务（时间和空间上的动作）</li>
<li>分组事务（文件夹）</li>
<li>注释事务</li>
</ul>
<h5 id="图"><a href="#图" class="headerlink" title="图"></a>图</h5><p><img src="../images/article/250324-%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B/image-4.png" alt="UML图"></p>
<p>需要熟记</p>
<ul>
<li>静态图</li>
<li>行为图</li>
</ul>
<h1 id="需求跟踪"><a href="#需求跟踪" class="headerlink" title="需求跟踪"></a>需求跟踪</h1><h2 id="跟踪矩阵"><a href="#跟踪矩阵" class="headerlink" title="跟踪矩阵"></a>跟踪矩阵</h2><p><img src="../images/article/250325-%E9%9C%80%E6%B1%82%E8%B7%9F%E8%B8%AA/image.png" alt="alt text"></p>
<h2 id="需求变更管理"><a href="#需求变更管理" class="headerlink" title="需求变更管理"></a>需求变更管理</h2><p><img src="../images/article/250325-%E9%9C%80%E6%B1%82%E8%B7%9F%E8%B8%AA/image-1.png" alt="alt text"></p>
<ul>
<li>问题分析和变更描述</li>
<li>变更分析和成本计算</li>
<li>变更实现</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>250325-系统涉及</title>
    <url>/post/c3ecee8d.html</url>
    <content><![CDATA[<h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><p><img src="../images/article/250325-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image.png" alt="界面设计"></p>
<ul>
<li>置于用户控制之下（典型反例：各种广告）</li>
<li>减少用户的记忆负担（默认的一些图标，X是关闭，之类）</li>
<li>保持界面的一致性（）</li>
</ul>
<h2 id="结构化设计"><a href="#结构化设计" class="headerlink" title="结构化设计"></a>结构化设计</h2><p><img src="../images/article/250325-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-1.png" alt="alt text"></p>
<p>自顶向下，逐步分解求精</p>
<ul>
<li>概要设计（分解模块，模块之间的关系）</li>
<li>详细设计（具体任务选择合适的处理办法）<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3></li>
<li>模块独立性原则;高内聚(只做一件事)，低耦合()</li>
<li>模块保持的大小适中</li>
<li>多扇入，少扇出(自己本身是高度复用，少调用别人)</li>
<li>深度和宽度均不宜过高</li>
</ul>
<h3 id="内聚程度（从高到低）"><a href="#内聚程度（从高到低）" class="headerlink" title="内聚程度（从高到低）"></a>内聚程度（从高到低）</h3><p><img src="../images/article/250325-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-2.png" alt="内聚"></p>
<ul>
<li><strong>功能内聚</strong>（单一功能）</li>
<li><strong>顺序内聚</strong>（顺序执行）</li>
<li>通信内聚（一个数据结构）</li>
<li>过程内聚(特定次序执行，不可以调整)</li>
<li><strong>时间内聚</strong>（数据初始化，在同一段时间内完成）</li>
<li>逻辑内聚（一组任务）</li>
<li><strong>偶然内聚</strong></li>
</ul>
<h3 id="低耦合（从低到高）"><a href="#低耦合（从低到高）" class="headerlink" title="低耦合（从低到高）"></a>低耦合（从低到高）</h3><ul>
<li><strong>非直接耦合</strong> (与其他模块没有直接关系)</li>
<li><strong>数据耦合</strong>（传递简单参数）</li>
<li><strong>标记耦合</strong>(传递结构体)</li>
<li><strong>控制耦合</strong>(传递控制流程信息，比如 传递了5，但是5是用来做判断流程)</li>
<li>外部耦合（全局变量）</li>
<li>公共耦合（公共数据区域）</li>
<li><strong>内容耦合</strong> （访问另一模块的内部数据）</li>
</ul>
<h2 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h2><h3 id="类的分类"><a href="#类的分类" class="headerlink" title="类的分类"></a>类的分类</h3><p><img src="../images/article/250325-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-3.png" alt="alt text"></p>
<ul>
<li>边界类（interface）</li>
<li>控制类（应用逻辑、业务逻辑、数据库访问逻辑）</li>
<li>实体类（用户类）<h3 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h3><img src="../images/article/250325-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-4.png" alt="alt text"></li>
</ul>
<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><p><img src="../images/article/250325-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/image-5.png" alt="alt text"></p>
<h3 id="白盒测试与黑盒测试"><a href="#白盒测试与黑盒测试" class="headerlink" title="白盒测试与黑盒测试"></a>白盒测试与黑盒测试</h3><ul>
<li>白盒测试（结构测试）</li>
<li><ul>
<li>路径覆盖</li>
</ul>
</li>
<li><ul>
<li>逻辑覆盖</li>
</ul>
</li>
<li>黑盒测试（功能测试）</li>
<li><ul>
<li>等价类划分（不同类的问题）</li>
</ul>
</li>
<li><ul>
<li>边界值分析</li>
</ul>
</li>
</ul>
<h3 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h3><ul>
<li>人工</li>
<li>自动化</li>
<li><ul>
<li>先写脚本-&gt; 自动化执行</li>
</ul>
</li>
<li><ul>
<li>不适合项目周期短，需求变动频繁</li>
</ul>
</li>
<li><ul>
<li>单元自动化测试、接口自动化测试、UI 自动化测试</li>
</ul>
</li>
</ul>
<h3 id="软件测试阶段"><a href="#软件测试阶段" class="headerlink" title="软件测试阶段"></a>软件测试阶段</h3><ul>
<li>单元测试(详细设计,内部模块的测试)</li>
<li>集成测试(概要设计，模块之间的测试)</li>
<li>系统测试(需求分档，功能测试、性能测试、验收测试、压力测试等)</li>
<li>确认测试（需求文档，新版教程移除）</li>
</ul>
<h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><ul>
<li>一次性组装(风险高)</li>
<li><ul>
<li>自顶向下(可能需要加桩模块)</li>
</ul>
</li>
<li><ul>
<li>自底向下(模拟数据)</li>
</ul>
</li>
<li>增量式组装(测试全面)</li>
</ul>
<h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><ul>
<li>功能测试</li>
<li>性能测试</li>
<li><ul>
<li>负载测试（各种工作负载性能）</li>
</ul>
</li>
<li><ul>
<li>压力测试(测上线，极值，系统瓶颈)</li>
</ul>
</li>
<li><ul>
<li>强度测试(测下线，极值，资源特别低情况运行)</li>
</ul>
</li>
<li><ul>
<li>容量测试（并发测试）</li>
</ul>
</li>
<li><ul>
<li>可靠性测试(MTTF之类的参数)</li>
</ul>
</li>
<li>健壮性测试</li>
<li>用户界面测试</li>
<li>安全性测试</li>
<li>安装与反安装测试</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>250326-嵌入式技术</title>
    <url>/post/33695863.html</url>
    <content><![CDATA[<h1 id="嵌入式技术"><a href="#嵌入式技术" class="headerlink" title="嵌入式技术"></a>嵌入式技术</h1><h2 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h2><p><img src="../images/article/250326-%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%8A%80%E6%9C%AF/image.png" alt=" "></p>
<ul>
<li>应用层</li>
<li>中间件层</li>
<li>操作系统层</li>
<li>抽象层</li>
<li>硬件层</li>
</ul>
<h2 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h2><ul>
<li>片级初始化</li>
<li>版级初始化</li>
<li>系统初始化</li>
</ul>
<h2 id="系统部件"><a href="#系统部件" class="headerlink" title="系统部件"></a>系统部件</h2><ul>
<li>嵌入式微处理器</li>
<li>存储器</li>
<li>内外总线逻辑</li>
<li>定时计数器</li>
<li>看门狗电路</li>
<li>IO 接口</li>
<li>外部设备</li>
<li>其他部件</li>
</ul>
<h2 id="典型架构"><a href="#典型架构" class="headerlink" title="典型架构"></a>典型架构</h2><h3 id="层次化模式架构"><a href="#层次化模式架构" class="headerlink" title="层次化模式架构"></a>层次化模式架构</h3><p>层次化模式，<br>调用方式分两种</p>
<p>封闭型，智能调用同层、下一层，封装，移植性好。</p>
<p>快放型，可以调用任意一层，性能好</p>
<h3 id="递归模式架构"><a href="#递归模式架构" class="headerlink" title="递归模式架构"></a>递归模式架构</h3><ul>
<li>自顶向下，没有便宜用例中规定的需求</li>
<li>自底向上，最终开发者会达到子系统级的抽象</li>
</ul>
<h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><ul>
<li>单片微型计算机</li>
<li>微控制器</li>
<li>片上系统</li>
<li>以 Internet 为基础的嵌入式系统</li>
<li>智能化、云技术推动下的嵌入式系统</li>
</ul>
<h2 id="微处理器"><a href="#微处理器" class="headerlink" title="微处理器"></a>微处理器</h2><ul>
<li>微处理器 MPU</li>
<li>微控制器 单片机 MCU</li>
<li>信号处理器 DSP</li>
<li>图形处理器 GPU</li>
<li>片上系统 SOC</li>
</ul>
<h2 id="嵌入式操作系统定义及特点"><a href="#嵌入式操作系统定义及特点" class="headerlink" title="嵌入式操作系统定义及特点"></a>嵌入式操作系统定义及特点</h2><h3 id="时间敏感程度"><a href="#时间敏感程度" class="headerlink" title="时间敏感程度"></a>时间敏感程度</h3><ul>
<li>嵌入式非实时系统</li>
<li>嵌入式实时操作系统</li>
</ul>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul>
<li>非安全攸关系统</li>
<li>安全攸关系统</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>微型化</li>
<li>代码质量高</li>
<li>实时性强</li>
<li>专业化</li>
<li>实时性强</li>
<li>可裁剪、可配置（可定制）</li>
</ul>
<h2 id="操作系统内核架构"><a href="#操作系统内核架构" class="headerlink" title="操作系统内核架构"></a>操作系统内核架构</h2><h3 id="宏内核"><a href="#宏内核" class="headerlink" title="宏内核"></a>宏内核</h3><p>内核实现的功能复杂度高，用户空间只放应用程序</p>
<p>运行效率高，占用资源多，不易裁剪，稳定性安全性相对差</p>
<h3 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h3><p>内核实现的功能简洁，大部分服务放在用户空间，服务使用C/S架构</p>
<p>结构清晰，有利于协作开发，方便裁剪移植，可靠性安全性高，适用于分布式系统(C/S架构)，性能相对差</p>
<h2 id="嵌入式数据库分类"><a href="#嵌入式数据库分类" class="headerlink" title="嵌入式数据库分类"></a>嵌入式数据库分类</h2><ul>
<li>内存方式</li>
<li>文件方式</li>
<li>网络方式</li>
</ul>
<h2 id="嵌入式软件开发"><a href="#嵌入式软件开发" class="headerlink" title="嵌入式软件开发"></a>嵌入式软件开发</h2><p><img src="../images/article/250326-%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%8A%80%E6%9C%AF/image-1.png" alt="alt text"></p>
]]></content>
  </entry>
  <entry>
    <title>250328-案例技巧</title>
    <url>/post/3388e677.html</url>
    <content><![CDATA[<h2 id="结构化需求分析"><a href="#结构化需求分析" class="headerlink" title="结构化需求分析"></a>结构化需求分析</h2><h3 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h3><p><img src="../images/article/250328-%E6%A1%88%E4%BE%8B%E6%8A%80%E5%B7%A7/image.png" alt="数据流图"></p>
<h4 id="四要素"><a href="#四要素" class="headerlink" title="四要素"></a>四要素</h4><ul>
<li>数据流：数据流向，没有控制信息 </li>
<li>加工：功能块</li>
<li>数据存储：数据库、数据表</li>
<li>外部实体：使用这个系统的实体</li>
</ul>
<h4 id="数据平衡"><a href="#数据平衡" class="headerlink" title="数据平衡"></a>数据平衡</h4><ul>
<li>父子平衡</li>
<li>没有输入有输出</li>
<li>没有输出有输入</li>
<li>输入输入不对版</li>
</ul>
<h2 id="面向对象分析-UML"><a href="#面向对象分析-UML" class="headerlink" title="面向对象分析 UML"></a>面向对象分析 UML</h2><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p><img src="../images/article/250328-%E6%A1%88%E4%BE%8B%E6%8A%80%E5%B7%A7/image-1.png" alt="用例图"></p>
<ul>
<li>参与者（使用者，外部实体）</li>
<li>用例（加工，功能块）</li>
<li><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4></li>
<li>识别参与者</li>
<li>合并需求获得用例</li>
<li>细化用例描述(需要细节才知道做什么)</li>
<li>调整用例模型（包含、扩展、泛化关系优化）</li>
</ul>
<h4 id="用例关系"><a href="#用例关系" class="headerlink" title="用例关系"></a>用例关系</h4><p><img src="../images/article/250328-%E6%A1%88%E4%BE%8B%E6%8A%80%E5%B7%A7/image-2.png" alt="用例关系"><br><img src="../images/article/250328-%E6%A1%88%E4%BE%8B%E6%8A%80%E5%B7%A7/image-3.png" alt="用例关系"></p>
<ul>
<li>包含（使用关系）：多个功能的共性抽取出来，都涉及到公共用例，必然</li>
<li>扩展关系: 有时要用到某种职能，可选</li>
<li>泛化：提高通用性，父子关系，如果没有父子关系就是包含</li>
</ul>
<h3 id="类图和对象图"><a href="#类图和对象图" class="headerlink" title="类图和对象图"></a>类图和对象图</h3><p><img src="../images/article/250328-%E6%A1%88%E4%BE%8B%E6%8A%80%E5%B7%A7/image-4.png" alt="类图与对象图"></p>
<ul>
<li>类名</li>
<li>多重度</li>
<li>关系</li>
</ul>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p><img src="../images/article/250328-%E6%A1%88%E4%BE%8B%E6%8A%80%E5%B7%A7/image-5.png" alt="alt text"><br>语义强度（两者之间关系的稳定度），从弱到强</p>
<ul>
<li>依赖关系：一个事物影响到另外一个事物</li>
<li>关联关系：描述了一组链，链是对象之间的连接</li>
<li><ul>
<li>聚合关系：部分与整体生命周期不同</li>
</ul>
</li>
<li><ul>
<li>组合关系：部分和整体生命周期相同</li>
</ul>
</li>
<li>实现关系：接口和类的关系，父类改成给你了接口（抽象类，实现类的关系）</li>
<li>泛化关系：特殊（子类）和一般（父类）关系</li>
</ul>
<p>菱形，箭头部分是整体，另外一遍是部分</p>
]]></content>
  </entry>
  <entry>
    <title>250328-软件工程</title>
    <url>/post/e64f56bc.html</url>
    <content><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><h2 id="系统运行与软件维护"><a href="#系统运行与软件维护" class="headerlink" title="系统运行与软件维护"></a>系统运行与软件维护</h2><h3 id="遗留系统演化策略"><a href="#遗留系统演化策略" class="headerlink" title="遗留系统演化策略"></a>遗留系统演化策略</h3><p><img src="../images/article/250328-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-3.png" alt="演化策略"></p>
<h4 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h4><ul>
<li>技术水平</li>
<li>业务价值</li>
</ul>
<h4 id="四个象限"><a href="#四个象限" class="headerlink" title="四个象限"></a>四个象限</h4><ul>
<li>淘汰：低水平、低价值 </li>
<li>集成：高水平、低价值，针对信息孤岛</li>
<li>继承：低水平、高价值，意味着完全兼容遗留的功能模型、数据模型。集成的是模型，不是系统</li>
<li>改造：高水平、高价值，增强现有系统</li>
</ul>
<h3 id="转换策略"><a href="#转换策略" class="headerlink" title="转换策略"></a>转换策略</h3><ul>
<li>直接转换策略：停掉老的，开始新的，风险高</li>
<li>并行转换策略：有一段时间，两个系统并行运行，新系统稳定后，关闭老系统，成本高</li>
<li>分段转换策略：一段一段进行转换，或者分试点</li>
</ul>
<h3 id="影响可软件维护的因素"><a href="#影响可软件维护的因素" class="headerlink" title="影响可软件维护的因素"></a>影响可软件维护的因素</h3><p><img src="../images/article/250328-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-4.png" alt="可维护性的因素"></p>
<h4 id="一组"><a href="#一组" class="headerlink" title="一组"></a>一组</h4><ul>
<li>可理解性：源码与相关文档是否容易理解</li>
<li>可修改性：修改的难易程度</li>
<li>可测试性：验证软件程序的难易程度</li>
</ul>
<h4 id="二组"><a href="#二组" class="headerlink" title="二组"></a>二组</h4><ul>
<li>可靠性</li>
<li>可移植性</li>
</ul>
<h3 id="软件维护类型"><a href="#软件维护类型" class="headerlink" title="软件维护类型"></a>软件维护类型</h3><ul>
<li>正确性维护：修 BUG</li>
<li>适应性维护：应变，适应环境变化</li>
<li>完善性维护：新需求，扩展功能，改善性能</li>
<li>预防性维护：针对未来，专用改通用</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>250328-软件架构</title>
    <url>/post/f6c777c5.html</url>
    <content><![CDATA[<h2 id="架构描述语言-ADL"><a href="#架构描述语言-ADL" class="headerlink" title="架构描述语言 ADL"></a>架构描述语言 ADL</h2><p><img src="../images/article/250328-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image.png" alt="ADL"></p>
<h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ul>
<li>构件：用来实现功能的单元</li>
<li>连接件：连接构件的部件</li>
<li>架构配置：描述体系结构的构建与连接件的连接图</li>
</ul>
<h2 id="4-1-视图"><a href="#4-1-视图" class="headerlink" title="4+1 视图"></a>4+1 视图</h2><p><img src="../images/article/250328-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-1.png" alt="4+1视图"></p>
<ul>
<li>逻辑视图：最终用户、主要表示功能（类与对象）</li>
<li>开发视图：开发软院、软件管理（源代码结构，软件之间的配合、组装）</li>
<li>进程视图（过程视图）：继承人员、性能</li>
<li>物理视图：系统工程人员(安装、拓扑、通信)</li>
</ul>
<h2 id="基于架构的软件开发方法"><a href="#基于架构的软件开发方法" class="headerlink" title="基于架构的软件开发方法"></a>基于架构的软件开发方法</h2><p><img src="../images/article/250328-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-2.png" alt="基于架构的软件开发方法"></p>
<ul>
<li>ABSD 方法是架构驱动，即去强调</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>250331-基于架构的软件开发方法</title>
    <url>/post/ec11d133.html</url>
    <content><![CDATA[<h1 id="基于架构的软件开发方法-ABSD"><a href="#基于架构的软件开发方法-ABSD" class="headerlink" title="基于架构的软件开发方法(ABSD)"></a>基于架构的软件开发方法(ABSD)</h1><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image.png" alt="alt text"></p>
<h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-1.png" alt="alt text"></p>
<ul>
<li>架构需求</li>
<li>架构设计</li>
<li>架构文档化</li>
<li>架构复审</li>
<li>架构实现</li>
<li>架构演化</li>
</ul>
<p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-2.png" alt="alt text"></p>
<p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-3.png" alt="alt text"></p>
<p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-4.png" alt="alt text"></p>
<h1 id="软件架构风格"><a href="#软件架构风格" class="headerlink" title="软件架构风格"></a>软件架构风格</h1><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-5.png" alt="alt text"></p>
<h2 id="数据流风格"><a href="#数据流风格" class="headerlink" title="数据流风格"></a>数据流风格</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-6.png" alt="alt text"><br><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-7.png" alt="alt text"></p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>批处理：整体处理，没有用户交互</li>
<li>管道-过滤器：流式处理，少量用户交互</li>
</ul>
<h2 id="调用-返回风格"><a href="#调用-返回风格" class="headerlink" title="调用/返回风格"></a>调用/返回风格</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-8.png" alt="调用返回风格"></p>
<ul>
<li>面向过程</li>
<li>面向对象</li>
<li>分层架构<br><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-9.png" alt="分层架构风格"></li>
</ul>
<h2 id="独立构件风格"><a href="#独立构件风格" class="headerlink" title="独立构件风格"></a>独立构件风格</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-10.png" alt="独立构建风格"></p>
<h2 id="虚拟机风格"><a href="#虚拟机风格" class="headerlink" title="虚拟机风格"></a>虚拟机风格</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-11.png" alt="虚拟机风格"></p>
<ul>
<li><p>解释器，自定义规则<br><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-12.png" alt="解释器"></p>
</li>
<li><p>规则为中心（再解释器的基础上，增加了经验规则），专家系统<br><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-14.png" alt="规则为中心"></p>
</li>
</ul>
<h2 id="以数据为中心"><a href="#以数据为中心" class="headerlink" title="以数据为中心"></a>以数据为中心</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-16.png" alt="以数据为中心"></p>
<h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-17.png" alt="区别"></p>
<h2 id="闭环控制架构（过程控制）"><a href="#闭环控制架构（过程控制）" class="headerlink" title="闭环控制架构（过程控制）"></a>闭环控制架构（过程控制）</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-18.png" alt="闭关控制架构"></p>
<h3 id="经典应用"><a href="#经典应用" class="headerlink" title="经典应用"></a>经典应用</h3><ul>
<li>空调温控</li>
<li>定速巡航</li>
</ul>
<h2 id="模型驱动架构（MDA-Model-Driven-Architecture）"><a href="#模型驱动架构（MDA-Model-Driven-Architecture）" class="headerlink" title="模型驱动架构（MDA Model Driven Architecture）"></a>模型驱动架构（MDA Model Driven Architecture）</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-19.png" alt="alt text"></p>
<h1 id="软件架构复用"><a href="#软件架构复用" class="headerlink" title="软件架构复用"></a>软件架构复用</h1><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-21.png" alt="软件架构复用"></p>
<h2 id="角度1"><a href="#角度1" class="headerlink" title="角度1"></a>角度1</h2><ul>
<li>机会复用（只要发现可复用的资源）</li>
<li>系统复用（规划进行复用）</li>
</ul>
<h2 id="角度2"><a href="#角度2" class="headerlink" title="角度2"></a>角度2</h2><ul>
<li>横向复用（通用的）</li>
<li>垂直复用（垂类、行业相关）</li>
</ul>
<h1 id="特定领域架构（DSSA）"><a href="#特定领域架构（DSSA）" class="headerlink" title="特定领域架构（DSSA）"></a>特定领域架构（DSSA）</h1><p>聚焦某个行业<br><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-22.png" alt="特定领域架构"></p>
<ul>
<li>水平：不同领域，平移</li>
<li>垂直：相同领域，深入</li>
</ul>
<h2 id="参与人员"><a href="#参与人员" class="headerlink" title="参与人员"></a>参与人员</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-23.png" alt="参与人员"></p>
<p>有领域经验的人员</p>
<ul>
<li>领域专家</li>
<li>领域分析人员</li>
<li>领域设计人员</li>
<li>领域实现人员</li>
</ul>
<h2 id="三层次模型"><a href="#三层次模型" class="headerlink" title="三层次模型"></a>三层次模型</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-24.png" alt="三次模型"></p>
<h2 id="软件产品线"><a href="#软件产品线" class="headerlink" title="软件产品线"></a>软件产品线</h2><p><img src="../images/article/250331-%E5%9F%BA%E4%BA%8E%E6%9E%B6%E6%9E%84%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/image-25.png" alt="软件产品线"></p>
]]></content>
  </entry>
  <entry>
    <title>250401-论文写作技巧</title>
    <url>/post/2eb7ff7.html</url>
    <content><![CDATA[<h1 id="论文写作技巧"><a href="#论文写作技巧" class="headerlink" title="论文写作技巧"></a>论文写作技巧</h1><p><img src="../images/article/250401-%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7/image.png" alt="技巧"></p>
<h2 id="摘要-300"><a href="#摘要-300" class="headerlink" title="摘要(300)"></a>摘要(300)</h2><ol>
<li>项目背景</li>
<li>点题</li>
<li>体现分论点</li>
<li>总结<h2 id="背景-400"><a href="#背景-400" class="headerlink" title="背景(400)"></a>背景(400)</h2></li>
<li>系统的背景、发起单位、目的、开发周期、交付的产品等</li>
<li>你的主要岗位职责等，我的角色和单人的主要工作</li>
<li>系统功能模块划分，主要功能介绍</li>
</ol>
<h2 id="理论-300-400"><a href="#理论-300-400" class="headerlink" title="理论(300-400)"></a>理论(300-400)</h2><p>可以有个开头，介绍一下对主题的理解，然后再继续写<br>优先准确反应，其次至少部分准确放映，少量涉及响应</p>
<h2 id="过度-100"><a href="#过度-100" class="headerlink" title="过度(100)"></a>过度(100)</h2><p>承上启下，引入主题内容（核心论点）</p>
<h2 id="项目-1200-1500"><a href="#项目-1200-1500" class="headerlink" title="项目(1200-1500)"></a>项目(1200-1500)</h2><p>建议 三个分论点<br>1、某种特定风格的3个阶段、3个维度<br>2、3种架构分别展开SS<br>3、按3种子系统</p>
<h3 id="分论点"><a href="#分论点" class="headerlink" title="分论点"></a>分论点</h3><ul>
<li>总起句</li>
<li>编号+标题</li>
</ul>
<h2 id="结论-400"><a href="#结论-400" class="headerlink" title="结论(400)"></a>结论(400)</h2><p>先分析项目运行效果</p>
<p>再总结项目不足，针对不足提出解决方案或思路(最好是解决的，不是我的问题)</p>
<p>展望未来</p>
]]></content>
  </entry>
  <entry>
    <title>250402-软件架构评估</title>
    <url>/post/706fce25.html</url>
    <content><![CDATA[<h1 id="质量属性"><a href="#质量属性" class="headerlink" title="质量属性"></a>质量属性</h1><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image.png" alt="alt text"></p>
<ul>
<li>性能</li>
<li>可用性</li>
<li>安全性</li>
<li>可修改行</li>
</ul>
<p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-1.png" alt="alt text"></p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-2.png" alt="alt text"></p>
<h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><p>正常运行的时间比例</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-4.png" alt="alt text"></p>
<h2 id="可修改性"><a href="#可修改性" class="headerlink" title="可修改性"></a>可修改性</h2><p>较高性价比的对系统进行变更</p>
<p>简单评测：修改需要花多少时间<br><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-5.png" alt="alt text"></p>
<h2 id="易用性、可测试性"><a href="#易用性、可测试性" class="headerlink" title="易用性、可测试性"></a>易用性、可测试性</h2><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-6.png" alt="alt text"></p>
<h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-7.png" alt="alt text"></p>
<ul>
<li>敏感点：影响某一个质量属性</li>
<li>权衡点：多个质量属性的敏感点</li>
<li>风险点：架构设计中的隐患</li>
<li>非风险点： 可接受的功能或业务</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-8.png" alt="alt text"></p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-9.png" alt="alt text"></p>
<h3 id="场景构成"><a href="#场景构成" class="headerlink" title="场景构成"></a>场景构成</h3><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-10.png" alt="alt text"></p>
<h4 id="可修改性-1"><a href="#可修改性-1" class="headerlink" title="可修改性"></a>可修改性</h4><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-11.png" alt="alt text"></p>
<h4 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h4><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-12.png" alt="alt text"></p>
<h4 id="可测试性"><a href="#可测试性" class="headerlink" title="可测试性"></a>可测试性</h4><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-13.png" alt="alt text"></p>
<h4 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h4><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-14.png" alt="alt text"></p>
<h4 id="安全性-1"><a href="#安全性-1" class="headerlink" title="安全性"></a>安全性</h4><p><img src="../images/article/250402-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/image-15.png" alt="alt text"></p>
]]></content>
  </entry>
  <entry>
    <title>JS-MAP问题</title>
    <url>/post/284e9461.html</url>
    <content><![CDATA[<h1 id="JS-MAP问题"><a href="#JS-MAP问题" class="headerlink" title="JS-MAP问题"></a>JS-MAP问题</h1><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><ul>
<li><p>定义了一个MAP,代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> QuestuibOptionHandlerMap = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">0</span>, getCommonOptions], <span class="comment">//单选题</span></span><br><span class="line">  [<span class="number">1</span>, getCommonOptions], <span class="comment">//多选题</span></span><br><span class="line">  [<span class="number">2</span>, () =&gt; &#123;&#125;], <span class="comment">//填空题</span></span><br><span class="line">  [<span class="number">3</span>, getCommonOptions], <span class="comment">//下拉题</span></span><br><span class="line">  [<span class="number">4</span>, () =&gt; &#123;&#125;], <span class="comment">//日期</span></span><br><span class="line">  [<span class="number">5</span>, () =&gt; &#123;&#125;], <span class="comment">//量表题</span></span><br><span class="line">  [<span class="number">6</span>, () =&gt; &#123;&#125;], <span class="comment">//AHP 题组</span></span><br><span class="line">  [<span class="number">7</span>, () =&gt; &#123;&#125;], <span class="comment">//图片上传题</span></span><br><span class="line">  [<span class="number">8</span>, () =&gt; &#123;&#125;], <span class="comment">//文件上传题</span></span><br><span class="line">  [<span class="number">9</span>, () =&gt; &#123;&#125;], <span class="comment">//城市</span></span><br><span class="line">  [<span class="number">1</span>, () =&gt; &#123;&#125;], <span class="comment">//车型</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出MAP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(QuestuibOptionHandlerMap);</span><br></pre></td></tr></table></figure>
<p><img src="https://oss.wddv.com/www/article/20210115173433.png" alt="20210115173433"><br>然后输出的……..</p>
</li>
</ul>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题."></a>解决问题.</h2><p>以后多动动脑子,求你了.<br>卧槽啊啊啊啊啊啊!!!!!!<br>第二个,跟最后一个竟然重复了!!!!!!!!!<br>改行吧</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>MAP</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-p-26-1</title>
    <url>/post/b6263c9b.html</url>
    <content><![CDATA[<h2 id="p-26-1"><a href="#p-26-1" class="headerlink" title="p-26-1"></a>p-26-1</h2><h3 id="将-0x39A7F8-转换为二进制"><a href="#将-0x39A7F8-转换为二进制" class="headerlink" title="将 0x39A7F8 转换为二进制"></a>将 0x39A7F8 转换为二进制</h3><table>
<thead>
<tr>
<th>16</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>0011</td>
</tr>
<tr>
<td>9</td>
<td>1001</td>
</tr>
<tr>
<td>A</td>
<td>1010</td>
</tr>
<tr>
<td>7</td>
<td>0111</td>
</tr>
<tr>
<td>F</td>
<td>1111</td>
</tr>
<tr>
<td>8</td>
<td>1000</td>
</tr>
</tbody></table>
<blockquote>
<p>001110011010011111111000</p>
</blockquote>
<h3 id="将二进制-1100100101111011-转化为十六进制"><a href="#将二进制-1100100101111011-转化为十六进制" class="headerlink" title="将二进制 1100100101111011 转化为十六进制"></a>将二进制 1100100101111011 转化为十六进制</h3><table>
<thead>
<tr>
<th>16</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td>C</td>
<td>1100</td>
</tr>
<tr>
<td>9</td>
<td>1001</td>
</tr>
<tr>
<td>7</td>
<td>0111</td>
</tr>
<tr>
<td>B</td>
<td>1011</td>
</tr>
</tbody></table>
<blockquote>
<p>0xC97b</p>
</blockquote>
<h3 id="将-0xD5E4C-转换为二进制"><a href="#将-0xD5E4C-转换为二进制" class="headerlink" title="将 0xD5E4C 转换为二进制"></a>将 0xD5E4C 转换为二进制</h3><table>
<thead>
<tr>
<th>16</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td>D</td>
<td>1101</td>
</tr>
<tr>
<td>5</td>
<td>0101</td>
</tr>
<tr>
<td>E</td>
<td>1110</td>
</tr>
<tr>
<td>4</td>
<td>0100</td>
</tr>
<tr>
<td>C</td>
<td>1100</td>
</tr>
</tbody></table>
<blockquote>
<p>11010101111001001011</p>
</blockquote>
<h3 id="将-1001101110011110110101-转化为十六进制"><a href="#将-1001101110011110110101-转化为十六进制" class="headerlink" title="将 1001101110011110110101 转化为十六进制"></a>将 1001101110011110110101 转化为十六进制</h3><table>
<thead>
<tr>
<th>16</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>0010</td>
</tr>
<tr>
<td>6</td>
<td>0110</td>
</tr>
<tr>
<td>E</td>
<td>1110</td>
</tr>
<tr>
<td>7</td>
<td>0111</td>
</tr>
<tr>
<td>B</td>
<td>1011</td>
</tr>
<tr>
<td>5</td>
<td>0101</td>
</tr>
</tbody></table>
<blockquote>
<p>0x26e7B5</p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-p-26-2</title>
    <url>/post/2f2f6d21.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>n</th>
<th>2^n 十进制</th>
<th>2^n 十六进制</th>
</tr>
</thead>
<tbody><tr>
<td>9</td>
<td>512</td>
<td>0x200</td>
</tr>
<tr>
<td>19</td>
<td>524288</td>
<td>0x80000</td>
</tr>
<tr>
<td>14</td>
<td>16384</td>
<td>0x4000</td>
</tr>
<tr>
<td>16</td>
<td>65535</td>
<td>0x10000</td>
</tr>
<tr>
<td>17</td>
<td>131070</td>
<td>0x20000</td>
</tr>
<tr>
<td>5</td>
<td>32</td>
<td>0x20</td>
</tr>
<tr>
<td>7</td>
<td>128</td>
<td>0x80</td>
</tr>
</tbody></table>
<p>卧槽，算错那么多</p>
<table>
<thead>
<tr>
<th>十进制</th>
<th>二进制</th>
<th>十六进制</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0000 0000</td>
<td>0x00</td>
</tr>
<tr>
<td>167</td>
<td>1010 0111</td>
<td>0xA7</td>
</tr>
<tr>
<td>62</td>
<td>0011 1110</td>
<td>0x3E</td>
</tr>
<tr>
<td>188</td>
<td>10111100</td>
<td>0xBC</td>
</tr>
<tr>
<td>55</td>
<td>00110111</td>
<td>0x37</td>
</tr>
<tr>
<td>136</td>
<td>10001000</td>
<td>0x88</td>
</tr>
<tr>
<td>243</td>
<td>11110011</td>
<td>0xF3</td>
</tr>
<tr>
<td>82</td>
<td>01010010</td>
<td>0x52</td>
</tr>
<tr>
<td>172</td>
<td>10101100</td>
<td>0xAC</td>
</tr>
<tr>
<td>231</td>
<td>11100111</td>
<td>0xE7</td>
</tr>
</tbody></table>
<p>草，还是得用计算器？？？？</p>
<ul>
<li>0x503c + 0x8 = 0x5044</li>
<li>0x503c - 0x40 = <del>0x50FC</del>(0x4FFC)</li>
<li>0x503c + 64 = 0x507c</li>
<li>0x50ea - 0x503c = <del>0x50Ae</del>(0xAE)</li>
</ul>
<p>别做卷子了，废物，这都能错俩，还特么检查，你有脸检查？？？</p>
<p>完了，还是那么粗心。。</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>nestjs 类型导出引起的循环依赖问题</title>
    <url>/post/6261c281.html</url>
    <content><![CDATA[<h1 id="nestjs-无法注入服务"><a href="#nestjs-无法注入服务" class="headerlink" title="nestjs 无法注入服务"></a>nestjs 无法注入服务</h1><h1 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h1><ul>
<li>在 viewService 里面导入 UserService,发现一直提示错误，没有找到可以注入的内容</li>
<li>检查了一遍代码，确认逻辑代码没有问题</li>
<li>怀疑是不是循环依赖了，检查代码，发现代码基本与其他 Moduel 的服务相同，没有出现循环依赖的情况</li>
<li>打印 ModuleContainer，在当前 ViewModule 里面找到了导入的 UserModule，也存在 UserService</li>
</ul>
<p>view.service.ts 尝试打印是否成功导入 UserModule</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ViewService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> modulesContainer: ModulesContainer,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> userService: UserService,</span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(ViewEntity)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> viewEntityRepository: Repository&lt;ViewEntity&gt;</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    [...modulesContainer.values()].map(<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">module</span>.metatype.name === <span class="string">"ViewModule"</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"=======imports======="</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">module</span>.imports);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"=======providers======"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">module</span>.providers);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"=======exports======"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">module</span>.exports);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"\n\n\n\n\n"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"=======UserModule exports======"</span>);</span><br><span class="line">        [...<span class="keyword">module</span>.imports.values()].map((innerModule) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (innerModule.metatype.name === <span class="string">"UserModule"</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(innerModule.exports);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>view.module.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [TypeOrmModule.forFeature([ViewEntity, ViewLikeStatEntity]), UserModule],</span><br><span class="line">  controllers: [ViewController],</span><br><span class="line">  providers: [ViewService],</span><br><span class="line">  exports: [ViewService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ViewModule &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>view.service.ts </p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> ViewRelationType = <span class="string">"topic"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> JoinListInterface &#123;</span><br><span class="line">  uid: <span class="built_in">string</span>;</span><br><span class="line">  avatar: <span class="built_in">string</span>;</span><br><span class="line">  nickname: <span class="built_in">string</span>;</span><br><span class="line">  roler: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ViewService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> readonly userService: UserService, <span class="meta">@InjectRepository</span>(ViewEntity) <span class="keyword">private</span> readonly viewRepository: Repository&lt;ViewEntity&gt;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  create(createViewDto: CreateViewDto) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"This action adds a new view"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[error] 2021-07-28 18:11:32.1 [ExceptionHandler] Nest can't resolve dependencies of the ViewService (?, ViewEntityRepository). Please make sure that the argument dependency at index [0] is available in the ViewModule context.</span><br><span class="line"></span><br><span class="line">Potential solutions:</span><br><span class="line">- If dependency is a provider, is it part of the current ViewModule?</span><br><span class="line">- If dependency is exported from a separate @Module, is that module imported within ViewModule?</span><br><span class="line">  @Module(&#123;</span><br><span class="line">    imports: [ /* the Module containing dependency */ ]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul>
<li>再次检查代码，发现 view.service.ts 导出了三个东西，一个 type，一个 interface，还有一个 viewService 服务</li>
<li>全文查找导出的接口，发现在一个实体里面有这个类型的引入，就是 <strong>JoinListInterface</strong>.</li>
</ul>
<p>topic.entity.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(<span class="string">"topics"</span>, &#123; schema: <span class="string">"42how"</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TopicEntity &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>(&#123; <span class="keyword">type</span>: <span class="string">"bigint"</span>, name: <span class="string">"id"</span>, unsigned: <span class="literal">true</span> &#125;)</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  join: &#123;</span><br><span class="line">    count?: <span class="built_in">number</span>;</span><br><span class="line">    list?: JoinListInterface[];</span><br><span class="line">  &#125; = &#123; count: <span class="number">0</span>, list: [] &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>尝试删除 <strong>JoinListInterface</strong> ，服务注入成功</p>
</li>
<li><p>原本以为 ts 的 interface，type 是不参与到编译过后的 js 文件，检查编译后 topic.entity.js 文件，发现 <code>const view_service_1 = require(&quot;../modules/view/view.service&quot;);</code> 这一句，虽然 interface 没有被使用，但是这个 js 文件被引入了。因为这个实体类被引入的比较多，产生了循环依赖，在 nestjs 进行注入的时候，这个文件导出是 undefined，查找不到服务，无法注入。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>ts 中 export 的类型文件应该单独定义，不要跟逻辑代码放在一个文件。</li>
<li>类型文件虽然没有参与编译，但是会引入文件，如果引用的过于复杂，会导致循环依赖的情况</li>
<li>感谢青木大佬的帮助</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>nestjs</tag>
      </tags>
  </entry>
  <entry>
    <title>rust 学习记录</title>
    <url>/post/7ac062ab.html</url>
    <content><![CDATA[<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"猜一个数字！"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"输出你猜的数字"</span>);</span><br><span class="line">    <span class="keyword">let</span> secret_number = rand::thread_rng().gen_range(<span class="number">1</span>, <span class="number">101</span>);</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line">        io::stdin().read_line(&amp;<span class="keyword">mut</span> guess).expect(<span class="string">"读取错误"</span>);</span><br><span class="line">        <span class="keyword">let</span> guess: <span class="built_in">u32</span> = <span class="keyword">match</span> guess.trim().parse() &#123;</span><br><span class="line">            <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"请输入数字"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">match</span> guess.cmp(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">"小了"</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">"大了"</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"对了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>rust版本 斐波那契额数列</title>
    <url>/post/dd074ae7.html</url>
    <content><![CDATA[<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> ::std::io;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> n = <span class="built_in">String</span>::new();</span><br><span class="line">    io::stdin().read_line(&amp;<span class="keyword">mut</span> n).expect(<span class="string">"输入错误"</span>);</span><br><span class="line">    <span class="keyword">let</span> n: <span class="built_in">i64</span> = n.trim().parse().expect(<span class="string">"不是数字"</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> second = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> index &lt;= n &#123;</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> || index == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"count &#123;&#125;"</span>, index);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> count: <span class="built_in">i64</span> = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = count;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"count &#123;&#125;"</span>, count);</span><br><span class="line">        &#125;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl2 默认启动服务</title>
    <url>/post/dae7eff7.html</url>
    <content><![CDATA[<h1 id="wsl-默认服务启动"><a href="#wsl-默认服务启动" class="headerlink" title="wsl 默认服务启动"></a>wsl 默认服务启动</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p> 习惯了linux的命令行，在windows开发环境下装了wsl2的环境,但是每次windows重启，再打开wsl，服务全都挂了，而且wsl2也没有systemd这种服务，所以想每次打开wsl2的时候，服务都是启动状态</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>看到印度老哥写的一个脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/init.wsl</span></span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">lsof -i:9000 &gt; /dev/null || systemctl start php-fpm</span><br><span class="line">lsof -i:80 &gt; /dev/null || systemctl start nginx</span><br><span class="line">lsof -i:3306 &gt; /dev/null || systemctl start mysqld</span><br><span class="line">lsof -i:6379 &gt; /dev/null || redis-server /etc/redis.conf</span><br><span class="line"><span class="comment"># systemctl 是使用的github上一个老哥写的python脚本，好像是这个</span></span><br><span class="line"><span class="comment"># 地址：https://github.com/gdraheim/docker-systemctl-replacement</span></span><br></pre></td></tr></table></figure>

<p>找个地方保存</p>
<p>然后再打开 <code>.zshrc</code> 或者 <code>.bashrc</code> 再里面把文件的路径填到里面</p>
<p>我的是放再<code>.zshrc</code>里面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.wsl</span><br></pre></td></tr></table></figure>

<p>这样子每次启动wsl的时候就会启动这些服务</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>介绍下重绘和回流</title>
    <url>/post/51bb67c3.html</url>
    <content><![CDATA[<h1 id="介绍下重绘和回流（Repaint-amp-Reflow），以及如何进行优化"><a href="#介绍下重绘和回流（Repaint-amp-Reflow），以及如何进行优化" class="headerlink" title="介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化"></a>介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><h3 id="浏览器渲染主要经过三个阶段"><a href="#浏览器渲染主要经过三个阶段" class="headerlink" title="浏览器渲染主要经过三个阶段"></a>浏览器渲染主要经过三个阶段</h3><p>1、dom树与style树合成渲染树<br>2、计算节点的位置与大小的阶段叫回流<br>3、渲染计算好的节点叫重绘</p>
<h3 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h3><p>1、减少dom插入次数,可以用虚拟的节点,计算好以后,一次性插入到dom中<br>2、动画可以使用绝对布局,脱离文档流<br>3、使用gpu加速相关的属性,比如transition<br>4、修改的节点可以先隐藏,修改完毕后再进行显示.</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/chenjigeng/blog/issues/4" target="_blank" rel="noopener">你真的了解回流和重绘吗 #4</a><br><a href="https://github.com/chenjigeng/blog/issues/4" target="_blank" rel="noopener">最高赞作者github</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>dom优化</tag>
      </tags>
  </entry>
  <entry>
    <title>初级算法-两数之和</title>
    <url>/post/86e6a746.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [3,2,4], target &#x3D; 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [3,3], target &#x3D; 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure>


<p>提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 &lt;&#x3D; nums.length &lt;&#x3D; 104</span><br><span class="line">-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</span><br><span class="line">-109 &lt;&#x3D; target &lt;&#x3D; 109</span><br><span class="line">只会存在一个有效答案</span><br><span class="line">进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> [i, j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双指针排序"><a href="#双指针排序" class="headerlink" title="双指针排序"></a>双指针排序</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> numsMap = nums.reduce(<span class="function">(<span class="params">current, next, index</span>) =&gt;</span> &#123;</span><br><span class="line">    current.set(index, next);</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;, <span class="keyword">new</span> Map());</span><br><span class="line">  nums = nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  <span class="keyword">let</span> rightIndex = nums.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; target);</span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">0</span>;</span><br><span class="line">  rightIndex = rightIndex === <span class="number">-1</span> ? nums.length - <span class="number">1</span> : rightIndex;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[leftIndex] + nums[rightIndex] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> [numsMap.get(nums[leftIndex]), numsMap.get(nums[rightIndex])];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leftIndex % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      leftIndex++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rightIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="map表"><a href="#map表" class="headerlink" title="map表"></a>map表</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sumMap = <span class="keyword">new</span> Map();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> indexObj = sumMap.get(target - nums[i]);</span><br><span class="line">    <span class="keyword">if</span> (indexObj) &#123;</span><br><span class="line">      <span class="keyword">return</span> [indexObj.index, i];</span><br><span class="line">    &#125;</span><br><span class="line">    sumMap.set(nums[i], &#123;</span><br><span class="line">      index: i,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>map表解法最优</li>
<li></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2jrse/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2jrse/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo创建自己的个人博客</title>
    <url>/post/9dd65578.html</url>
    <content><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>mac电脑可能需要使用sudo权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h2 id="初始化项目，安装依赖"><a href="#初始化项目，安装依赖" class="headerlink" title="初始化项目，安装依赖"></a>初始化项目，安装依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>各类配置项参考<a href="https://hexo.bootcss.com/docs/configuration.html" target="_blank" rel="noopener">hexo中文文档</a></p>
</blockquote>
<h2 id="发布到github-pages"><a href="#发布到github-pages" class="headerlink" title="发布到github pages"></a>发布到github pages</h2><ol>
<li>创建一个github仓库&lt;yourname&gt;.github.com，比如我的lampofaladdin.github.io</li>
<li>在_config.yml中增加配置项<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> type: git</span><br><span class="line"> repo: &lt;github git地址&gt;</span><br><span class="line"> # 例如git@github.com:lampofaladdin&#x2F;lampofaladdin.github.io.git</span><br></pre></td></tr></table></figure></li>
<li>发布到github <code>hexo deploy</code></li>
</ol>
<h2 id="使用阿里云oss静态页关联自己域名"><a href="#使用阿里云oss静态页关联自己域名" class="headerlink" title="使用阿里云oss静态页关联自己域名"></a>使用阿里云oss静态页关联自己域名</h2><ol>
<li>创建阿里云Bucket,不开通版本控制，读写为公共读，其他默认</li>
<li>创建ram用户，给用户oss的控制权限</li>
<li>创建ram用户的AccessKey，获取到AccessKeyID，AccessKeySecret</li>
<li>进入bucket,基础设置，静态页面，默认首页为<strong>index.html</strong>,子目录首页开通</li>
<li>传输管理，绑定你已经购买备案好的域名。</li>
<li>安装hexo-deployer-ali-oss，<code>npm i hexo-deployer-ali-oss --save</code></li>
<li>在_config.yml中增加配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: ali-oss</span><br><span class="line">  region: &lt;regionName&gt; # oss-cn-hangzhou oss-cn-beijing oss-cn-guangzhou 等</span><br><span class="line">  accessKeyId: &lt;AccessKeyID&gt; </span><br><span class="line">  accessKeySecret: &lt;AccessKeySecret&gt;</span><br><span class="line">  bucket: &lt;bucketName&gt; # wddv</span><br></pre></td></tr></table></figure></li>
<li><code>npm deploy</code></li>
</ol>
<h2 id="同时发布在githubPage-与-阿里云oss"><a href="#同时发布在githubPage-与-阿里云oss" class="headerlink" title="同时发布在githubPage 与 阿里云oss"></a>同时发布在githubPage 与 阿里云oss</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">-  type: git</span><br><span class="line">   repo: &lt;github git地址&gt;</span><br><span class="line">-  type: ali-oss</span><br><span class="line">   region: &lt;regionName&gt; # oss-cn-hangzhou oss-cn-beijing oss-cn-guangzhou 等</span><br><span class="line">   accessKeyId: &lt;AccessKeyID&gt; </span><br><span class="line">   accessKeySecret: &lt;AccessKeySecret&gt;</span><br><span class="line">   bucket: &lt;bucketName&gt; # wddv</span><br></pre></td></tr></table></figure>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li>git push的时候depoly</li>
<li>标签分类怎么做</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://hexo.bootcss.com/" target="_blank" rel="noopener">hexo官方文档</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">hexo主题 hexo-theme-next</a></li>
<li><a href="https://github.com/wertycn/hexo-deployer-ali-oss" target="_blank" rel="noopener">阿里云上传插件 hexo-deployer-ali-oss </a></li>
<li><a href="https://blog.csdn.net/youlin/article/details/107313287" target="_blank" rel="noopener">在gitpush的时候 depoly</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>初级算法-删除排序数组中的重复项</title>
    <url>/post/50c45396.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<p>说明:</p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len &#x3D; removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1,1,2]</span><br><span class="line">输出：2, nums &#x3D; [1,2]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums &#x3D; [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>


<p>提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 104</span><br><span class="line">-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</span><br><span class="line">nums 已按升序排列</span><br></pre></td></tr></table></figure>



<h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 个人题解</span></span><br><span class="line"><span class="comment"> * 双层遍历的解法，时间复杂度O(n2)</span></span><br><span class="line"><span class="comment"> * @param nums</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeDuplicates</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; ) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = nums.findIndex(<span class="function">(<span class="params">cItem, cIndex</span>) =&gt;</span> i !== cIndex &amp;&amp; nums[i] === cItem);</span><br><span class="line">    <span class="keyword">if</span> (index !== <span class="number">-1</span>) &#123;</span><br><span class="line">      nums.splice(i, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双指针解法"><a href="#双指针解法" class="headerlink" title="双指针解法"></a>双指针解法</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * @param nums</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeDuplicates</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> right = <span class="number">1</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[left] !== nums[right]) &#123;</span><br><span class="line">      nums[++left] = nums[right];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> left + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>看了题解，双指针办法</li>
<li>因为数组是有序的，右边大于等于左边</li>
<li>初始化左指针等于0，右指针等于1，</li>
<li>循环右指针</li>
<li>当右指针不等于左指针的时候，说明碰到了不一样的数值，将右指针赋值给左指针，左指向前移动一位，右指针继续循环</li>
<li>不重复的值为左指针+1</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2gy9m/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2gy9m/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初级算法-买卖股票的最佳时机</title>
    <url>/post/a06ec8e4.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: prices &#x3D; [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6-3 &#x3D; 3 。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: prices &#x3D; [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5-1 &#x3D; 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: prices &#x3D; [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>


<p>提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; prices.length &lt;&#x3D; 3 * 104</span><br><span class="line">0 &lt;&#x3D; prices[i] &lt;&#x3D; 104</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 贪心算法</span></span><br><span class="line"><span class="comment"> * @param prices </span></span><br><span class="line"><span class="comment"> * @returns </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxProfit</span>(<span class="params">prices: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    prices.reduce(<span class="function">(<span class="params">current, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> val = next - current;</span><br><span class="line">      i += val &gt; <span class="number">0</span> ? val : <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> next;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2zsx1/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2zsx1/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>初级算法-加一</title>
    <url>/post/ea13cbbf.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p>
<p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p>
<p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：digits &#x3D; [1,2,3]</span><br><span class="line">输出：[1,2,4]</span><br><span class="line">解释：输入数组表示数字 123。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：digits &#x3D; [4,3,2,1]</span><br><span class="line">输出：[4,3,2,2]</span><br><span class="line">解释：输入数组表示数字 4321。</span><br></pre></td></tr></table></figure>

<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：digits &#x3D; [0]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; digits.l&#96;ength &lt;&#x3D; 100</span><br><span class="line">0 &lt;&#x3D; digits[i] &lt;&#x3D; 9</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul>
<li>倒序循环该数组</li>
<li>如果当前位+1 不等于10，跳出循环，返回数组</li>
<li>如果当前位+1 等于10，当前位等于0，继续循环到下一位加1，判断是否等于10</li>
<li>循环结束判断第一位是否等于0，如果等于0，第一位添加1<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusOne</span>(<span class="params">digits: <span class="built_in">number</span>[]</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = digits.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNum = digits[index] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (currentNum !== <span class="number">10</span>) &#123;</span><br><span class="line">      digits[index] = currentNum;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    digits[index] = <span class="number">0</span>;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (digits[<span class="number">0</span>] === <span class="number">0</span>) &#123;</span><br><span class="line">    digits.unshift(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> digits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2cv1c/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2cv1c/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初级算法-只出现一次的数字</title>
    <url>/post/bc8a39fb.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明：</p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>常规set</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">singleNumber</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> numSet: Set&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> Set();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numSet.has(nums[i])) &#123;</span><br><span class="line">      numSet.delete(nums[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      numSet.add(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...numSet][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">位运算</span></span><br><span class="line"><span class="string">- 1 ^ 1 = 0</span></span><br><span class="line"><span class="string">- 0 ^ 1 = 1;</span></span><br><span class="line"><span class="string">- 1 ^ 1 ^ 2 = 2;</span></span><br><span class="line"><span class="string">- 2 ^ 2 ^ 1 = 1</span></span><br><span class="line"><span class="string">- 相同的数字或运算等于0,0与人气其他数字或运算等于此数字</span></span><br><span class="line"><span class="string">- 2 ^ 2 ^ 3 ^ 3 ^ 1 =  1</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>typescript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">singleNumber</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    result ^= nums[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x21ib6/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x21ib6/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初级算法-存在重复元素</title>
    <url>/post/811925bd.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组，判断是否存在重复元素。</p>
<p>如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,1]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3,4]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>


<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsDuplicate</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> numSet = <span class="keyword">new</span> Set();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numSet.has(nums[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    numSet.add(nums[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x248f5/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x248f5/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初级算法-找出重复的数字</title>
    <url>/post/1a917fd2.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个数组，编写一个函数来计算它们的交集。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">输出：[2,2]</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><p>输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。</p>
</li>
<li><p>我们可以不考虑输出结果的顺序。<br>进阶：</p>
</li>
<li><p>如果给定的数组已经排好序呢？你将如何优化你的算法？</p>
</li>
<li><p>如果 nums1 的大小比 nums2 小很多，哪种方法更优？</p>
</li>
<li><p>如果 nums2 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</p>
</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="直觉版"><a href="#直觉版" class="headerlink" title="直觉版"></a>直觉版</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersect</span>(<span class="params">nums1: <span class="built_in">number</span>[], nums2: <span class="built_in">number</span>[]</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums1.length &gt; nums2.length) &#123;</span><br><span class="line">    [nums1, nums2] = [nums2, nums1];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums1.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = nums2.findIndex(<span class="function">(<span class="params">cItem</span>) =&gt;</span> item === cItem);</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nums2.splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双指针版本"><a href="#双指针版本" class="headerlink" title="双指针版本"></a>双指针版本</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersect</span>(<span class="params">nums1: <span class="built_in">number</span>[], nums2: <span class="built_in">number</span>[]</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  nums1 = nums1.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  nums2 = nums2.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  <span class="keyword">let</span> rightIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (leftIndex &lt; nums1.length &amp;&amp; rightIndex &lt; nums2.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums1[leftIndex] === nums2[rightIndex]) &#123;</span><br><span class="line">      result.push(nums1[leftIndex]);</span><br><span class="line">      leftIndex++;</span><br><span class="line">      rightIndex++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums2[rightIndex] &gt; nums1[leftIndex]) &#123;</span><br><span class="line">      leftIndex++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rightIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2y0c2/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2y0c2/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初级算法-整数反转</title>
    <url>/post/e1873048.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p>
<p>假设环境不允许存储 64 位整数（有符号或无符号）。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x &#x3D; 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  字符串反转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isPositive = x &gt;= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> reverseNumberString = <span class="string">`<span class="subst">$&#123;x&#125;</span>`</span>.replace(<span class="string">"-"</span>, <span class="string">""</span>).split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> result = isPositive ? +reverseNumberString : -reverseNumberString;</span><br><span class="line">  <span class="keyword">if</span> (result &lt;= (<span class="number">-2</span>) ** <span class="number">31</span> || result &gt;= <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnx13t/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnx13t/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>初级算法-移动零</title>
    <url>/post/d710a96e.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">必须在原数组上操作，不能拷贝额外的数组。</span><br><span class="line">尽量减少操作次数。</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveZeroes</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> rightIndex = nums.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (leftIndex &lt;= rightIndex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[leftIndex] !== <span class="number">0</span>) &#123;</span><br><span class="line">      leftIndex++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.splice(leftIndex, <span class="number">1</span>);</span><br><span class="line">    nums.push(<span class="number">0</span>);</span><br><span class="line">    rightIndex--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Solution &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">move_zeroes</span></span>(nums: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> right = nums.len();</span><br><span class="line">        <span class="keyword">while</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[left] == <span class="number">0</span> &#123;</span><br><span class="line">                nums.splice(left..left + <span class="number">1</span>, []);</span><br><span class="line">                nums.push(<span class="number">0</span>);</span><br><span class="line">                right = right - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = left + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2ba4i/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2ba4i/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>吐槽一下</title>
    <url>/post/a3ff59a0.html</url>
    <content><![CDATA[<div style="display:none">
卧槽啊!!!
你要怎么样嘛!
7000预算啊!!!大哥!!!
我就是一个穷上班的!!!!!
过个生日要7000!!!!!
我有那么有钱嘛!!!!!
大哥!!!!

</div>]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>啊，又犯了一个低级错误</title>
    <url>/post/e143266a.html</url>
    <content><![CDATA[<h2 id="笨啊-卧槽"><a href="#笨啊-卧槽" class="headerlink" title="笨啊 卧槽"></a>笨啊 卧槽</h2><p>全等号写成了等于号…<br>我真是个人才…<br>找bug找了一个小时才发现哪里写错了…<br>别写bug了,回家养猪吧.</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>如何实现a=1a=2a=3</title>
    <url>/post/51fa8c82.html</url>
    <content><![CDATA[<h1 id="如何实现a-1a-2a-3"><a href="#如何实现a-1a-2a-3" class="headerlink" title="如何实现a=1a=2a=3"></a>如何实现a=1a=2a=3</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(global, <span class="string">"a"</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> b++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="number">3</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次域名解析问题</title>
    <url>/post/c3a46aa1.html</url>
    <content><![CDATA[<h1 id="域名解析问题"><a href="#域名解析问题" class="headerlink" title="域名解析问题"></a>域名解析问题</h1><p>这段时间在迁移服务器,发现网页再刷新对时候每次刷新数据都会不一样,检查完以后发现是域名解析的问题.<br>在阿里云域名进行解析都时候,在解析到新服务器的时候,老服务器域名的解析没有删除.(是否需要加一个弹窗?)<br>每一次请求都会请求到不同的服务器,导致每次的数据都不一样,emmmm(如果数据库同步了,是不是可以这么做负载均衡,笑..)</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>自己不仔细,删完老服务器绑定的域名以为可以了.域名解析页面没有注意到还有第二页</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现一个 new</title>
    <url>/post/fda03b62.html</url>
    <content><![CDATA[<h1 id="如何实现一个new"><a href="#如何实现一个new" class="headerlink" title="如何实现一个new"></a>如何实现一个new</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">  <span class="keyword">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line">Demo.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newConstructor</span>(<span class="params">cons</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = &#123;&#125;;</span><br><span class="line">    cons.apply(result, <span class="built_in">arguments</span>);</span><br><span class="line">    result.__proto__ = cons.prototype;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newDemo = newConstructor(Demo);</span><br><span class="line"><span class="keyword">let</span> a = newDemo(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">a.test();</span><br></pre></td></tr></table></figure>

<ul>
<li>试了好一会试出来的</li>
<li>一直用prototype方法不行,挠头….</li>
<li><strong>proto</strong> 这个方法记得不是标准写法</li>
<li>标准写法是contructor prototype?看答案吧</li>
</ul>
<h3 id="最高赞题解"><a href="#最高赞题解" class="headerlink" title="最高赞题解"></a>最高赞题解</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">fn, ...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">    <span class="keyword">const</span> ret = fn.apply(obj, arg);</span><br><span class="line">    <span class="keyword">return</span> ret <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? ret : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="先理清楚-new-关键字调用函数都的具体过程，那么写出来就很清楚了"><a href="#先理清楚-new-关键字调用函数都的具体过程，那么写出来就很清楚了" class="headerlink" title="先理清楚 new 关键字调用函数都的具体过程，那么写出来就很清楚了"></a>先理清楚 new 关键字调用函数都的具体过程，那么写出来就很清楚了</h4><ul>
<li>首先创建一个空的对象，空对象的<strong>proto</strong>属性指向构造函数的原型对象</li>
<li>把上面创建的空对象赋值构造函数内部的this，用构造函数内部的方法修改空对象</li>
<li>如果构造函数返回一个非基本类型的值，则返回这个值，否则上面创建的对象</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li><strong>proto</strong> 不是标准对象,使用<code>Object.create(fn.prototye)</code>创建原型对象</li>
<li>需要判断传入的对象是不是null或者undefined来判断是否返回实例对象</li>
<li>不需要使用必包的方式进行返回(单例模式或许可以)</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/12" target="_blank" rel="noopener">如何实现一个new</a><br><a href="https://github.com/zwmmm" target="_blank" rel="noopener">最高赞作者github</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个观察者模式</title>
    <url>/post/bc8a6d14.html</url>
    <content><![CDATA[<h1 id="实现一个基础当观察者模式-当被观察者变动当时候-通知观察者"><a href="#实现一个基础当观察者模式-当被观察者变动当时候-通知观察者" class="headerlink" title="实现一个基础当观察者模式,当被观察者变动当时候,通知观察者."></a>实现一个基础当观察者模式,当被观察者变动当时候,通知观察者.</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  update(updateInfo) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>更新,更新消息为<span class="subst">$&#123;updateInfo&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observerd</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList = [];</span><br><span class="line">  &#125;</span><br><span class="line">  addObserve(observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.push(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notice(updateInfo = <span class="string">"更新消息"</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> observe <span class="keyword">of</span> <span class="keyword">this</span>.observerList) &#123;</span><br><span class="line">      observe.update(updateInfo);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fooObserve = <span class="keyword">new</span> Observer(<span class="string">"foo"</span>);</span><br><span class="line"><span class="keyword">let</span> barObserve = <span class="keyword">new</span> Observer(<span class="string">"bar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observed = <span class="keyword">new</span> Observerd();</span><br><span class="line"></span><br><span class="line">observed.addObserve(fooObserve);</span><br><span class="line">observed.addObserve(barObserve);</span><br><span class="line">observed.notice(<span class="string">"测试消息"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>寻找数组里面出现一次的数字</title>
    <url>/post/89251c68.html</url>
    <content><![CDATA[<h1 id="给定一个数字数组-数组里只会有两个数字-取出唯一一个数字的位置"><a href="#给定一个数字数组-数组里只会有两个数字-取出唯一一个数字的位置" class="headerlink" title="给定一个数字数组, 数组里只会有两个数字, 取出唯一一个数字的位置"></a>给定一个数字数组, 数组里只会有两个数字, 取出唯一一个数字的位置</h1><h2 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,1,1,2,1,1]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为数组里唯一一个2出现的位置是3。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,2,2,2,2,2,2]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 因为数组里唯一一个4出现的位置是0。</span><br></pre></td></tr></table></figure>
<p>数组长度为10000</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> demo = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**返回数组中不一样的元素**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDiff</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i - <span class="number">1</span>] === arr[i]) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[i - <span class="number">1</span>] === arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findDiff(arr));</span><br><span class="line"><span class="comment">// console.log(findDiff(demo));</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>小有感触</title>
    <url>/post/d7b1dab2.html</url>
    <content><![CDATA[<p>看到十年前自己写的一些东西，光阴似箭啊。。<br>一转眼十几年过去了。<br>好像自己从来没做出过什么emm 不知道该怎么形容。。<br>没有什么特别出彩的东西？<br>可能是吧。</p>
<p>感觉浪费了很多时间，但是又没有毅力去改变。。<br>可怕的就是这种情况吧。</p>
<p>也许可以定一个目标，做点什么东西，在这个世界留下点什么东西。<br>emmm，如果可以，我想这个东西会是好的。</p>
<p>思绪有点乱。</p>
<p>也有可能。。<br>emm 大概率。。<br>碌碌无为一生。</p>
<p>上班，结婚，生子。</p>
<p>快三十了呀。</p>
<p>2008年。。</p>
<p>你觉得很重要的事情。。<br>可能在大部分人看来。。em 也许都记不住。<br>人总是渺小的</p>
<p>要做点什么。</p>
<p>随便谢谢，记录一下。</p>
<p>多年以后在看，也许有不一样的感觉。</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
      <tags>
        <tag>生活感想</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl2 局域网访问</title>
    <url>/post/f8d8bb21.html</url>
    <content><![CDATA[<h1 id="想在局域网内访问-wsl-端口"><a href="#想在局域网内访问-wsl-端口" class="headerlink" title="想在局域网内访问 wsl 端口"></a>想在局域网内访问 wsl 端口</h1><p>主要工作环境都在wsl里面，有时候想用真机调试，需要局域网访问</p>
<p>TODO<br>有空写吧</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>异步解决方案的发展历程以及优缺点。</title>
    <url>/post/74ffa402.html</url>
    <content><![CDATA[<h1 id="（滴滴、挖财、微医、海康）JS-异步解决方案的发展历程以及优缺点"><a href="#（滴滴、挖财、微医、海康）JS-异步解决方案的发展历程以及优缺点" class="headerlink" title="（滴滴、挖财、微医、海康）JS 异步解决方案的发展历程以及优缺点"></a>（滴滴、挖财、微医、海康）JS 异步解决方案的发展历程以及优缺点</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><ul>
<li>callback-&gt;promise-&gt;generator/yield-&gt;async/await<h3 id="callback-最初的方案"><a href="#callback-最初的方案" class="headerlink" title="callback (最初的方案)"></a>callback (最初的方案)</h3><blockquote>
<p>最开始使用的是callback,比如浏览器端的dom事件,ajax.node上的io事件等等,但是有定位问题困难,callback hell,异常处理等问题</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浏览器端</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// do something </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// nodejs</span></span><br><span class="line">fs.readFile(<span class="string">'path'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// do something </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><blockquote>
<p>相比callback的回调写法,链式调用的写法更优雅,异常处理变得友好.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"something"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">demo()</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// something</span></span><br><span class="line">    <span class="keyword">return</span> res + <span class="string">"then"</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"err"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message); <span class="comment">// err</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>


<h3 id="generator-yield"><a href="#generator-yield" class="headerlink" title="generator/yield"></a>generator/yield</h3><blockquote>
<p>用的不多,不做评价.emmm 打扰了</p>
</blockquote>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><blockquote>
<p>异步终极解决方案,generator/yield语法糖,基于promise,同步的写法,同步代码的异常捕获能力.强!无敌!</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"something"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> demo();</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// some</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"error"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e); <span class="comment">// error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure>

<h2 id="最高赞题解"><a href="#最高赞题解" class="headerlink" title="最高赞题解"></a>最高赞题解</h2><p>JS 异步已经告一段落了，这里来一波小总结</p>
<h3 id="1-回调函数（callback）"><a href="#1-回调函数（callback）" class="headerlink" title="1. 回调函数（callback）"></a>1. 回调函数（callback）</h3><p>setTimeout(() =&gt; {<br>    // callback 函数体<br>}, 1000)<br>缺点：回调地狱，不能用 try catch 捕获错误，不能 return</p>
<p>回调地狱的根本问题在于：</p>
<ul>
<li>缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符</li>
<li>嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身，即（控制反转）</li>
<li>嵌套函数过多的多话，很难处理错误<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">'XXX1'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// callback 函数体</span></span><br><span class="line">    ajax(<span class="string">'XXX2'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// callback 函数体</span></span><br><span class="line">        ajax(<span class="string">'XXX3'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="comment">// callback 函数体</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
优点：解决了同步的问题（只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。）</li>
</ul>
<h3 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2. Promise"></a>2. Promise</h3><p>Promise就是为了解决callback的问题而产生的。</p>
<p>Promise 实现了链式调用，也就是说每次 then 后返回的都是一个全新 Promise，如果我们在 then 中 return ，return 的结果会被 Promise.resolve() 包装</p>
<p>优点：解决了回调地狱的问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">'XXX1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 操作逻辑</span></span><br><span class="line">      <span class="keyword">return</span> ajax(<span class="string">'XXX2'</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 操作逻辑</span></span><br><span class="line">      <span class="keyword">return</span> ajax(<span class="string">'XXX3'</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 操作逻辑</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>缺点：无法取消 Promise ，错误需要通过回调函数来捕获</p>
<h3 id="3-Generator"><a href="#3-Generator" class="headerlink" title="3. Generator"></a>3. Generator</h3><p>特点：可以控制函数的执行，可以配合 co 函数库使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">fetch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> ajax(<span class="string">'XXX1'</span>, () =&gt; &#123;&#125;)</span><br><span class="line">    <span class="keyword">yield</span> ajax(<span class="string">'XXX2'</span>, () =&gt; &#123;&#125;)</span><br><span class="line">    <span class="keyword">yield</span> ajax(<span class="string">'XXX3'</span>, () =&gt; &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = fetch()</span><br><span class="line"><span class="keyword">let</span> result1 = it.next()</span><br><span class="line"><span class="keyword">let</span> result2 = it.next()</span><br><span class="line"><span class="keyword">let</span> result3 = it.next()</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### 4. Async/await</span></span><br><span class="line"><span class="string">async、await 是异步的终极解决方案</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">优点是：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 以下代码没有依赖性的话，完全可以使用 Promise.all 的方式</span></span><br><span class="line">  <span class="comment">// 如果有依赖性的话，其实就是解决回调地狱的例子了</span></span><br><span class="line">  <span class="keyword">await</span> fetch(<span class="string">'XXX1'</span>)</span><br><span class="line">  <span class="keyword">await</span> fetch(<span class="string">'XXX2'</span>)</span><br><span class="line">  <span class="keyword">await</span> fetch(<span class="string">'XXX3'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="下面来看一个使用-await-的例子："><a href="#下面来看一个使用-await-的例子：" class="headerlink" title="下面来看一个使用 await 的例子："></a>下面来看一个使用 await 的例子：</h3><pre><code class="javascript"><span class="keyword">let</span> a = <span class="number">0</span>
<span class="keyword">let</span> b = <span class="keyword">async</span> () =&gt; {
  a = a + <span class="keyword">await</span> <span class="number">10</span>
  <span class="built_in">console</span>.log(<span class="string">'2'</span>, a) <span class="comment">// -&gt; '2' 10</span>
}
b()
a++
<span class="built_in">console</span>.log(<span class="string">'1'</span>, a) <span class="comment">// -&gt; '1' 1</span></code></pre>
<p>对于以上代码你可能会有疑惑，让我来解释下原因</p>
<p>首先函数 b 先执行，在执行到 await 10 之前变量 a 还是 0，因为 await 内部实现了 generator ，generator 会保留堆栈中东西，所以这时候 a = 0 被保存了下来<br>因为 await 是异步操作，后来的表达式不返回 Promise 的话，就会包装成 Promise.reslove(返回值)，然后会去执行函数外的同步代码<br>同步代码执行完毕后开始执行异步代码，将保存下来的值拿出来使用，这时候 a = 0 + 10<br>上述解释中提到了 await 内部实现了 generator，其实 await 就是 generator 加上 Promise的语法糖，且内部实现了自动执行 generator。如果你熟悉 co 的话，其实自己就可以实现这样的语法糖。</p>
<p>本文首发于我的博客：JS异步解决方案的发展历程以及优缺点</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/11" target="_blank" rel="noopener">文章链接</a><br><a href="https://github.com/sisterAn" target="_blank" rel="noopener">最高赞作者github</a><br><a href="https://github.com/sisterAn/blog/issues/29" target="_blank" rel="noopener">最高赞作者地址 JS异步解决方案的发展历程以及优缺点 </a><br><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="noopener">阮一峰 Javascript异步编程的4种方法</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>斐波那契额数列第n位</title>
    <url>/post/c680a8e9.html</url>
    <content><![CDATA[<h1 id="斐波那契额数列第n位-算法题"><a href="#斐波那契额数列第n位-算法题" class="headerlink" title="斐波那契额数列第n位 算法题"></a>斐波那契额数列第n位 算法题</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><h3 id="递归的方式"><a href="#递归的方式" class="headerlink" title="递归的方式"></a>递归的方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">fibonacci(<span class="number">40</span>)</span><br></pre></td></tr></table></figure>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h4><ul>
<li>运行时间为1360ms左右,性能比较差</li>
<li>到45位的时候计算时间已经是15s</li>
</ul>
<h3 id="递归的方式-加一层缓存"><a href="#递归的方式-加一层缓存" class="headerlink" title="递归的方式,加一层缓存"></a>递归的方式,加一层缓存</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n, cache</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!cache) &#123;</span><br><span class="line">    cache = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (cache[n]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[n];</span><br><span class="line">  &#125;</span><br><span class="line">  cache[n] = fibonacci(n - <span class="number">1</span>, cache) + fibonacci(n - <span class="number">2</span>, cache);</span><br><span class="line">  <span class="keyword">return</span> cache[n];</span><br><span class="line">&#125;</span><br><span class="line">fibonacci(<span class="number">40</span>)</span><br></pre></td></tr></table></figure>
<h4 id="结论-1"><a href="#结论-1" class="headerlink" title="结论:"></a>结论:</h4><ul>
<li>第5000位的时候是9ms,此时数值已经是超过js最大数值,为Infinity</li>
<li>9000位左右递归栈会爆掉</li>
</ul>
<h3 id="循环的方式"><a href="#循环的方式" class="headerlink" title="循环的方式"></a>循环的方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    arr.push(arr[arr.length - <span class="number">1</span>] + arr[arr.length - <span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">fibonacci(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<h4 id="结论-2"><a href="#结论-2" class="headerlink" title="结论:"></a>结论:</h4><ul>
<li>性能最佳,5000位约7毫秒</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>递归一般情况下性能比普通循环要低</li>
<li>递归可能会爆栈</li>
<li>除非必须要递归的方式、其他方案成本过高、能确定递归次数较少,不然不建议用递归</li>
<li>某些文档提到尾递归可以提高性能,但是这个斐波那契额数列,没有找到使用尾递归的方式,单独开一篇尾递归的内容</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？</title>
    <url>/post/6fa7f909.html</url>
    <content><![CDATA[<h1 id="Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？"><a href="#Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？" class="headerlink" title="Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？"></a>Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><blockquote>
<p>构造函数是同步执行,then的时候是异步</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    reslove(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">demo().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 3 2</span></span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/19" target="_blank" rel="noopener">第 13 题：Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？ #19</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>有以下3个判断数组的方法，请分别介绍它们之间的区别和优劣</title>
    <url>/post/e30667a1.html</url>
    <content><![CDATA[<h1 id="有以下-3-个判断数组的方法，请分别介绍它们之间的区别和优劣Object-prototype-toString-call-、-instanceof-以及-Array-isArray"><a href="#有以下-3-个判断数组的方法，请分别介绍它们之间的区别和优劣Object-prototype-toString-call-、-instanceof-以及-Array-isArray" class="headerlink" title="有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣Object.prototype.toString.call() 、 instanceof 以及 Array.isArray()"></a>有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣Object.prototype.toString.call() 、 instanceof 以及 Array.isArray()</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><p>1、Object.prototype.toString.call(),是使用原型上的toString()方法,输出为[Object xxxxx],通过xxxxx的内容判断当前的类型.目前大部分判断类型都是基于此方法,比较准确</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])); <span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>)); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">NaN</span>)); <span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">"1"</span>)); <span class="comment">//[object Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>)); <span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)); <span class="comment">//[object Null]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)); <span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/reg/</span>)); <span class="comment">//[object RegExp]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)); <span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>)); <span class="comment">//[object Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Set</span>())); <span class="comment">//[object Set]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Map</span>())); <span class="comment">//[object Map]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">//[object Date]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">WeakSet</span>())); <span class="comment">//[object WeakSet]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">WeakMap</span>())); <span class="comment">//[object WeakMap]</span></span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure>
<p>2、instanceof是基于原型链的判断方法,一个数组会找到他的原型是不是属于array,如果是返回true</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fsimpleStr = <span class="string">"This is a simple string"</span>; </span><br><span class="line"><span class="keyword">let</span> fmyString  = <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line"><span class="keyword">let</span> fnewStr    = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"String created with LETructor"</span>);</span><br><span class="line"><span class="keyword">let</span> fmyDate    = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> fmyObj     = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> fmyNonObj  = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">simpleStr <span class="keyword">instanceof</span> <span class="built_in">String</span>; <span class="comment">// 返回 false, 检查原型链会找到 undefined</span></span><br><span class="line">myString  <span class="keyword">instanceof</span> <span class="built_in">String</span>; <span class="comment">// 返回 true</span></span><br><span class="line">newStr    <span class="keyword">instanceof</span> <span class="built_in">String</span>; <span class="comment">// 返回 true</span></span><br><span class="line">myString  <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// 返回 true</span></span><br><span class="line"></span><br><span class="line">myObj <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">// 返回 true, 尽管原型没有定义</span></span><br><span class="line">(&#123;&#125;)  <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">// 返回 true, 同上</span></span><br><span class="line">myNonObj <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// 返回 false, 一种创建非 Object 实例的对象的方法</span></span><br><span class="line"></span><br><span class="line">myString <span class="keyword">instanceof</span> <span class="built_in">Date</span>; <span class="comment">//返回 false</span></span><br><span class="line"></span><br><span class="line">myDate <span class="keyword">instanceof</span> <span class="built_in">Date</span>;     <span class="comment">// 返回 true</span></span><br><span class="line">myDate <span class="keyword">instanceof</span> <span class="built_in">Object</span>;   <span class="comment">// 返回 true</span></span><br><span class="line">myDate <span class="keyword">instanceof</span> <span class="built_in">String</span>;   <span class="comment">// 返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> demo = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(demo <span class="keyword">instanceof</span> Child); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(demo <span class="keyword">instanceof</span> Parent); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(demo <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>3、Array.isArray(),Array对象上提供的判断是否是数组的方法,比较准确</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;<span class="attr">foo</span>: <span class="number">123</span>&#125;); </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">"foobar"</span>);   </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);  </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的函数调用都返回 true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>))</span><br><span class="line"><span class="comment">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的函数调用都返回 false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray();</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">17</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'Array'</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">__proto__</span>: <span class="built_in">Array</span>.prototype &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/23" target="_blank" rel="noopener">第 21 题：有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣Object.prototype.toString.call() 、 instanceof 以及 Array.isArray()</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" target="_blank" rel="noopener">MDN isArray</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener">MDN instanceof</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>有效的数独</title>
    <url>/post/181c4103.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。</p>
<ul>
<li>数字 1-9 在每一行只能出现一次。</li>
<li>数字 1-9 在每一列只能出现一次。</li>
<li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）<br>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。</li>
</ul>
<p>注意：</p>
<ul>
<li>一个有效的数独（部分已被填充）不一定是可解的。</li>
<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>
</ul>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul>
<li>暴力解法，用set存数据看是否有重复的</li>
<li>难点在于 方块3*3的计算公式，不知道怎么推导出来的。</li>
<li>自己写的话，需要花好长的时间去慢慢试出来这个公式</li>
<li>Math.floor(Math.floor(Math.floor(i / 3) * 3) + Math.floor(j / 3));<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidSudoku</span>(<span class="params">board: <span class="built_in">string</span>[][]</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> rowSet = <span class="keyword">new</span> Set();</span><br><span class="line">    <span class="keyword">let</span> colSet = <span class="keyword">new</span> Set();</span><br><span class="line">    <span class="keyword">let</span> squareSet = <span class="keyword">new</span> Set();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (board[i][j] != <span class="string">"."</span> &amp;&amp; rowSet.has(board[i][j])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      rowSet.add(board[i][j]);</span><br><span class="line">      <span class="keyword">if</span> (board[j][i] != <span class="string">"."</span> &amp;&amp; colSet.has(board[j][i])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      colSet.add(board[j][i]);</span><br><span class="line">      <span class="keyword">let</span> a = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.floor(i / <span class="number">3</span>) * <span class="number">3</span>) + <span class="built_in">Math</span>.floor(j / <span class="number">3</span>));</span><br><span class="line">      <span class="keyword">let</span> b = <span class="built_in">Math</span>.floor((i % <span class="number">3</span>) * <span class="number">3</span> + (j % <span class="number">3</span>));</span><br><span class="line">      <span class="keyword">if</span> (board[a][b] != <span class="string">"."</span> &amp;&amp; squareSet.has(board[a][b])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      squareSet.add(board[a][b]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li>作者：力扣 (LeetCode)</li>
<li>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2f9gg/" target="_blank" rel="noopener">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2f9gg/</a></li>
<li>来源：力扣（LeetCode）</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-p-40-1</title>
    <url>/post/97c01ff5.html</url>
    <content><![CDATA[<h2 id="x-0x66-y-0x39-计算下列值"><a href="#x-0x66-y-0x39-计算下列值" class="headerlink" title="x=0x66 y = 0x39 计算下列值"></a>x=0x66 y = 0x39 计算下列值</h2><table>
<thead>
<tr>
<th>运算</th>
<th>二进制</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>x</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>x &amp;&amp; y</td>
<td>0x01</td>
</tr>
<tr>
<td>x || y</td>
<td>0x01</td>
</tr>
<tr>
<td>x &amp;&amp;~y</td>
<td>0x01</td>
</tr>
</tbody></table>
<h2 id="用位运算与逻辑运算，实现一-x-y"><a href="#用位运算与逻辑运算，实现一-x-y" class="headerlink" title="用位运算与逻辑运算，实现一 x==y"></a>用位运算与逻辑运算，实现一 x==y</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">equal_val</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x ^ y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="位移运算，假设只有只有八位的位移情况"><a href="#位移运算，假设只有只有八位的位移情况" class="headerlink" title="位移运算，假设只有只有八位的位移情况"></a>位移运算，假设只有只有八位的位移情况</h2><table>
<thead>
<tr>
<th>x</th>
<th>x</th>
<th>x &lt;&lt;3</th>
<th>x &lt;&lt;3</th>
<th>x &gt;&gt;2(逻辑的)</th>
<th>x &gt;&gt;2(逻辑的)</th>
<th>x &gt;&gt;2(算术的)</th>
<th>x &gt;&gt;2(算术的)</th>
</tr>
</thead>
<tbody><tr>
<td>十六进制</td>
<td>二进制</td>
<td>二进制</td>
<td>十六进制</td>
<td>二进制</td>
<td>十六进制</td>
<td>二进制</td>
<td>十六进制</td>
</tr>
<tr>
<td>0xc3</td>
<td>11000011</td>
<td>00011000</td>
<td>0x18</td>
<td>00110000</td>
<td>0x30</td>
<td>11110000</td>
<td>0xf0</td>
</tr>
<tr>
<td>0x75</td>
<td>01110101</td>
<td>10101000</td>
<td>0xA8</td>
<td>00011101</td>
<td>0x1d</td>
<td>00011101</td>
<td>0x1d</td>
</tr>
<tr>
<td>0x87</td>
<td>10000111</td>
<td>00111000</td>
<td>0x38</td>
<td>00100001</td>
<td>0x21</td>
<td>11100001</td>
<td>0xe1</td>
</tr>
<tr>
<td>0x66</td>
<td>01100110</td>
<td>00110000</td>
<td>0x30</td>
<td>00011001</td>
<td>0x19</td>
<td>00011001</td>
<td>0x19</td>
</tr>
</tbody></table>
<blockquote>
<p>正确性未确认</p>
</blockquote>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/post/54e1476d.html</url>
    <content><![CDATA[<h2 id="什么是防抖和节流？有什么区别？如何实现？"><a href="#什么是防抖和节流？有什么区别？如何实现？" class="headerlink" title="什么是防抖和节流？有什么区别？如何实现？"></a>什么是防抖和节流？有什么区别？如何实现？</h2><h3 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><blockquote>
<p>在一个时间段内,如果有触发多次,只执行一次.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const debonce &#x3D; (fn, timer) &#x3D;&gt; &#123;</span><br><span class="line">  let loop &#x3D; null;</span><br><span class="line">  return function () &#123;</span><br><span class="line">    if (loop) &#123;</span><br><span class="line">      clearTimeout(loop);</span><br><span class="line">    &#125;</span><br><span class="line">    loop &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      fn.apply(this, arguments);</span><br><span class="line">    &#125;, timer);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function demo(arg1, arg2) &#123;</span><br><span class="line">  console.log(arg1, arg2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let debonceDemo &#x3D; debonce(demo, 1000);</span><br><span class="line">let i &#x3D; 0;</span><br><span class="line">let test &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">  debonceDemo(1, 2);</span><br><span class="line">  if (++i &gt; 100) &#123;</span><br><span class="line">    clearInterval(test);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 10);</span><br></pre></td></tr></table></figure>
<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><blockquote>
<p>不论执行速度有多快,固定时间内执行的次数只有一次</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const throttle &#x3D; (fn, timer) &#x3D;&gt; &#123;</span><br><span class="line">  let loop &#x3D; true;</span><br><span class="line">  return function () &#123;</span><br><span class="line">    if (!loop) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    loop &#x3D; false;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      fn.apply(this, arguments);</span><br><span class="line">      loop &#x3D; true;</span><br><span class="line">    &#125;, timer);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function demo(arg1, arg2) &#123;</span><br><span class="line">  console.log(arg1, arg2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let throttleDemo &#x3D; throttle(demo, 1000);</span><br><span class="line">let i &#x3D; 0;</span><br><span class="line">let test &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">  throttleDemo(1, 2);</span><br><span class="line">  if (++i &gt; 100) &#123;</span><br><span class="line">    clearInterval(test);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 100);</span><br></pre></td></tr></table></figure>

<h3 id="最高赞题解"><a href="#最高赞题解" class="headerlink" title="最高赞题解"></a>最高赞题解</h3><h4 id="防抖-1"><a href="#防抖-1" class="headerlink" title="防抖"></a>防抖</h4><blockquote>
<p>触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p>
</blockquote>
<h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote>
<p>每次触发事件时都取消之前的延时调用方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function debounce(fn) &#123;</span><br><span class="line">      let timeout &#x3D; null; &#x2F;&#x2F; 创建一个标记用来存放定时器的返回值</span><br><span class="line">      return function () &#123;</span><br><span class="line">        clearTimeout(timeout); &#x2F;&#x2F; 每当用户输入的时候把前一个 setTimeout clear 掉</span><br><span class="line">        timeout &#x3D; setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span><br><span class="line">          fn.apply(this, arguments);</span><br><span class="line">        &#125;, 500);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    function sayHi() &#123;</span><br><span class="line">      console.log(&#39;防抖成功&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var inp &#x3D; document.getElementById(&#39;inp&#39;);</span><br><span class="line">    inp.addEventListener(&#39;input&#39;, debounce(sayHi)); &#x2F;&#x2F; 防抖</span><br></pre></td></tr></table></figure>
<h4 id="节流-1"><a href="#节流-1" class="headerlink" title="节流"></a>节流</h4><blockquote>
<p>高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p>
</blockquote>
<h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><blockquote>
<p>每次触发事件时都判断当前是否有等待执行的延时函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throttle(fn) &#123;</span><br><span class="line">      let canRun &#x3D; true; &#x2F;&#x2F; 通过闭包保存一个标记</span><br><span class="line">      return function () &#123;</span><br><span class="line">        if (!canRun) return; &#x2F;&#x2F; 在函数开头判断标记是否为true，不为true则return</span><br><span class="line">        canRun &#x3D; false; &#x2F;&#x2F; 立即设置为false</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 将外部传入的函数的执行放在setTimeout中</span><br><span class="line">          fn.apply(this, arguments);</span><br><span class="line">          &#x2F;&#x2F; 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span><br><span class="line">          canRun &#x3D; true;</span><br><span class="line">        &#125;, 500);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    function sayHi(e) &#123;</span><br><span class="line">      console.log(e.target.innerWidth, e.target.innerHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    window.addEventListener(&#39;resize&#39;, throttle(sayHi));</span><br></pre></td></tr></table></figure>

<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/5" target="_blank" rel="noopener">第 3 题：什么是防抖和节流？有什么区别？如何实现？</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp-p-36-1</title>
    <url>/post/e9a5bfe.html</url>
    <content><![CDATA[<h2 id="给出位向量的布尔运算"><a href="#给出位向量的布尔运算" class="headerlink" title="给出位向量的布尔运算"></a>给出位向量的布尔运算</h2><table>
<thead>
<tr>
<th>运算</th>
<th>二进制</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>[01101001]</td>
</tr>
<tr>
<td>b</td>
<td>[01010101]</td>
</tr>
<tr>
<td>~a</td>
<td>[10010110]</td>
</tr>
<tr>
<td>~b</td>
<td>[10101010]</td>
</tr>
<tr>
<td>a&amp;b</td>
<td>[01000001]</td>
</tr>
<tr>
<td>a|b</td>
<td>[01111101]</td>
</tr>
<tr>
<td>a^b</td>
<td>[00111110]</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>看到了以前写的项目</title>
    <url>/post/acd5828c.html</url>
    <content><![CDATA[<p>啊，年轻时候的我，写的代码还挺规范的嘛。</p>
<p>原来以为那个项目已经挂掉了，没想到现在还在运行。</p>
<p>嗨，从16年开始学前端到现在。。快六年了。真特么快啊。。</p>
<p>擦，刚找自己写的第一个项目竟然没有备案，挂掉了卧槽。</p>
<p>没法装逼，可惜了。</p>
<p>年轻真好…</p>
<p>又想到了以前的很多事情，一个不到20平米的隔断间，住了四个人。</p>
<p>床上睡不下，把床掀了大家一起打地铺。</p>
<p>每天九点上班，五点九下班，下班就去网吧嗨。。</p>
<p>租了一个两室一厅的房子，一个月1200？三个月交一次房租，结果三个月到了，我们没钱交房租了，emmm，直到现在我都不敢一次性交三个月房租。。</p>
<p>啊，那时候是真穷啊。。</p>
<p>不过真的挺快乐。</p>
<p>几个吊毛，天天嗷嗷叫，一起看片，网吧通宵，真刺激</p>
<p>回不去了。。</p>
<p>还是有些对不住的人。。</p>
<p>一时间想起来，有点难过。</p>
<p>emmmm</p>
<p>做的那些事情有用吗。</p>
<p>二十岁的时候，买了十岁买不起的玩具，有什么意义吗</p>
<p>终归是让自己心里好过一点</p>
<p>好多事情，忍不住泪目</p>
<p>果然，晚上不适合瞎J8想。</p>
]]></content>
      <tags>
        <tag>生活感想</tag>
      </tags>
  </entry>
  <entry>
    <title>第一天，随便写写</title>
    <url>/post/3d2ca5d9.html</url>
    <content><![CDATA[<h1 id="聊聊生活-写写技术"><a href="#聊聊生活-写写技术" class="headerlink" title="聊聊生活,写写技术."></a>聊聊生活,写写技术.</h1><h3 id="欢迎加入前端交流群·VUE-JS-TS-全栈-前端交流·群号-318195769"><a href="#欢迎加入前端交流群·VUE-JS-TS-全栈-前端交流·群号-318195769" class="headerlink" title="欢迎加入前端交流群·VUE|JS|TS|全栈|前端交流·群号:318195769"></a>欢迎加入前端交流群·VUE|JS|TS|全栈|前端交流·群号:318195769</h3>]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>简单讲解一下http2的多路复用</title>
    <url>/post/50bdca19.html</url>
    <content><![CDATA[<h1 id="简单讲解一下http2的多路复用"><a href="#简单讲解一下http2的多路复用" class="headerlink" title="简单讲解一下http2的多路复用"></a>简单讲解一下http2的多路复用</h1><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>不会</p>
<h2 id="最高赞题解"><a href="#最高赞题解" class="headerlink" title="最高赞题解"></a>最高赞题解</h2><p>在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，但是依然有两个效率上的问题：</p>
<p>第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）<br>第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。<br>HTTP/2的多路复用就是为了解决上述的两个性能问题。<br>在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。<br>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。<br>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>不会</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/14" target="_blank" rel="noopener">第 15 题：简单讲解一下 http2 的多路复用 #14</a><br><a href="https://http2.akamai.com/demo" target="_blank" rel="noopener">http1.1 与 http2 对比</a><br><a href="https://www.zhihu.com/question/34074946" target="_blank" rel="noopener">HTTP/2 相比 1.0 有哪些重大改进？</a><br><a href="https://imququ.com/post/http2-resource.html" target="_blank" rel="noopener">HTTP/2 资料汇总</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
  </entry>
  <entry>
    <title>算法手写题</title>
    <url>/post/1942942a.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>已知如下数组：<br>var arr = [[1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14]]]], 10];<br>编写一个程序将数组扁平化去并除其中重复部分数据，最终得到一个升序且不重复的数组</p>
</blockquote>
<h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><ul>
<li><p>递归;</p>
<blockquote>
<p>不想写</p>
</blockquote>
</li>
<li><p>while循环遍历</p>
<blockquote>
<p>不想写</p>
</blockquote>
</li>
<li><p>Array.prototype.flat</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">11</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]], <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayFlat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr.flat(<span class="literal">Infinity</span>))).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123; <span class="keyword">return</span> a-b&#125;);</span><br><span class="line">&#125;</span><br><span class="line">arrayFlat(arr) <span class="comment">//</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>骚操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">11</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]], <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saocaozuo</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr.toString().split(<span class="string">","</span>))].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;</span><br><span class="line">saocaozuo(arr) <span class="comment">//</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/8" target="_blank" rel="noopener">第 11 题：将数组扁平化并去除其中重复数据，最终得到一个升序且不重复的数组</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">Array.prototype.flat() MDN</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>emm</title>
    <url>/post/520dd8d6.html</url>
    <content><![CDATA[<p>一开始底牌尽处的人,注定是输家.</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>记一次Array.prototype.sort的问题</title>
    <url>/post/1ebb0fbc.html</url>
    <content><![CDATA[<h2 id="Array-prototype-sort在不同的宿主环境-不同版本-排序方式会不同"><a href="#Array-prototype-sort在不同的宿主环境-不同版本-排序方式会不同" class="headerlink" title="Array.prototype.sort在不同的宿主环境,不同版本,排序方式会不同."></a>Array.prototype.sort在不同的宿主环境,不同版本,排序方式会不同.</h2><p>由于开发版本为nodev12,生产版本为nodev10,写了一个sort方法,两份代码,同样的数据,同样的代码内容.排序的内容确不一样.<br>v8引改变了sort方法的排序方式,导致两个版本排序的结果不一样.<br>最后使用lodash的orderby方法解决.<br>其实可以考虑自己写排序.后来感觉太麻烦了…<br>啊!!!我一定要把生产环境的node升级了!!!!!</p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次nuxt引入videojs的问题</title>
    <url>/post/1fa17b1.html</url>
    <content><![CDATA[<h1 id="记一次nuxt引入videojs排查问题经历"><a href="#记一次nuxt引入videojs排查问题经历" class="headerlink" title="记一次nuxt引入videojs排查问题经历"></a>记一次nuxt引入videojs排查问题经历</h1><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>开发的项目是基于nuxt框架,项目中需要使用videojs,在开发阶段没有问题,使用与样式展示都没有问题.</p>
<p>在打包之后运行,发现videojs的样式不能正确展示.样式错误,发现样式没有被打包.</p>
<h2 id="解决问题-阶段1"><a href="#解决问题-阶段1" class="headerlink" title="解决问题(阶段1)"></a>解决问题(阶段1)</h2><p>发现nuxt.config.js里面有一个配置<code>extractCSS</code>是用来提取css的,把css提取到一个文件里面,把这个配置设置为<code>false</code>就可以解决这个问题.</p>
<p>但是有了新的问题,因为没有提取css,nuxt在服务端渲染的时候,会把所有的样式在html页面返回,导致html的文件比较大.</p>
<p>当时花了一些时间,只找到这个解决办法,而且项目比较赶,暂时这样解决</p>
<h2 id="解决问题-阶段2"><a href="#解决问题-阶段2" class="headerlink" title="解决问题(阶段2)"></a>解决问题(阶段2)</h2><p>网页需要seo,因为样式全在html里面,不相关内容太多,权重比较低.seo大佬建议去掉这些样式.</p>
<p>找了好久,发现是因为用了<code>tailwindcss</code>这个ui框架,<code>tailwindcss</code>建议使用<code>purgecss</code>这个库来去除不需要的css,不然打包后的文件会比较大.</p>
<p>videojs是在客户端使用js动态添加的class,导致<code>purgecss</code>匹配不到这些样式.所以就从打包后的css内删除.导致样式展示错误.</p>
<p>去看官方文档,看到有一个safelist可以保留这些样式于是在nuxt.config.js内增加如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    purgeCSS:&#123;</span><br><span class="line">        safelist: [<span class="regexp">/vjs/</span>, /video/]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现不起作用,各种尝试,<code>safelist.deep</code>,<code>safelist.standard</code>属性,不使用正则等…还是不行,直到看到了一个tip</p>
<p><img src="https://oss.wddv.com/www/article/20201111164002.png" alt="20201111164002"></p>
<p>对比了一下自己的安装的依赖,发现nuxt使用的是老版本的purgecss,找到的相关的配置,代码如下.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    purgeCSS: &#123;</span><br><span class="line">        whitelistPatterns: [<span class="regexp">/vjs/</span>, /video/],</span><br><span class="line">        whitelistPatternsChildren: [<span class="regexp">/vjs/</span>, /video/]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题解决.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>使用tailwindcss样式库,而且用到purgecss这个插件,要注意打包过后的样式是否正确,这个插件会删除不用的css(就是在页面中,没有匹配到相应的class名).</li>
<li>在如上前提下,出现新引入的框架样式展示不正确,考虑在nuxt.config.js里面添加相应的配置.</li>
<li>purgecss 3.0版本以上添加 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    purgeCSS:&#123;</span><br><span class="line">        safelist: [<span class="regexp">/vjs/</span>, /video/]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>purgecss 2.x 版本添加<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    purgeCSS: &#123;</span><br><span class="line">        whitelistPatterns: [<span class="regexp">/vjs/</span>, /video/],</span><br><span class="line">        whitelistPatternsChildren: [<span class="regexp">/vjs/</span>, /video/]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>发现问题要及时解决.不能有 <code>又不是不能用</code> 这个心态…55555.</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://purgecss.com/safelisting.html#specific-selectors" target="_blank" rel="noopener">purgecss 最新文档</a></li>
<li><a href="https://github.com/FullHuman/purgecss/tree/5314e41edf328e2ad2639549e1587b82a964a42e/docs" target="_blank" rel="noopener">purgecss 老版本文档</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>nuxt</tag>
        <tag>videoJs</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈你对TCP三次握手和四次挥手的理解</title>
    <url>/post/7d1b1002.html</url>
    <content><![CDATA[<h1 id="谈谈你对TCP三次握手和四次挥手的理解"><a href="#谈谈你对TCP三次握手和四次挥手的理解" class="headerlink" title="谈谈你对TCP三次握手和四次挥手的理解"></a>谈谈你对TCP三次握手和四次挥手的理解</h1><h2 id="个人题解"><a href="#个人题解" class="headerlink" title="个人题解"></a>个人题解</h2><h3 id="tcp-三次握手"><a href="#tcp-三次握手" class="headerlink" title="tcp 三次握手"></a>tcp 三次握手</h3><p>1、客户端:发送报文到服务器,表示我要发送请求了<br>2、服务端:确认客户端请求,返回确认报文,表示可以接收数据<br>3、客户端:确认报文,建立tcp链接</p>
<h3 id="tcp-三次挥手"><a href="#tcp-三次挥手" class="headerlink" title="tcp 三次挥手"></a>tcp 三次挥手</h3><p>1、客户端:发送断开链接报文,表示我要断开链接了<br>2、服务端:收到断开链接报文,确认信息包是否发送完毕<br>3、服务端:信息发送完毕,返回确认报文<br>4、客户端:收到服务端到确认消息,断开链接.服务端会等待一定时间,确认没有新的消息,然后断开链接.</p>
<h2 id="高赞题解"><a href="#高赞题解" class="headerlink" title="高赞题解"></a>高赞题解</h2><p><img src="https://oss.wddv.com/www/article/20200907103418.png" alt="20200907103418"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/15" target="_blank" rel="noopener">第 16 题：谈谈你对 TCP 三次握手和四次挥手的理解 #15</a><br><a href="https://github.com/GuoYuFu123" target="_blank" rel="noopener">最高赞作者github</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？</title>
    <url>/post/1cd2722b.html</url>
    <content><![CDATA[<h2 id="React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？"><a href="#React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？" class="headerlink" title="React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？"></a>React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote>
<p>个人猜想是diff算法的优化办法，固定key以后，如果更新数据，可以确定需要替换的数据，减少dom替换的开销</p>
</blockquote>
<h3 id="赞同最高题解"><a href="#赞同最高题解" class="headerlink" title="赞同最高题解"></a>赞同最高题解</h3><p>受楼下答案的一些特殊情况影响，导致很多人都认为key不能”提高”diff速度。在此继续重新梳理一下答案。</p>
<p>在楼下的答案中，部分讨论都是基于没有key的情况diff速度会更快。确实，这种观点并没有错。没有绑定key的情况下，并且在遍历模板简单的情况下，会导致虚拟新旧节点对比更快，节点也会复用。而这种复用是就地复用，一种鸭子辩型的复用。以下为简单的例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;i in dataList&quot;&gt;&#123;&#123; i &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    dataList: [1, 2, 3, 4, 5]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>以上的例子，v-for的内容会生成以下的dom节点数组，我们给每一个节点标记一个身份id：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#39;&lt;div&gt;1&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id： A</span><br><span class="line">  &#39;&lt;div&gt;2&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  B</span><br><span class="line">  &#39;&lt;div&gt;3&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  C</span><br><span class="line">  &#39;&lt;div&gt;4&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  D</span><br><span class="line">  &#39;&lt;div&gt;5&lt;&#x2F;div&gt;&#39;  &#x2F;&#x2F; id:  E</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>改变dataList数据，进行数据位置替换，对比改变后的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.dataList &#x3D; [4, 1, 3, 5, 2] &#x2F;&#x2F; 数据位置替换</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 没有key的情况， 节点位置不变，但是节点innerText内容更新了</span><br><span class="line"> [</span><br><span class="line">   &#39;&lt;div&gt;4&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id： A</span><br><span class="line">   &#39;&lt;div&gt;1&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  B</span><br><span class="line">   &#39;&lt;div&gt;3&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  C</span><br><span class="line">   &#39;&lt;div&gt;5&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  D</span><br><span class="line">   &#39;&lt;div&gt;2&lt;&#x2F;div&gt;&#39;  &#x2F;&#x2F; id:  E</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 有key的情况，dom节点位置进行了交换，但是内容没有更新</span><br><span class="line"> &#x2F;&#x2F; &lt;div v-for&#x3D;&quot;i in dataList&quot; :key&#x3D;&#39;i&#39;&gt;&#123;&#123; i &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"> [</span><br><span class="line">   &#39;&lt;div&gt;4&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id： D</span><br><span class="line">   &#39;&lt;div&gt;1&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  A</span><br><span class="line">   &#39;&lt;div&gt;3&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  C</span><br><span class="line">   &#39;&lt;div&gt;5&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  E</span><br><span class="line">   &#39;&lt;div&gt;2&lt;&#x2F;div&gt;&#39;  &#x2F;&#x2F; id:  B</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>
<p>增删dataList列表项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.dataList &#x3D; [3, 4, 5, 6, 7] &#x2F;&#x2F; 数据进行增删</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1. 没有key的情况， 节点位置不变，内容也更新了</span><br><span class="line">[</span><br><span class="line">  &#39;&lt;div&gt;3&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id： A</span><br><span class="line">  &#39;&lt;div&gt;4&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  B</span><br><span class="line">  &#39;&lt;div&gt;5&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  C</span><br><span class="line">  &#39;&lt;div&gt;6&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  D</span><br><span class="line">  &#39;&lt;div&gt;7&lt;&#x2F;div&gt;&#39;  &#x2F;&#x2F; id:  E</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2. 有key的情况， 节点删除了 A, B 节点，新增了 F, G 节点</span><br><span class="line">&#x2F;&#x2F; &lt;div v-for&#x3D;&quot;i in dataList&quot; :key&#x3D;&#39;i&#39;&gt;&#123;&#123; i &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">[</span><br><span class="line">  &#39;&lt;div&gt;3&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id： C</span><br><span class="line">  &#39;&lt;div&gt;4&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  D</span><br><span class="line">  &#39;&lt;div&gt;5&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  E</span><br><span class="line">  &#39;&lt;div&gt;6&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; id:  F</span><br><span class="line">  &#39;&lt;div&gt;7&lt;&#x2F;div&gt;&#39;  &#x2F;&#x2F; id:  G</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>从以上来看，不带有key，并且使用简单的模板，基于这个前提下，可以更有效的复用节点，diff速度来看也是不带key更加快速的，因为带key在增删节点上有耗时。这就是vue文档所说的默认模式。但是这个并不是key作用，而是没有key的情况下可以对节点就地复用，提高性能。</p>
<p>这种模式会带来一些隐藏的副作用，比如可能不会产生过渡效果，或者在某些节点有绑定数据（表单）状态，会出现状态错位。VUE文档也说明了 这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</p>
<p>楼下 @yeild 也提到，在不带key的情况下，对于简单列表页渲染来说diff节点更快是没有错误的。但是这并不是key的作用呀。</p>
<p>但是key的作用是什么？<br>我重新梳理了一下文字，可能这样子会更好理解一些。</p>
<p>key是给每一个vnode的唯一id,可以依靠key,更准确, 更快的拿到oldVnode中对应的vnode节点。</p>
<ol>
<li><p>更准确<br>因为带key就不是就地复用了，在sameNode函数 a.key === b.key对比中可以避免就地复用的情况。所以会更加准确。</p>
</li>
<li><p>更快<br>利用key的唯一性生成map对象来获取对应节点，比遍历方式更快。(这个观点，就是我最初的那个观点。从这个角度看，map会比遍历更快。)</p>
</li>
</ol>
<h4 id="原答案-———————–"><a href="#原答案-———————–" class="headerlink" title="原答案 ———————–"></a>原答案 ———————–</h4><p>vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中（建议先了解一下diff算法过程）。<br>在交叉对比中，当新节点跟旧节点头尾交叉对比没有结果时，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点（这里对应的是一个key =&gt; index 的map映射）。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找。相比而言。map映射的速度更快。<br>vue部分源码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; vue项目  src&#x2F;core&#x2F;vdom&#x2F;patch.js  -488行</span><br><span class="line">&#x2F;&#x2F; 以下是为了阅读性进行格式化后的代码</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; oldCh 是一个旧虚拟节点数组</span><br><span class="line">if (isUndef(oldKeyToIdx)) &#123;</span><br><span class="line">  oldKeyToIdx &#x3D; createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">&#125;</span><br><span class="line">if(isDef(newStartVnode.key)) &#123;</span><br><span class="line">  &#x2F;&#x2F; map 方式获取</span><br><span class="line">  idxInOld &#x3D; oldKeyToIdx[newStartVnode.key]</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  &#x2F;&#x2F; 遍历方式获取</span><br><span class="line">  idxInOld &#x3D; findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建map函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createKeyToOldIdx (children, beginIdx, endIdx) &#123;</span><br><span class="line">  let i, key</span><br><span class="line">  const map &#x3D; &#123;&#125;</span><br><span class="line">  for (i &#x3D; beginIdx; i &lt;&#x3D; endIdx; ++i) &#123;</span><br><span class="line">    key &#x3D; children[i].key</span><br><span class="line">    if (isDef(key)) map[key] &#x3D; i</span><br><span class="line">  &#125;</span><br><span class="line">  return map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历寻找</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; sameVnode 是对比新旧节点是否相同的函数</span><br><span class="line"> function findIdxInOld (node, oldCh, start, end) &#123;</span><br><span class="line">    for (let i &#x3D; start; i &lt; end; i++) &#123;</span><br><span class="line">      const c &#x3D; oldCh[i]</span><br><span class="line">      </span><br><span class="line">      if (isDef(c) &amp;&amp; sameVnode(node, c)) return i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>  <a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/1" target="_blank" rel="noopener">写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？</a></p>
]]></content>
      <categories>
        <category>开发技术</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>鞭策一下自己</title>
    <url>/post/61de2e1e.html</url>
    <content><![CDATA[<p>被喷了呀，喷的好惨。。还是要努力学习啊。。</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
</search>
